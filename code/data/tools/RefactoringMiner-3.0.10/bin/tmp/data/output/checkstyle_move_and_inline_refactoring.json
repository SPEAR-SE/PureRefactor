{"commits":[{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"6cad155e804eb432238ceace1e080e51f3673dd7","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"7d511eda7b5a19851ee14b357dd1a52dac006f6f","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"9e7e5b847eff9d14194b4a4addb9c03bcaa80b82","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"deaabbf141ea97a4e315efd2da2f2180880b454a","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"0a4955b2f2592f5586aaed870d24cff2f003ac3d","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"ccf0f51ee91cb7dc04cf566a0c57f84aede744ed","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"6ccd566e7abe1507c24289449ff484fbcad5203a","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a0764e39fde306897a59508b376f808452fa60ba","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"250c7ef9eaaaf00cd81db98b6ff8f64bb375b062","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"669e90de0c98c7a75ac9bf64d45e3228ea49d78b","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"88936a942d19869974ecb0eb1cfb7c1c70b8824e","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a034e2fc8fecb02f12a18ac2f5b9aeb2c0796f90","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"018fa6197ed6efc6dec1ce5ae442a4157dfa2c62","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"aa0c95289cac70697ba35d92e28e30efc2853ca8","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"def1e34e81efe6b71210bf89760e0c7d9eec2028","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"481caed3a04eac2e4f7ab91c08d5eace8ede10ac","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260","refactoringAnalyses":[{"type":"Extract Method","description":"Extract Method\tprivate toPattern(regex String) : Pattern extracted from public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":101,"endLine":117,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                           String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Changes are within the Extract Method refactoring mechanics \nOverlapped refactoring - can be identical by undoing the overlapped refactoring\n Severe changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                           String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":["/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }"],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","diffSourceCode":"    67:     /**\n-   68:      * Constructs a {@code SuppressFilterElement} for a\n-   69:      * file name pattern.\n-   70:      *\n-   71:      * @param files   regular expression for names of filtered files.\n-   72:      * @param checks  regular expression for filtered check classes.\n-   73:      * @param message regular expression for messages.\n-   74:      * @param modId   the id\n-   75:      * @param lines   lines CSV values and ranges for line number filtering.\n-   76:      * @param columns columns CSV values and ranges for column number filtering.\n-   77:      */\n-   78:     public SuppressFilterElement(String files, String checks,\n-   79:                            String message, String modId, String lines, String columns) {\n-   80:         if (files \u003d\u003d null) {\n-   81:             fileRegexp \u003d null;\n-   82:         }\n-   83:         else {\n-   84:             fileRegexp \u003d Pattern.compile(files);\n-   85:         }\n-   86:         if (checks \u003d\u003d null) {\n-   87:             checkRegexp \u003d null;\n-   88:         }\n-   89:         else {\n-   90:             checkRegexp \u003d Pattern.compile(checks);\n-   91:         }\n-   92:         if (message \u003d\u003d null) {\n-   93:             messageRegexp \u003d null;\n+   68:      * Creates a {@code SuppressFilterElement} instance.\n+   69:      *\n+   70:      * @param files regular expression for filtered file names\n+   71:      * @param checks regular expression for filtered check classes\n+   72:      * @param message regular expression for messages.\n+   73:      * @param moduleId the module id\n+   74:      * @param lines CSV for lines\n+   75:      * @param columns CSV for columns\n+   76:      */\n+   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+   78:             String lines, String columns) {\n+   79:         fileRegexp \u003d files;\n+   80:         checkRegexp \u003d checks;\n+   81:         messageRegexp \u003d message;\n+   82:         this.moduleId \u003d moduleId;\n+   83:         if (lines \u003d\u003d null) {\n+   84:             linesCsv \u003d null;\n+   85:             lineFilter \u003d null;\n+   86:         }\n+   87:         else {\n+   88:             linesCsv \u003d lines;\n+   89:             lineFilter \u003d new CsvFilterElement(lines);\n+   90:         }\n+   91:         if (columns \u003d\u003d null) {\n+   92:             columnsCsv \u003d null;\n+   93:             columnFilter \u003d null;\n    94:         }\n    95:         else {\n-   96:             messageRegexp \u003d Pattern.compile(message);\n-   97:         }\n-   98:         moduleId \u003d modId;\n-   99:         linesCsv \u003d lines;\n-  100:         if (lines \u003d\u003d null) {\n-  101:             lineFilter \u003d null;\n-  102:         }\n-  103:         else {\n-  104:             lineFilter \u003d new CsvFilterElement(lines);\n-  105:         }\n-  106:         columnsCsv \u003d columns;\n-  107:         if (columns \u003d\u003d null) {\n-  108:             columnFilter \u003d null;\n-  109:         }\n-  110:         else {\n-  111:             columnFilter \u003d new CsvFilterElement(columns);\n-  112:         }\n-  113:     }\n-  114: \n-  115:     /**\n-  116:      * Creates a {@code SuppressFilterElement} instance.\n-  117:      *\n-  119:      * @param checks regular expression for filtered check classes\n-  120:      * @param message regular expression for messages.\n-  121:      * @param moduleId the module id\n-  122:      * @param lines CSV for lines\n-  123:      * @param columns CSV for columns\n-  124:      */\n-  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-  126:             String lines, String columns) {\n-  127:         fileRegexp \u003d files;\n-  128:         checkRegexp \u003d checks;\n-  129:         messageRegexp \u003d message;\n-  130:         this.moduleId \u003d moduleId;\n-  131:         if (lines \u003d\u003d null) {\n-  132:             linesCsv \u003d null;\n-  133:             lineFilter \u003d null;\n-  134:         }\n-  135:         else {\n+   96:             columnsCsv \u003d columns;\n+   97:             columnFilter \u003d new CsvFilterElement(columns);\n+   98:         }\n+   99:     }\n+  100: \n+  101:     /**\n+  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n+  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n+  104:      * objects and passed to the main constructor.\n+  105:      *\n+  106:      * @param files   regular expression for names of filtered files.\n+  107:      * @param checks  regular expression for filtered check classes.\n+  108:      * @param message regular expression for messages.\n+  109:      * @param modId   the id\n+  110:      * @param lines   lines CSV values and ranges for line number filtering.\n+  111:      * @param columns columns CSV values and ranges for column number filtering.\n+  112:      */\n+  113:     public SuppressFilterElement(String files, String checks, String message,\n+  114:                                  String modId, String lines, String columns) {\n+  115:         this(toPattern(files), toPattern(checks), toPattern(message),\n+  116:                 modId, lines, columns);\n+  117:     }\n+  119:     /**\n+  120:      * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n+  121:      * if the input is {@code null}.\n+  122:      *\n+  123:      * @param regex the regular expression as a string, may be {@code null}.\n+  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n+  125:      */\n+  126:     private static Pattern toPattern(String regex) {\n+  127:         final Pattern result;\n+  128:         if (regex !\u003d null) {\n+  129:             result \u003d Pattern.compile(regex);\n+  130:         }\n+  131:         else {\n+  132:             result \u003d null;\n+  133:         }\n+  134:         return result;\n+  135:     }\n","uniqueId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260_67_113_119_135_101_117"},{"type":"Extract Method","description":"Extract Method\tprivate toPattern(regex String) : Pattern extracted from public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":101,"endLine":117,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                           String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Changes are within the Extract Method refactoring mechanics \nOverlapped refactoring - can be identical by undoing the overlapped refactoring\n Severe changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                           String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":["/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }"],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","diffSourceCode":"    67:     /**\n-   68:      * Constructs a {@code SuppressFilterElement} for a\n-   69:      * file name pattern.\n-   70:      *\n-   71:      * @param files   regular expression for names of filtered files.\n-   72:      * @param checks  regular expression for filtered check classes.\n-   73:      * @param message regular expression for messages.\n-   74:      * @param modId   the id\n-   75:      * @param lines   lines CSV values and ranges for line number filtering.\n-   76:      * @param columns columns CSV values and ranges for column number filtering.\n-   77:      */\n-   78:     public SuppressFilterElement(String files, String checks,\n-   79:                            String message, String modId, String lines, String columns) {\n-   80:         if (files \u003d\u003d null) {\n-   81:             fileRegexp \u003d null;\n-   82:         }\n-   83:         else {\n-   84:             fileRegexp \u003d Pattern.compile(files);\n-   85:         }\n-   86:         if (checks \u003d\u003d null) {\n-   87:             checkRegexp \u003d null;\n-   88:         }\n-   89:         else {\n-   90:             checkRegexp \u003d Pattern.compile(checks);\n-   91:         }\n-   92:         if (message \u003d\u003d null) {\n-   93:             messageRegexp \u003d null;\n+   68:      * Creates a {@code SuppressFilterElement} instance.\n+   69:      *\n+   70:      * @param files regular expression for filtered file names\n+   71:      * @param checks regular expression for filtered check classes\n+   72:      * @param message regular expression for messages.\n+   73:      * @param moduleId the module id\n+   74:      * @param lines CSV for lines\n+   75:      * @param columns CSV for columns\n+   76:      */\n+   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+   78:             String lines, String columns) {\n+   79:         fileRegexp \u003d files;\n+   80:         checkRegexp \u003d checks;\n+   81:         messageRegexp \u003d message;\n+   82:         this.moduleId \u003d moduleId;\n+   83:         if (lines \u003d\u003d null) {\n+   84:             linesCsv \u003d null;\n+   85:             lineFilter \u003d null;\n+   86:         }\n+   87:         else {\n+   88:             linesCsv \u003d lines;\n+   89:             lineFilter \u003d new CsvFilterElement(lines);\n+   90:         }\n+   91:         if (columns \u003d\u003d null) {\n+   92:             columnsCsv \u003d null;\n+   93:             columnFilter \u003d null;\n    94:         }\n    95:         else {\n-   96:             messageRegexp \u003d Pattern.compile(message);\n-   97:         }\n-   98:         moduleId \u003d modId;\n-   99:         linesCsv \u003d lines;\n-  100:         if (lines \u003d\u003d null) {\n-  101:             lineFilter \u003d null;\n-  102:         }\n-  103:         else {\n-  104:             lineFilter \u003d new CsvFilterElement(lines);\n-  105:         }\n-  106:         columnsCsv \u003d columns;\n-  107:         if (columns \u003d\u003d null) {\n-  108:             columnFilter \u003d null;\n-  109:         }\n-  110:         else {\n-  111:             columnFilter \u003d new CsvFilterElement(columns);\n-  112:         }\n-  113:     }\n-  114: \n-  115:     /**\n-  116:      * Creates a {@code SuppressFilterElement} instance.\n-  117:      *\n-  119:      * @param checks regular expression for filtered check classes\n-  120:      * @param message regular expression for messages.\n-  121:      * @param moduleId the module id\n-  122:      * @param lines CSV for lines\n-  123:      * @param columns CSV for columns\n-  124:      */\n-  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-  126:             String lines, String columns) {\n-  127:         fileRegexp \u003d files;\n-  128:         checkRegexp \u003d checks;\n-  129:         messageRegexp \u003d message;\n-  130:         this.moduleId \u003d moduleId;\n-  131:         if (lines \u003d\u003d null) {\n-  132:             linesCsv \u003d null;\n-  133:             lineFilter \u003d null;\n-  134:         }\n-  135:         else {\n+   96:             columnsCsv \u003d columns;\n+   97:             columnFilter \u003d new CsvFilterElement(columns);\n+   98:         }\n+   99:     }\n+  100: \n+  101:     /**\n+  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n+  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n+  104:      * objects and passed to the main constructor.\n+  105:      *\n+  106:      * @param files   regular expression for names of filtered files.\n+  107:      * @param checks  regular expression for filtered check classes.\n+  108:      * @param message regular expression for messages.\n+  109:      * @param modId   the id\n+  110:      * @param lines   lines CSV values and ranges for line number filtering.\n+  111:      * @param columns columns CSV values and ranges for column number filtering.\n+  112:      */\n+  113:     public SuppressFilterElement(String files, String checks, String message,\n+  114:                                  String modId, String lines, String columns) {\n+  115:         this(toPattern(files), toPattern(checks), toPattern(message),\n+  116:                 modId, lines, columns);\n+  117:     }\n+  119:     /**\n+  120:      * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n+  121:      * if the input is {@code null}.\n+  122:      *\n+  123:      * @param regex the regular expression as a string, may be {@code null}.\n+  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n+  125:      */\n+  126:     private static Pattern toPattern(String regex) {\n+  127:         final Pattern result;\n+  128:         if (regex !\u003d null) {\n+  129:             result \u003d Pattern.compile(regex);\n+  130:         }\n+  131:         else {\n+  132:             result \u003d null;\n+  133:         }\n+  134:         return result;\n+  135:     }\n","uniqueId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260_67_113_119_135_101_117"},{"type":"Extract Method","description":"Extract Method\tprivate toPattern(regex String) : Pattern extracted from public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":101,"endLine":117,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                           String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Changes are within the Extract Method refactoring mechanics \nOverlapped refactoring - can be identical by undoing the overlapped refactoring\n Severe changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                           String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":["/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }"],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","diffSourceCode":"    67:     /**\n-   68:      * Constructs a {@code SuppressFilterElement} for a\n-   69:      * file name pattern.\n-   70:      *\n-   71:      * @param files   regular expression for names of filtered files.\n-   72:      * @param checks  regular expression for filtered check classes.\n-   73:      * @param message regular expression for messages.\n-   74:      * @param modId   the id\n-   75:      * @param lines   lines CSV values and ranges for line number filtering.\n-   76:      * @param columns columns CSV values and ranges for column number filtering.\n-   77:      */\n-   78:     public SuppressFilterElement(String files, String checks,\n-   79:                            String message, String modId, String lines, String columns) {\n-   80:         if (files \u003d\u003d null) {\n-   81:             fileRegexp \u003d null;\n-   82:         }\n-   83:         else {\n-   84:             fileRegexp \u003d Pattern.compile(files);\n-   85:         }\n-   86:         if (checks \u003d\u003d null) {\n-   87:             checkRegexp \u003d null;\n-   88:         }\n-   89:         else {\n-   90:             checkRegexp \u003d Pattern.compile(checks);\n-   91:         }\n-   92:         if (message \u003d\u003d null) {\n-   93:             messageRegexp \u003d null;\n+   68:      * Creates a {@code SuppressFilterElement} instance.\n+   69:      *\n+   70:      * @param files regular expression for filtered file names\n+   71:      * @param checks regular expression for filtered check classes\n+   72:      * @param message regular expression for messages.\n+   73:      * @param moduleId the module id\n+   74:      * @param lines CSV for lines\n+   75:      * @param columns CSV for columns\n+   76:      */\n+   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+   78:             String lines, String columns) {\n+   79:         fileRegexp \u003d files;\n+   80:         checkRegexp \u003d checks;\n+   81:         messageRegexp \u003d message;\n+   82:         this.moduleId \u003d moduleId;\n+   83:         if (lines \u003d\u003d null) {\n+   84:             linesCsv \u003d null;\n+   85:             lineFilter \u003d null;\n+   86:         }\n+   87:         else {\n+   88:             linesCsv \u003d lines;\n+   89:             lineFilter \u003d new CsvFilterElement(lines);\n+   90:         }\n+   91:         if (columns \u003d\u003d null) {\n+   92:             columnsCsv \u003d null;\n+   93:             columnFilter \u003d null;\n    94:         }\n    95:         else {\n-   96:             messageRegexp \u003d Pattern.compile(message);\n-   97:         }\n-   98:         moduleId \u003d modId;\n-   99:         linesCsv \u003d lines;\n-  100:         if (lines \u003d\u003d null) {\n-  101:             lineFilter \u003d null;\n-  102:         }\n-  103:         else {\n-  104:             lineFilter \u003d new CsvFilterElement(lines);\n-  105:         }\n-  106:         columnsCsv \u003d columns;\n-  107:         if (columns \u003d\u003d null) {\n-  108:             columnFilter \u003d null;\n-  109:         }\n-  110:         else {\n-  111:             columnFilter \u003d new CsvFilterElement(columns);\n-  112:         }\n-  113:     }\n-  114: \n-  115:     /**\n-  116:      * Creates a {@code SuppressFilterElement} instance.\n-  117:      *\n-  119:      * @param checks regular expression for filtered check classes\n-  120:      * @param message regular expression for messages.\n-  121:      * @param moduleId the module id\n-  122:      * @param lines CSV for lines\n-  123:      * @param columns CSV for columns\n-  124:      */\n-  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-  126:             String lines, String columns) {\n-  127:         fileRegexp \u003d files;\n-  128:         checkRegexp \u003d checks;\n-  129:         messageRegexp \u003d message;\n-  130:         this.moduleId \u003d moduleId;\n-  131:         if (lines \u003d\u003d null) {\n-  132:             linesCsv \u003d null;\n-  133:             lineFilter \u003d null;\n-  134:         }\n-  135:         else {\n+   96:             columnsCsv \u003d columns;\n+   97:             columnFilter \u003d new CsvFilterElement(columns);\n+   98:         }\n+   99:     }\n+  100: \n+  101:     /**\n+  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n+  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n+  104:      * objects and passed to the main constructor.\n+  105:      *\n+  106:      * @param files   regular expression for names of filtered files.\n+  107:      * @param checks  regular expression for filtered check classes.\n+  108:      * @param message regular expression for messages.\n+  109:      * @param modId   the id\n+  110:      * @param lines   lines CSV values and ranges for line number filtering.\n+  111:      * @param columns columns CSV values and ranges for column number filtering.\n+  112:      */\n+  113:     public SuppressFilterElement(String files, String checks, String message,\n+  114:                                  String modId, String lines, String columns) {\n+  115:         this(toPattern(files), toPattern(checks), toPattern(message),\n+  116:                 modId, lines, columns);\n+  117:     }\n+  119:     /**\n+  120:      * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n+  121:      * if the input is {@code null}.\n+  122:      *\n+  123:      * @param regex the regular expression as a string, may be {@code null}.\n+  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n+  125:      */\n+  126:     private static Pattern toPattern(String regex) {\n+  127:         final Pattern result;\n+  128:         if (regex !\u003d null) {\n+  129:             result \u003d Pattern.compile(regex);\n+  130:         }\n+  131:         else {\n+  132:             result \u003d null;\n+  133:         }\n+  134:         return result;\n+  135:     }\n","uniqueId":"7d26dcfdfa835ea5ac0fb759e755b9823cc13260_67_113_119_135_101_117"}]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"01e08919844372537a02648b73da525c27cb9d8e","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"bb12f5f28fab0def5a8d4b32079c06f2f3b4f915","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"5d332655168d924be96564b4d58d2503765b8796","refactoringAnalyses":[{"type":"Inline Method","description":"Inline Method\tprivate toPattern(regex String) : Pattern inlined to public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"5d332655168d924be96564b4d58d2503765b8796","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#toPattern","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#toPattern"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Severe Changes Severe Changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":[],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","diffSourceCode":"    67:     /**\n-   68:      * Creates a {@code SuppressFilterElement} instance.\n-   69:      *\n-   70:      * @param files regular expression for filtered file names\n-   71:      * @param checks regular expression for filtered check classes\n-   72:      * @param message regular expression for messages.\n-   73:      * @param moduleId the module id\n-   74:      * @param lines CSV for lines\n-   75:      * @param columns CSV for columns\n-   76:      */\n-   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-   78:             String lines, String columns) {\n-   79:         fileRegexp \u003d files;\n-   80:         checkRegexp \u003d checks;\n-   81:         messageRegexp \u003d message;\n-   82:         this.moduleId \u003d moduleId;\n-   83:         if (lines \u003d\u003d null) {\n-   84:             linesCsv \u003d null;\n-   85:             lineFilter \u003d null;\n-   86:         }\n-   87:         else {\n-   88:             linesCsv \u003d lines;\n-   89:             lineFilter \u003d new CsvFilterElement(lines);\n-   90:         }\n-   91:         if (columns \u003d\u003d null) {\n-   92:             columnsCsv \u003d null;\n-   93:             columnFilter \u003d null;\n+   68:      * Constructs a {@code SuppressFilterElement} for a\n+   69:      * file name pattern.\n+   70:      *\n+   71:      * @param files   regular expression for names of filtered files.\n+   72:      * @param checks  regular expression for filtered check classes.\n+   73:      * @param message regular expression for messages.\n+   74:      * @param modId   the id\n+   75:      * @param lines   lines CSV values and ranges for line number filtering.\n+   76:      * @param columns columns CSV values and ranges for column number filtering.\n+   77:      */\n+   78:     public SuppressFilterElement(String files, String checks,\n+   79:                                  String message, String modId, String lines, String columns) {\n+   80:         if (files \u003d\u003d null) {\n+   81:             fileRegexp \u003d null;\n+   82:         }\n+   83:         else {\n+   84:             fileRegexp \u003d Pattern.compile(files);\n+   85:         }\n+   86:         if (checks \u003d\u003d null) {\n+   87:             checkRegexp \u003d null;\n+   88:         }\n+   89:         else {\n+   90:             checkRegexp \u003d Pattern.compile(checks);\n+   91:         }\n+   92:         if (message \u003d\u003d null) {\n+   93:             messageRegexp \u003d null;\n    94:         }\n    95:         else {\n-   96:             columnsCsv \u003d columns;\n-   97:             columnFilter \u003d new CsvFilterElement(columns);\n-   98:         }\n-   99:     }\n-  100: \n-  101:     /**\n-  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n-  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n-  104:      * objects and passed to the main constructor.\n-  105:      *\n-  106:      * @param files   regular expression for names of filtered files.\n-  107:      * @param checks  regular expression for filtered check classes.\n-  108:      * @param message regular expression for messages.\n-  109:      * @param modId   the id\n-  110:      * @param lines   lines CSV values and ranges for line number filtering.\n-  111:      * @param columns columns CSV values and ranges for column number filtering.\n-  112:      */\n-  113:     public SuppressFilterElement(String files, String checks, String message,\n-  119:     /**\n-  120:      * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n-  121:      * if the input is {@code null}.\n-  122:      *\n-  123:      * @param regex the regular expression as a string, may be {@code null}.\n-  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n-  125:      */\n-  126:     private static Pattern toPattern(String regex) {\n-  127:         final Pattern result;\n-  128:         if (regex !\u003d null) {\n-  129:             result \u003d Pattern.compile(regex);\n-  130:         }\n-  131:         else {\n-  132:             result \u003d null;\n-  133:         }\n-  134:         return result;\n-  135:     }\n+   96:             messageRegexp \u003d Pattern.compile(message);\n+   97:         }\n+   98:         moduleId \u003d modId;\n+   99:         linesCsv \u003d lines;\n+  100:         if (lines \u003d\u003d null) {\n+  101:             lineFilter \u003d null;\n+  102:         }\n+  103:         else {\n+  104:             lineFilter \u003d new CsvFilterElement(lines);\n+  105:         }\n+  106:         columnsCsv \u003d columns;\n+  107:         if (columns \u003d\u003d null) {\n+  108:             columnFilter \u003d null;\n+  109:         }\n+  110:         else {\n+  111:             columnFilter \u003d new CsvFilterElement(columns);\n+  112:         }\n+  113:     }\n+  119:      * @param checks regular expression for filtered check classes\n+  120:      * @param message regular expression for messages.\n+  121:      * @param moduleId the module id\n+  122:      * @param lines CSV for lines\n+  123:      * @param columns CSV for columns\n+  124:      */\n+  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+  126:             String lines, String columns) {\n+  127:         fileRegexp \u003d files;\n+  128:         checkRegexp \u003d checks;\n+  129:         messageRegexp \u003d message;\n+  130:         this.moduleId \u003d moduleId;\n+  131:         if (lines \u003d\u003d null) {\n+  132:             linesCsv \u003d null;\n+  133:             lineFilter \u003d null;\n+  134:         }\n+  135:         else {\n","uniqueId":"5d332655168d924be96564b4d58d2503765b8796_119_135__67_113_119_135"},{"type":"Inline Method","description":"Inline Method\tprivate toPattern(regex String) : Pattern inlined to public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"5d332655168d924be96564b4d58d2503765b8796","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#toPattern","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#toPattern"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Severe Changes Severe Changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":[],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","diffSourceCode":"    67:     /**\n-   68:      * Creates a {@code SuppressFilterElement} instance.\n-   69:      *\n-   70:      * @param files regular expression for filtered file names\n-   71:      * @param checks regular expression for filtered check classes\n-   72:      * @param message regular expression for messages.\n-   73:      * @param moduleId the module id\n-   74:      * @param lines CSV for lines\n-   75:      * @param columns CSV for columns\n-   76:      */\n-   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-   78:             String lines, String columns) {\n-   79:         fileRegexp \u003d files;\n-   80:         checkRegexp \u003d checks;\n-   81:         messageRegexp \u003d message;\n-   82:         this.moduleId \u003d moduleId;\n-   83:         if (lines \u003d\u003d null) {\n-   84:             linesCsv \u003d null;\n-   85:             lineFilter \u003d null;\n-   86:         }\n-   87:         else {\n-   88:             linesCsv \u003d lines;\n-   89:             lineFilter \u003d new CsvFilterElement(lines);\n-   90:         }\n-   91:         if (columns \u003d\u003d null) {\n-   92:             columnsCsv \u003d null;\n-   93:             columnFilter \u003d null;\n+   68:      * Constructs a {@code SuppressFilterElement} for a\n+   69:      * file name pattern.\n+   70:      *\n+   71:      * @param files   regular expression for names of filtered files.\n+   72:      * @param checks  regular expression for filtered check classes.\n+   73:      * @param message regular expression for messages.\n+   74:      * @param modId   the id\n+   75:      * @param lines   lines CSV values and ranges for line number filtering.\n+   76:      * @param columns columns CSV values and ranges for column number filtering.\n+   77:      */\n+   78:     public SuppressFilterElement(String files, String checks,\n+   79:                                  String message, String modId, String lines, String columns) {\n+   80:         if (files \u003d\u003d null) {\n+   81:             fileRegexp \u003d null;\n+   82:         }\n+   83:         else {\n+   84:             fileRegexp \u003d Pattern.compile(files);\n+   85:         }\n+   86:         if (checks \u003d\u003d null) {\n+   87:             checkRegexp \u003d null;\n+   88:         }\n+   89:         else {\n+   90:             checkRegexp \u003d Pattern.compile(checks);\n+   91:         }\n+   92:         if (message \u003d\u003d null) {\n+   93:             messageRegexp \u003d null;\n    94:         }\n    95:         else {\n-   96:             columnsCsv \u003d columns;\n-   97:             columnFilter \u003d new CsvFilterElement(columns);\n-   98:         }\n-   99:     }\n-  100: \n-  101:     /**\n-  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n-  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n-  104:      * objects and passed to the main constructor.\n-  105:      *\n-  106:      * @param files   regular expression for names of filtered files.\n-  107:      * @param checks  regular expression for filtered check classes.\n-  108:      * @param message regular expression for messages.\n-  109:      * @param modId   the id\n-  110:      * @param lines   lines CSV values and ranges for line number filtering.\n-  111:      * @param columns columns CSV values and ranges for column number filtering.\n-  112:      */\n-  113:     public SuppressFilterElement(String files, String checks, String message,\n-  119:     /**\n-  120:      * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n-  121:      * if the input is {@code null}.\n-  122:      *\n-  123:      * @param regex the regular expression as a string, may be {@code null}.\n-  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n-  125:      */\n-  126:     private static Pattern toPattern(String regex) {\n-  127:         final Pattern result;\n-  128:         if (regex !\u003d null) {\n-  129:             result \u003d Pattern.compile(regex);\n-  130:         }\n-  131:         else {\n-  132:             result \u003d null;\n-  133:         }\n-  134:         return result;\n-  135:     }\n+   96:             messageRegexp \u003d Pattern.compile(message);\n+   97:         }\n+   98:         moduleId \u003d modId;\n+   99:         linesCsv \u003d lines;\n+  100:         if (lines \u003d\u003d null) {\n+  101:             lineFilter \u003d null;\n+  102:         }\n+  103:         else {\n+  104:             lineFilter \u003d new CsvFilterElement(lines);\n+  105:         }\n+  106:         columnsCsv \u003d columns;\n+  107:         if (columns \u003d\u003d null) {\n+  108:             columnFilter \u003d null;\n+  109:         }\n+  110:         else {\n+  111:             columnFilter \u003d new CsvFilterElement(columns);\n+  112:         }\n+  113:     }\n+  119:      * @param checks regular expression for filtered check classes\n+  120:      * @param message regular expression for messages.\n+  121:      * @param moduleId the module id\n+  122:      * @param lines CSV for lines\n+  123:      * @param columns CSV for columns\n+  124:      */\n+  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+  126:             String lines, String columns) {\n+  127:         fileRegexp \u003d files;\n+  128:         checkRegexp \u003d checks;\n+  129:         messageRegexp \u003d message;\n+  130:         this.moduleId \u003d moduleId;\n+  131:         if (lines \u003d\u003d null) {\n+  132:             linesCsv \u003d null;\n+  133:             lineFilter \u003d null;\n+  134:         }\n+  135:         else {\n","uniqueId":"5d332655168d924be96564b4d58d2503765b8796_119_135__67_113_119_135"},{"type":"Inline Method","description":"Inline Method\tprivate toPattern(regex String) : Pattern inlined to public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"5d332655168d924be96564b4d58d2503765b8796","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#toPattern","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#toPattern"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Severe Changes Severe Changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks, String message,\n                                 String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n     * if the input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":[],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","diffSourceCode":"    67:     /**\n-   68:      * Creates a {@code SuppressFilterElement} instance.\n-   69:      *\n-   70:      * @param files regular expression for filtered file names\n-   71:      * @param checks regular expression for filtered check classes\n-   72:      * @param message regular expression for messages.\n-   73:      * @param moduleId the module id\n-   74:      * @param lines CSV for lines\n-   75:      * @param columns CSV for columns\n-   76:      */\n-   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-   78:             String lines, String columns) {\n-   79:         fileRegexp \u003d files;\n-   80:         checkRegexp \u003d checks;\n-   81:         messageRegexp \u003d message;\n-   82:         this.moduleId \u003d moduleId;\n-   83:         if (lines \u003d\u003d null) {\n-   84:             linesCsv \u003d null;\n-   85:             lineFilter \u003d null;\n-   86:         }\n-   87:         else {\n-   88:             linesCsv \u003d lines;\n-   89:             lineFilter \u003d new CsvFilterElement(lines);\n-   90:         }\n-   91:         if (columns \u003d\u003d null) {\n-   92:             columnsCsv \u003d null;\n-   93:             columnFilter \u003d null;\n+   68:      * Constructs a {@code SuppressFilterElement} for a\n+   69:      * file name pattern.\n+   70:      *\n+   71:      * @param files   regular expression for names of filtered files.\n+   72:      * @param checks  regular expression for filtered check classes.\n+   73:      * @param message regular expression for messages.\n+   74:      * @param modId   the id\n+   75:      * @param lines   lines CSV values and ranges for line number filtering.\n+   76:      * @param columns columns CSV values and ranges for column number filtering.\n+   77:      */\n+   78:     public SuppressFilterElement(String files, String checks,\n+   79:                                  String message, String modId, String lines, String columns) {\n+   80:         if (files \u003d\u003d null) {\n+   81:             fileRegexp \u003d null;\n+   82:         }\n+   83:         else {\n+   84:             fileRegexp \u003d Pattern.compile(files);\n+   85:         }\n+   86:         if (checks \u003d\u003d null) {\n+   87:             checkRegexp \u003d null;\n+   88:         }\n+   89:         else {\n+   90:             checkRegexp \u003d Pattern.compile(checks);\n+   91:         }\n+   92:         if (message \u003d\u003d null) {\n+   93:             messageRegexp \u003d null;\n    94:         }\n    95:         else {\n-   96:             columnsCsv \u003d columns;\n-   97:             columnFilter \u003d new CsvFilterElement(columns);\n-   98:         }\n-   99:     }\n-  100: \n-  101:     /**\n-  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n-  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n-  104:      * objects and passed to the main constructor.\n-  105:      *\n-  106:      * @param files   regular expression for names of filtered files.\n-  107:      * @param checks  regular expression for filtered check classes.\n-  108:      * @param message regular expression for messages.\n-  109:      * @param modId   the id\n-  110:      * @param lines   lines CSV values and ranges for line number filtering.\n-  111:      * @param columns columns CSV values and ranges for column number filtering.\n-  112:      */\n-  113:     public SuppressFilterElement(String files, String checks, String message,\n-  119:     /**\n-  120:      * Converts a string into a compiled {@code Pattern}, or returns {@code null}\n-  121:      * if the input is {@code null}.\n-  122:      *\n-  123:      * @param regex the regular expression as a string, may be {@code null}.\n-  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n-  125:      */\n-  126:     private static Pattern toPattern(String regex) {\n-  127:         final Pattern result;\n-  128:         if (regex !\u003d null) {\n-  129:             result \u003d Pattern.compile(regex);\n-  130:         }\n-  131:         else {\n-  132:             result \u003d null;\n-  133:         }\n-  134:         return result;\n-  135:     }\n+   96:             messageRegexp \u003d Pattern.compile(message);\n+   97:         }\n+   98:         moduleId \u003d modId;\n+   99:         linesCsv \u003d lines;\n+  100:         if (lines \u003d\u003d null) {\n+  101:             lineFilter \u003d null;\n+  102:         }\n+  103:         else {\n+  104:             lineFilter \u003d new CsvFilterElement(lines);\n+  105:         }\n+  106:         columnsCsv \u003d columns;\n+  107:         if (columns \u003d\u003d null) {\n+  108:             columnFilter \u003d null;\n+  109:         }\n+  110:         else {\n+  111:             columnFilter \u003d new CsvFilterElement(columns);\n+  112:         }\n+  113:     }\n+  119:      * @param checks regular expression for filtered check classes\n+  120:      * @param message regular expression for messages.\n+  121:      * @param moduleId the module id\n+  122:      * @param lines CSV for lines\n+  123:      * @param columns CSV for columns\n+  124:      */\n+  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+  126:             String lines, String columns) {\n+  127:         fileRegexp \u003d files;\n+  128:         checkRegexp \u003d checks;\n+  129:         messageRegexp \u003d message;\n+  130:         this.moduleId \u003d moduleId;\n+  131:         if (lines \u003d\u003d null) {\n+  132:             linesCsv \u003d null;\n+  133:             lineFilter \u003d null;\n+  134:         }\n+  135:         else {\n","uniqueId":"5d332655168d924be96564b4d58d2503765b8796_119_135__67_113_119_135"}]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"3e81a4a429e3b7d7746d0f63abb407fb42ed8d77","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"578a2623b4da6d796638fefe0ef13fecd3dd6950","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"c78453508c5b47097bc2b2ba52f4d1421fb3d947","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"0743036f58bb21c45c8dcf43293114220250b7db","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"4b1908d744899807d5734d045e970e946dc0f4c7","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"c9be144ccdde996f15c1afcf71756f6372472ec3","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"8761e2b9ebf21c63c74b69f867c266398e489f3d","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"d7fa515ca7eb53f52f5c65c228ee992a5912ab9f","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"56fbb434cfa610df04158f49404a063b7ca15228","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a4b8f0b6ed852c1e2ae4e199988ebfe821078310","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a2346d905eda08380e0b07f35cc4bc2a8ac1c8ab","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"230642536dcac13ad53073b3836f7323cd9324ce","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2","refactoringAnalyses":[{"type":"Extract Method","description":"Extract Method\tprivate toPattern(regex String) : Pattern extracted from public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":101,"endLine":117,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Changes are within the Extract Method refactoring mechanics \nOverlapped refactoring - can be identical by undoing the overlapped refactoring\n Severe changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":["/**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }"],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n/**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","diffSourceCode":"    67:     /**\n-   68:      * Constructs a {@code SuppressFilterElement} for a\n-   69:      * file name pattern.\n-   70:      *\n-   71:      * @param files   regular expression for names of filtered files.\n-   72:      * @param checks  regular expression for filtered check classes.\n-   73:      * @param message regular expression for messages.\n-   74:      * @param modId   the id\n-   75:      * @param lines   lines CSV values and ranges for line number filtering.\n-   76:      * @param columns columns CSV values and ranges for column number filtering.\n-   77:      */\n-   78:     public SuppressFilterElement(String files, String checks,\n-   79:                                  String message, String modId, String lines, String columns) {\n-   80:         if (files \u003d\u003d null) {\n-   81:             fileRegexp \u003d null;\n-   82:         }\n-   83:         else {\n-   84:             fileRegexp \u003d Pattern.compile(files);\n-   85:         }\n-   86:         if (checks \u003d\u003d null) {\n-   87:             checkRegexp \u003d null;\n-   88:         }\n-   89:         else {\n-   90:             checkRegexp \u003d Pattern.compile(checks);\n-   91:         }\n-   92:         if (message \u003d\u003d null) {\n-   93:             messageRegexp \u003d null;\n+   68:      * Creates a {@code SuppressFilterElement} instance.\n+   69:      *\n+   70:      * @param files regular expression for filtered file names\n+   71:      * @param checks regular expression for filtered check classes\n+   72:      * @param message regular expression for messages.\n+   73:      * @param moduleId the module id\n+   74:      * @param lines CSV for lines\n+   75:      * @param columns CSV for columns\n+   76:      */\n+   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+   78:             String lines, String columns) {\n+   79:         fileRegexp \u003d files;\n+   80:         checkRegexp \u003d checks;\n+   81:         messageRegexp \u003d message;\n+   82:         this.moduleId \u003d moduleId;\n+   83:         if (lines \u003d\u003d null) {\n+   84:             linesCsv \u003d null;\n+   85:             lineFilter \u003d null;\n+   86:         }\n+   87:         else {\n+   88:             linesCsv \u003d lines;\n+   89:             lineFilter \u003d new CsvFilterElement(lines);\n+   90:         }\n+   91:         if (columns \u003d\u003d null) {\n+   92:             columnsCsv \u003d null;\n+   93:             columnFilter \u003d null;\n    94:         }\n    95:         else {\n-   96:             messageRegexp \u003d Pattern.compile(message);\n-   97:         }\n-   98:         moduleId \u003d modId;\n-   99:         linesCsv \u003d lines;\n-  100:         if (lines \u003d\u003d null) {\n-  101:             lineFilter \u003d null;\n-  102:         }\n-  103:         else {\n-  104:             lineFilter \u003d new CsvFilterElement(lines);\n-  105:         }\n-  106:         columnsCsv \u003d columns;\n-  107:         if (columns \u003d\u003d null) {\n-  108:             columnFilter \u003d null;\n-  109:         }\n-  110:         else {\n-  111:             columnFilter \u003d new CsvFilterElement(columns);\n-  112:         }\n-  113:     }\n-  114: \n-  115:     /**\n-  116:      * Creates a {@code SuppressFilterElement} instance.\n-  117:      *\n-  119:      * @param checks regular expression for filtered check classes\n-  120:      * @param message regular expression for messages.\n-  121:      * @param moduleId the module id\n-  122:      * @param lines CSV for lines\n-  123:      * @param columns CSV for columns\n-  124:      */\n-  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-  126:             String lines, String columns) {\n-  127:         fileRegexp \u003d files;\n-  128:         checkRegexp \u003d checks;\n-  129:         messageRegexp \u003d message;\n-  130:         this.moduleId \u003d moduleId;\n-  131:         if (lines \u003d\u003d null) {\n-  132:             linesCsv \u003d null;\n-  133:             lineFilter \u003d null;\n-  134:         }\n-  135:         else {\n+   96:             columnsCsv \u003d columns;\n+   97:             columnFilter \u003d new CsvFilterElement(columns);\n+   98:         }\n+   99:     }\n+  100: \n+  101:     /**\n+  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n+  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n+  104:      * objects and passed to the main constructor.\n+  105:      *\n+  106:      * @param files   regular expression for names of filtered files.\n+  107:      * @param checks  regular expression for filtered check classes.\n+  108:      * @param message regular expression for messages.\n+  109:      * @param modId   the id\n+  110:      * @param lines   lines CSV values and ranges for line number filtering.\n+  111:      * @param columns columns CSV values and ranges for column number filtering.\n+  112:      */\n+  113:     public SuppressFilterElement(String files, String checks,\n+  114:                                  String message, String modId, String lines, String columns) {\n+  115:         this(toPattern(files), toPattern(checks), toPattern(message),\n+  116:                 modId, lines, columns);\n+  117:     }\n+  119:     /**\n+  120:      * Converts a string into a compiled {@code Pattern}, or return {@code null}\n+  121:      * if input is {@code null}.\n+  122:      *\n+  123:      * @param regex the regular expression as a string, may be {@code null}.\n+  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n+  125:      */\n+  126:     private static Pattern toPattern(String regex) {\n+  127:         final Pattern result;\n+  128:         if (regex !\u003d null) {\n+  129:             result \u003d Pattern.compile(regex);\n+  130:         }\n+  131:         else {\n+  132:             result \u003d null;\n+  133:         }\n+  134:         return result;\n+  135:     }\n","uniqueId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2_67_113_119_135_101_117"},{"type":"Extract Method","description":"Extract Method\tprivate toPattern(regex String) : Pattern extracted from public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":101,"endLine":117,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Changes are within the Extract Method refactoring mechanics \nOverlapped refactoring - can be identical by undoing the overlapped refactoring\n Severe changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":["/**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }"],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n/**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","diffSourceCode":"    67:     /**\n-   68:      * Constructs a {@code SuppressFilterElement} for a\n-   69:      * file name pattern.\n-   70:      *\n-   71:      * @param files   regular expression for names of filtered files.\n-   72:      * @param checks  regular expression for filtered check classes.\n-   73:      * @param message regular expression for messages.\n-   74:      * @param modId   the id\n-   75:      * @param lines   lines CSV values and ranges for line number filtering.\n-   76:      * @param columns columns CSV values and ranges for column number filtering.\n-   77:      */\n-   78:     public SuppressFilterElement(String files, String checks,\n-   79:                                  String message, String modId, String lines, String columns) {\n-   80:         if (files \u003d\u003d null) {\n-   81:             fileRegexp \u003d null;\n-   82:         }\n-   83:         else {\n-   84:             fileRegexp \u003d Pattern.compile(files);\n-   85:         }\n-   86:         if (checks \u003d\u003d null) {\n-   87:             checkRegexp \u003d null;\n-   88:         }\n-   89:         else {\n-   90:             checkRegexp \u003d Pattern.compile(checks);\n-   91:         }\n-   92:         if (message \u003d\u003d null) {\n-   93:             messageRegexp \u003d null;\n+   68:      * Creates a {@code SuppressFilterElement} instance.\n+   69:      *\n+   70:      * @param files regular expression for filtered file names\n+   71:      * @param checks regular expression for filtered check classes\n+   72:      * @param message regular expression for messages.\n+   73:      * @param moduleId the module id\n+   74:      * @param lines CSV for lines\n+   75:      * @param columns CSV for columns\n+   76:      */\n+   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+   78:             String lines, String columns) {\n+   79:         fileRegexp \u003d files;\n+   80:         checkRegexp \u003d checks;\n+   81:         messageRegexp \u003d message;\n+   82:         this.moduleId \u003d moduleId;\n+   83:         if (lines \u003d\u003d null) {\n+   84:             linesCsv \u003d null;\n+   85:             lineFilter \u003d null;\n+   86:         }\n+   87:         else {\n+   88:             linesCsv \u003d lines;\n+   89:             lineFilter \u003d new CsvFilterElement(lines);\n+   90:         }\n+   91:         if (columns \u003d\u003d null) {\n+   92:             columnsCsv \u003d null;\n+   93:             columnFilter \u003d null;\n    94:         }\n    95:         else {\n-   96:             messageRegexp \u003d Pattern.compile(message);\n-   97:         }\n-   98:         moduleId \u003d modId;\n-   99:         linesCsv \u003d lines;\n-  100:         if (lines \u003d\u003d null) {\n-  101:             lineFilter \u003d null;\n-  102:         }\n-  103:         else {\n-  104:             lineFilter \u003d new CsvFilterElement(lines);\n-  105:         }\n-  106:         columnsCsv \u003d columns;\n-  107:         if (columns \u003d\u003d null) {\n-  108:             columnFilter \u003d null;\n-  109:         }\n-  110:         else {\n-  111:             columnFilter \u003d new CsvFilterElement(columns);\n-  112:         }\n-  113:     }\n-  114: \n-  115:     /**\n-  116:      * Creates a {@code SuppressFilterElement} instance.\n-  117:      *\n-  119:      * @param checks regular expression for filtered check classes\n-  120:      * @param message regular expression for messages.\n-  121:      * @param moduleId the module id\n-  122:      * @param lines CSV for lines\n-  123:      * @param columns CSV for columns\n-  124:      */\n-  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-  126:             String lines, String columns) {\n-  127:         fileRegexp \u003d files;\n-  128:         checkRegexp \u003d checks;\n-  129:         messageRegexp \u003d message;\n-  130:         this.moduleId \u003d moduleId;\n-  131:         if (lines \u003d\u003d null) {\n-  132:             linesCsv \u003d null;\n-  133:             lineFilter \u003d null;\n-  134:         }\n-  135:         else {\n+   96:             columnsCsv \u003d columns;\n+   97:             columnFilter \u003d new CsvFilterElement(columns);\n+   98:         }\n+   99:     }\n+  100: \n+  101:     /**\n+  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n+  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n+  104:      * objects and passed to the main constructor.\n+  105:      *\n+  106:      * @param files   regular expression for names of filtered files.\n+  107:      * @param checks  regular expression for filtered check classes.\n+  108:      * @param message regular expression for messages.\n+  109:      * @param modId   the id\n+  110:      * @param lines   lines CSV values and ranges for line number filtering.\n+  111:      * @param columns columns CSV values and ranges for column number filtering.\n+  112:      */\n+  113:     public SuppressFilterElement(String files, String checks,\n+  114:                                  String message, String modId, String lines, String columns) {\n+  115:         this(toPattern(files), toPattern(checks), toPattern(message),\n+  116:                 modId, lines, columns);\n+  117:     }\n+  119:     /**\n+  120:      * Converts a string into a compiled {@code Pattern}, or return {@code null}\n+  121:      * if input is {@code null}.\n+  122:      *\n+  123:      * @param regex the regular expression as a string, may be {@code null}.\n+  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n+  125:      */\n+  126:     private static Pattern toPattern(String regex) {\n+  127:         final Pattern result;\n+  128:         if (regex !\u003d null) {\n+  129:             result \u003d Pattern.compile(regex);\n+  130:         }\n+  131:         else {\n+  132:             result \u003d null;\n+  133:         }\n+  134:         return result;\n+  135:     }\n","uniqueId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2_67_113_119_135_101_117"},{"type":"Extract Method","description":"Extract Method\tprivate toPattern(regex String) : Pattern extracted from public SuppressFilterElement(files String, checks String, message String, modId String, lines String, columns String) in class com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","diffLocations":[{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":67,"endLine":113,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":101,"endLine":117,"startColumn":0,"endColumn":0},{"filePath":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","startLine":119,"endLine":135,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }","filePathBefore":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","isPureRefactoring":false,"commitId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2","packageNameBefore":"com.puppycrawl.tools.checkstyle.filters","classNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement","methodNameBefore":"com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement","classSignatureBefore":"public class SuppressFilterElement\n    implements Filter ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement#SuppressFilterElement"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.filters.SuppressFilterElement"],"classSignatureBeforeSet":["public class SuppressFilterElement\n    implements Filter "],"purityCheckResultList":[{"isPure":false,"purityComment":"Changes are within the Extract Method refactoring mechanics \nOverlapped refactoring - can be identical by undoing the overlapped refactoring\n Severe changes","description":"replacements are not justified - non-mapped leaves","mappingState":2}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Constructs a {@code SuppressFilterElement} for a\n     * file name pattern.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        if (files \u003d\u003d null) {\n            fileRegexp \u003d null;\n        }\n        else {\n            fileRegexp \u003d Pattern.compile(files);\n        }\n        if (checks \u003d\u003d null) {\n            checkRegexp \u003d null;\n        }\n        else {\n            checkRegexp \u003d Pattern.compile(checks);\n        }\n        if (message \u003d\u003d null) {\n            messageRegexp \u003d null;\n        }\n        else {\n            messageRegexp \u003d Pattern.compile(message);\n        }\n        moduleId \u003d modId;\n        linesCsv \u003d lines;\n        if (lines \u003d\u003d null) {\n            lineFilter \u003d null;\n        }\n        else {\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        columnsCsv \u003d columns;\n        if (columns \u003d\u003d null) {\n            columnFilter \u003d null;\n        }\n        else {\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","filePathAfter":"src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.filters;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.Filter;\n\n/**\n * This filter element is immutable and processes {@link AuditEvent}\n * objects based on the criteria of file, check, module id, line, and\n * column. It rejects an AuditEvent if the following match:\n * \u003cul\u003e\n *   \u003cli\u003ethe event\u0027s file name; and\u003c/li\u003e\n *   \u003cli\u003ethe check name or the module identifier; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the event\u0027s line is in the filter\u0027s line CSV; and\u003c/li\u003e\n *   \u003cli\u003e(optionally) the check\u0027s columns is in the filter\u0027s column CSV.\u003c/li\u003e\n * \u003c/ul\u003e\n *\n */\npublic class SuppressFilterElement\n    implements Filter {\n\n    /** The regexp to match file names against. */\n    private final Pattern fileRegexp;\n\n    /** The regexp to match check names against. */\n    private final Pattern checkRegexp;\n\n    /** The regexp to match message names against. */\n    private final Pattern messageRegexp;\n\n    /** Module id filter. */\n    private final String moduleId;\n\n    /** Line number filter. */\n    private final CsvFilterElement lineFilter;\n\n    /** CSV for line number filter. */\n    private final String linesCsv;\n\n    /** Column number filter. */\n    private final CsvFilterElement columnFilter;\n\n    /** CSV for column number filter. */\n    private final String columnsCsv;\n\n    /**\n     * Creates a {@code SuppressFilterElement} instance.\n     *\n     * @param files regular expression for filtered file names\n     * @param checks regular expression for filtered check classes\n     * @param message regular expression for messages.\n     * @param moduleId the module id\n     * @param lines CSV for lines\n     * @param columns CSV for columns\n     */\n    public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n            String lines, String columns) {\n        fileRegexp \u003d files;\n        checkRegexp \u003d checks;\n        messageRegexp \u003d message;\n        this.moduleId \u003d moduleId;\n        if (lines \u003d\u003d null) {\n            linesCsv \u003d null;\n            lineFilter \u003d null;\n        }\n        else {\n            linesCsv \u003d lines;\n            lineFilter \u003d new CsvFilterElement(lines);\n        }\n        if (columns \u003d\u003d null) {\n            columnsCsv \u003d null;\n            columnFilter \u003d null;\n        }\n        else {\n            columnsCsv \u003d columns;\n            columnFilter \u003d new CsvFilterElement(columns);\n        }\n    }\n\n    /**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n\n    /**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }\n\n    @Override\n    public boolean accept(AuditEvent event) {\n        return !isFileNameAndModuleNameMatching(event)\n                || !isMessageNameMatching(event)\n                || !isLineAndColumnMatching(event);\n    }\n\n    /**\n     * Is matching by file name, module id, and Check name.\n     *\n     * @param event event\n     * @return true if it is matching\n     */\n    private boolean isFileNameAndModuleNameMatching(AuditEvent event) {\n        return event.getFileName() !\u003d null\n                \u0026\u0026 (fileRegexp \u003d\u003d null || fileRegexp.matcher(event.getFileName()).find())\n                \u0026\u0026 event.getViolation() !\u003d null\n                \u0026\u0026 (moduleId \u003d\u003d null || moduleId.equals(event.getModuleId()))\n                \u0026\u0026 (checkRegexp \u003d\u003d null || checkRegexp.matcher(event.getSourceName()).find());\n    }\n\n    /**\n     * Is matching by message.\n     *\n     * @param event event\n     * @return true if it is matching or not set.\n     */\n    private boolean isMessageNameMatching(AuditEvent event) {\n        return messageRegexp \u003d\u003d null || messageRegexp.matcher(event.getMessage()).find();\n    }\n\n    /**\n     * Whether line and column match.\n     *\n     * @param event event to process.\n     * @return true if line and column are matching or not set.\n     */\n    private boolean isLineAndColumnMatching(AuditEvent event) {\n        return lineFilter \u003d\u003d null \u0026\u0026 columnFilter \u003d\u003d null\n                || lineFilter !\u003d null \u0026\u0026 lineFilter.accept(event.getLine())\n                || columnFilter !\u003d null \u0026\u0026 columnFilter.accept(event.getColumn());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getPatternSafely(fileRegexp), getPatternSafely(checkRegexp),\n                getPatternSafely(messageRegexp), moduleId, linesCsv, columnsCsv);\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this \u003d\u003d other) {\n            return true;\n        }\n        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {\n            return false;\n        }\n        final SuppressFilterElement suppressElement \u003d (SuppressFilterElement) other;\n        return Objects.equals(getPatternSafely(fileRegexp),\n                    getPatternSafely(suppressElement.fileRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(checkRegexp),\n                    getPatternSafely(suppressElement.checkRegexp))\n                \u0026\u0026 Objects.equals(getPatternSafely(messageRegexp),\n                    getPatternSafely(suppressElement.messageRegexp))\n                \u0026\u0026 Objects.equals(moduleId, suppressElement.moduleId)\n                \u0026\u0026 Objects.equals(linesCsv, suppressElement.linesCsv)\n                \u0026\u0026 Objects.equals(columnsCsv, suppressElement.columnsCsv);\n    }\n\n    /**\n     * Util method to get pattern String value from Pattern object safely, return null if\n     * pattern object is null.\n     *\n     * @param pattern pattern object\n     * @return value of pattern or null\n     */\n    private static String getPatternSafely(Pattern pattern) {\n        String result \u003d null;\n        if (pattern !\u003d null) {\n            result \u003d pattern.pattern();\n        }\n        return result;\n    }\n}\n","diffSourceCodeSet":["/**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }"],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"/**\n     * Constructs a {@code SuppressFilterElement} using regular expressions\n     * as {@code String}s. These are internally compiled into {@code Pattern}\n     * objects and passed to the main constructor.\n     *\n     * @param files   regular expression for names of filtered files.\n     * @param checks  regular expression for filtered check classes.\n     * @param message regular expression for messages.\n     * @param modId   the id\n     * @param lines   lines CSV values and ranges for line number filtering.\n     * @param columns columns CSV values and ranges for column number filtering.\n     */\n    public SuppressFilterElement(String files, String checks,\n                                 String message, String modId, String lines, String columns) {\n        this(toPattern(files), toPattern(checks), toPattern(message),\n                modId, lines, columns);\n    }\n/**\n     * Converts a string into a compiled {@code Pattern}, or return {@code null}\n     * if input is {@code null}.\n     *\n     * @param regex the regular expression as a string, may be {@code null}.\n     * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n     */\n    private static Pattern toPattern(String regex) {\n        final Pattern result;\n        if (regex !\u003d null) {\n            result \u003d Pattern.compile(regex);\n        }\n        else {\n            result \u003d null;\n        }\n        return result;\n    }","diffSourceCode":"    67:     /**\n-   68:      * Constructs a {@code SuppressFilterElement} for a\n-   69:      * file name pattern.\n-   70:      *\n-   71:      * @param files   regular expression for names of filtered files.\n-   72:      * @param checks  regular expression for filtered check classes.\n-   73:      * @param message regular expression for messages.\n-   74:      * @param modId   the id\n-   75:      * @param lines   lines CSV values and ranges for line number filtering.\n-   76:      * @param columns columns CSV values and ranges for column number filtering.\n-   77:      */\n-   78:     public SuppressFilterElement(String files, String checks,\n-   79:                                  String message, String modId, String lines, String columns) {\n-   80:         if (files \u003d\u003d null) {\n-   81:             fileRegexp \u003d null;\n-   82:         }\n-   83:         else {\n-   84:             fileRegexp \u003d Pattern.compile(files);\n-   85:         }\n-   86:         if (checks \u003d\u003d null) {\n-   87:             checkRegexp \u003d null;\n-   88:         }\n-   89:         else {\n-   90:             checkRegexp \u003d Pattern.compile(checks);\n-   91:         }\n-   92:         if (message \u003d\u003d null) {\n-   93:             messageRegexp \u003d null;\n+   68:      * Creates a {@code SuppressFilterElement} instance.\n+   69:      *\n+   70:      * @param files regular expression for filtered file names\n+   71:      * @param checks regular expression for filtered check classes\n+   72:      * @param message regular expression for messages.\n+   73:      * @param moduleId the module id\n+   74:      * @param lines CSV for lines\n+   75:      * @param columns CSV for columns\n+   76:      */\n+   77:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n+   78:             String lines, String columns) {\n+   79:         fileRegexp \u003d files;\n+   80:         checkRegexp \u003d checks;\n+   81:         messageRegexp \u003d message;\n+   82:         this.moduleId \u003d moduleId;\n+   83:         if (lines \u003d\u003d null) {\n+   84:             linesCsv \u003d null;\n+   85:             lineFilter \u003d null;\n+   86:         }\n+   87:         else {\n+   88:             linesCsv \u003d lines;\n+   89:             lineFilter \u003d new CsvFilterElement(lines);\n+   90:         }\n+   91:         if (columns \u003d\u003d null) {\n+   92:             columnsCsv \u003d null;\n+   93:             columnFilter \u003d null;\n    94:         }\n    95:         else {\n-   96:             messageRegexp \u003d Pattern.compile(message);\n-   97:         }\n-   98:         moduleId \u003d modId;\n-   99:         linesCsv \u003d lines;\n-  100:         if (lines \u003d\u003d null) {\n-  101:             lineFilter \u003d null;\n-  102:         }\n-  103:         else {\n-  104:             lineFilter \u003d new CsvFilterElement(lines);\n-  105:         }\n-  106:         columnsCsv \u003d columns;\n-  107:         if (columns \u003d\u003d null) {\n-  108:             columnFilter \u003d null;\n-  109:         }\n-  110:         else {\n-  111:             columnFilter \u003d new CsvFilterElement(columns);\n-  112:         }\n-  113:     }\n-  114: \n-  115:     /**\n-  116:      * Creates a {@code SuppressFilterElement} instance.\n-  117:      *\n-  119:      * @param checks regular expression for filtered check classes\n-  120:      * @param message regular expression for messages.\n-  121:      * @param moduleId the module id\n-  122:      * @param lines CSV for lines\n-  123:      * @param columns CSV for columns\n-  124:      */\n-  125:     public SuppressFilterElement(Pattern files, Pattern checks, Pattern message, String moduleId,\n-  126:             String lines, String columns) {\n-  127:         fileRegexp \u003d files;\n-  128:         checkRegexp \u003d checks;\n-  129:         messageRegexp \u003d message;\n-  130:         this.moduleId \u003d moduleId;\n-  131:         if (lines \u003d\u003d null) {\n-  132:             linesCsv \u003d null;\n-  133:             lineFilter \u003d null;\n-  134:         }\n-  135:         else {\n+   96:             columnsCsv \u003d columns;\n+   97:             columnFilter \u003d new CsvFilterElement(columns);\n+   98:         }\n+   99:     }\n+  100: \n+  101:     /**\n+  102:      * Constructs a {@code SuppressFilterElement} using regular expressions\n+  103:      * as {@code String}s. These are internally compiled into {@code Pattern}\n+  104:      * objects and passed to the main constructor.\n+  105:      *\n+  106:      * @param files   regular expression for names of filtered files.\n+  107:      * @param checks  regular expression for filtered check classes.\n+  108:      * @param message regular expression for messages.\n+  109:      * @param modId   the id\n+  110:      * @param lines   lines CSV values and ranges for line number filtering.\n+  111:      * @param columns columns CSV values and ranges for column number filtering.\n+  112:      */\n+  113:     public SuppressFilterElement(String files, String checks,\n+  114:                                  String message, String modId, String lines, String columns) {\n+  115:         this(toPattern(files), toPattern(checks), toPattern(message),\n+  116:                 modId, lines, columns);\n+  117:     }\n+  119:     /**\n+  120:      * Converts a string into a compiled {@code Pattern}, or return {@code null}\n+  121:      * if input is {@code null}.\n+  122:      *\n+  123:      * @param regex the regular expression as a string, may be {@code null}.\n+  124:      * @return the compiled {@code Pattern}, or {@code null} if input is {@code null}.\n+  125:      */\n+  126:     private static Pattern toPattern(String regex) {\n+  127:         final Pattern result;\n+  128:         if (regex !\u003d null) {\n+  129:             result \u003d Pattern.compile(regex);\n+  130:         }\n+  131:         else {\n+  132:             result \u003d null;\n+  133:         }\n+  134:         return result;\n+  135:     }\n","uniqueId":"98c8a4379c699f0df2d9e40d5e74e6a685ea40d2_67_113_119_135_101_117"}]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"583c718491f0cc176dc827cb14d2a23ba3a7e35b","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a6c55f6cee7b80692ab19617749d49a07c8c6789","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"fd681ee94da48ac03d6ed946bc9c582054ff95d9","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"33656c2fa42ccd1e61360106083a49bfb47d1733","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"35367fcf1374443520909aeacb3026ba6d08e994","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"7f2abda3f98b8b68a2091be646c9333af4f1494f","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"cecc6578362171070b42d89cecbde04316304f65","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"d64aac6aeac3e37d0a2509a49c83a97bc2735a0a","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"9b3bb381ea8065c8f72316dc7d86e949e172fe67","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"fbdc1d6f12067c17763b1c1feae69e26b8b818c6","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"f182e00c92408a21d2f272f01ac7cf1992265253","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"ecf60db4e34d24ecb634441534037f7427d913c0","refactoringAnalyses":[{"type":"Extract Method","description":"Extract Method\tprivate processInlineComment(warn IndentComment, actualIndent int, lineNumber int, fileName String, result List\u003cIndentComment\u003e) : void extracted from private getLinesWithWarnAndCheckComments(aFileName String, tabWidth int) : IndentComment[] in class com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest","diffLocations":[{"filePath":"src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java","startLine":61,"endLine":106,"startColumn":0,"endColumn":0},{"filePath":"src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java","startLine":61,"endLine":107,"startColumn":0,"endColumn":0},{"filePath":"src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java","startLine":132,"endLine":155,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"private static IndentComment[] getLinesWithWarnAndCheckComments(String aFileName,\n            final int tabWidth)\n                    throws IOException {\n        final List\u003cIndentComment\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(Path.of(aFileName),\n                StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                if (match.matches()) {\n                    final IndentComment warn \u003d new IndentComment(match, lineNumber);\n                    final int actualIndent \u003d getLineStart(line, tabWidth);\n\n                    if (actualIndent !\u003d warn.getIndent()) {\n                        throw new IllegalStateException(String.format(Locale.ROOT,\n                                        \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n                                                        + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                        aFileName,\n                                        lineNumber,\n                                        warn.getIndent(),\n                                        actualIndent));\n                    }\n\n                    if (!isCommentConsistent(warn)) {\n                        throw new IllegalStateException(String.format(Locale.ROOT,\n                                        \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                        aFileName,\n                                        lineNumber));\n                    }\n\n                    if (warn.isWarning()) {\n                        result.add(warn);\n                    }\n                }\n                else if (!line.isEmpty()) {\n                    throw new IllegalStateException(String.format(Locale.ROOT,\n                                    \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                    + \"malformed. Error on line: %2$d\",\n                                    aFileName,\n                                    lineNumber));\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(EMPTY_INDENT_COMMENT_ARRAY);\n    }","filePathBefore":"src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java","isPureRefactoring":true,"commitId":"ecf60db4e34d24ecb634441534037f7427d913c0","packageNameBefore":"com.puppycrawl.tools.checkstyle.checks.indentation","classNameBefore":"com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest","methodNameBefore":"com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest#getLinesWithWarnAndCheckComments","invokedMethod":"methodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest#getLineStart\n methodBody: private static int getLineStart(String line, final int tabWidth) {\nint lineStart\u003d0;\nfor(int index\u003d0; index \u003c line.length(); ++index){if(!Character.isWhitespace(line.charAt(index))){lineStart\u003dCommonUtil.lengthExpandedTabs(line,index,tabWidth);\nbreak;\n}}return lineStart;\n}\nmethodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.IndentComment#getIndent\n methodBody: public int getIndent() {\nreturn indent;\n}\nmethodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.IndentComment#isWarning\n methodBody: public boolean isWarning() {\nreturn warning;\n}\nmethodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest#isCommentConsistent\n methodBody: private static boolean isCommentConsistent(IndentComment comment) {\nfinal String[] levels\u003dcomment.getExpectedWarning().split(\", \");\nfinal int indent\u003dcomment.getIndent() + comment.getIndentOffset();\nfinal boolean result;\nif(levels.length \u003e 1){final boolean containsActualLevel\u003dArrays.asList(levels).contains(String.valueOf(indent));\nresult\u003dcontainsActualLevel !\u003d comment.isWarning();\n}{final int expectedWarning\u003dInteger.parseInt(comment.getExpectedWarning());\nfinal boolean test;\nif(comment.isExpectedNonStrict()){test\u003dindent \u003e\u003d expectedWarning;\n}{test\u003dexpectedWarning \u003d\u003d indent;\n}result\u003dtest !\u003d comment.isWarning();\n}return result;\n}","classSignatureBefore":"public class IndentationCheckTest extends AbstractModuleTestSupport ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest#getLinesWithWarnAndCheckComments"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest"],"classSignatureBeforeSet":["public class IndentationCheckTest extends AbstractModuleTestSupport "],"purityCheckResultList":[{"isPure":true,"purityComment":"Changes are within the Extract Method refactoring mechanics","description":"All the mappings are matched! - all mapped","mappingState":1}],"sourceCodeBeforeForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.checks.indentation;\n\nimport static com.google.common.truth.Truth.assertWithMessage;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_CHILD_ERROR;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_CHILD_ERROR_MULTI;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_ERROR;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_ERROR_MULTI;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\nimport com.puppycrawl.tools.checkstyle.Checker;\nimport com.puppycrawl.tools.checkstyle.DefaultConfiguration;\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.AuditListener;\nimport com.puppycrawl.tools.checkstyle.api.Configuration;\nimport com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n\n/**\n * Unit test for IndentationCheck.\n */\npublic class IndentationCheckTest extends AbstractModuleTestSupport {\n\n    private static final Pattern LINE_WITH_COMMENT_REGEX \u003d\n                    Pattern.compile(\".*?//indent:(\\\\d+)(?: ioffset:(\\\\d+))?\"\n                        + \" exp:(\u003e\u003d)?(\\\\d+(?:,\\\\d+)*?)( warn)?$\");\n\n    private static final IndentComment[] EMPTY_INDENT_COMMENT_ARRAY \u003d new IndentComment[0];\n\n    private static IndentComment[] getLinesWithWarnAndCheckComments(String aFileName,\n            final int tabWidth)\n                    throws IOException {\n        final List\u003cIndentComment\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(Path.of(aFileName),\n                StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n                final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                if (match.matches()) {\n                    final IndentComment warn \u003d new IndentComment(match, lineNumber);\n                    final int actualIndent \u003d getLineStart(line, tabWidth);\n\n                    if (actualIndent !\u003d warn.getIndent()) {\n                        throw new IllegalStateException(String.format(Locale.ROOT,\n                                        \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n                                                        + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                                        aFileName,\n                                        lineNumber,\n                                        warn.getIndent(),\n                                        actualIndent));\n                    }\n\n                    if (!isCommentConsistent(warn)) {\n                        throw new IllegalStateException(String.format(Locale.ROOT,\n                                        \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                                        aFileName,\n                                        lineNumber));\n                    }\n\n                    if (warn.isWarning()) {\n                        result.add(warn);\n                    }\n                }\n                else if (!line.isEmpty()) {\n                    throw new IllegalStateException(String.format(Locale.ROOT,\n                                    \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                                    + \"malformed. Error on line: %2$d\",\n                                    aFileName,\n                                    lineNumber));\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(EMPTY_INDENT_COMMENT_ARRAY);\n    }\n\n    private static boolean isCommentConsistent(IndentComment comment) {\n        final String[] levels \u003d comment.getExpectedWarning().split(\", \");\n        final int indent \u003d comment.getIndent() + comment.getIndentOffset();\n        final boolean result;\n        if (levels.length \u003e 1) {\n            // multi\n            final boolean containsActualLevel \u003d\n                            Arrays.asList(levels).contains(String.valueOf(indent));\n\n            result \u003d containsActualLevel !\u003d comment.isWarning();\n        }\n        else {\n            final int expectedWarning \u003d Integer.parseInt(comment.getExpectedWarning());\n\n            final boolean test;\n            if (comment.isExpectedNonStrict()) {\n                // non-strict\n                test \u003d indent \u003e\u003d expectedWarning;\n            }\n            else {\n                // single\n                test \u003d expectedWarning \u003d\u003d indent;\n            }\n            result \u003d test !\u003d comment.isWarning();\n\n        }\n        return result;\n    }\n\n    private static int getLineStart(String line, final int tabWidth) {\n        int lineStart \u003d 0;\n        for (int index \u003d 0; index \u003c line.length(); ++index) {\n            if (!Character.isWhitespace(line.charAt(index))) {\n                lineStart \u003d CommonUtil.lengthExpandedTabs(line, index, tabWidth);\n                break;\n            }\n        }\n        return lineStart;\n    }\n\n    private void verifyWarns(Configuration config, String filePath,\n                    String... expected)\n                    throws Exception {\n        final int tabWidth \u003d Integer.parseInt(config.getProperty(\"tabWidth\"));\n        final IndentComment[] linesWithWarn \u003d\n                        getLinesWithWarnAndCheckComments(filePath, tabWidth);\n        verify(config, filePath, expected, linesWithWarn);\n        assertWithMessage(\"Expected warning count in UT does not match warn comment count \"\n                + \"in input file\")\n            .that(expected.length)\n            .isEqualTo(linesWithWarn.length);\n    }\n\n    private void verify(Configuration config, String filePath, String[] expected,\n            final IndentComment... linesWithWarn) throws Exception {\n        final Checker checker \u003d createChecker(config);\n        checker.addListener(new IndentAudit(linesWithWarn));\n        verify(checker, filePath, expected);\n    }\n\n    @Override\n    protected String getPackageLocation() {\n        return \"com/puppycrawl/tools/checkstyle/checks/indentation/indentation\";\n    }\n\n    @Test\n    public void testGetRequiredTokens() {\n        final IndentationCheck checkObj \u003d new IndentationCheck();\n        final int[] requiredTokens \u003d checkObj.getRequiredTokens();\n        final HandlerFactory handlerFactory \u003d new HandlerFactory();\n        final int[] expected \u003d handlerFactory.getHandledTypes();\n        Arrays.sort(expected);\n        Arrays.sort(requiredTokens);\n        assertWithMessage(\"Default required tokens are invalid\")\n            .that(requiredTokens)\n            .isEqualTo(expected);\n    }\n\n    @Test\n    public void testGetAcceptableTokens() {\n        final IndentationCheck checkObj \u003d new IndentationCheck();\n        final int[] acceptableTokens \u003d checkObj.getAcceptableTokens();\n        final HandlerFactory handlerFactory \u003d new HandlerFactory();\n        final int[] expected \u003d handlerFactory.getHandledTypes();\n        Arrays.sort(expected);\n        Arrays.sort(acceptableTokens);\n        assertWithMessage(\"Default acceptable tokens are invalid\")\n            .that(acceptableTokens)\n            .isEqualTo(expected);\n    }\n\n    @Test\n    public void testThrowsIndentProperty() {\n        final IndentationCheck indentationCheck \u003d new IndentationCheck();\n\n        indentationCheck.setThrowsIndent(1);\n\n        assertWithMessage(\"Invalid throws indent\")\n            .that(indentationCheck.getThrowsIndent())\n            .isEqualTo(1);\n    }\n\n    @Test\n    public void testStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"10:29: \" + getCheckMessage(MSG_ERROR_MULTI, \"method def rcurly\", 28, \"16, 20, 24\"),\n            \"13:9: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 8, 4),\n            \"14:5: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 4, 0),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationStrictCondition.java\"), expected);\n    }\n\n    @Test\n    public void forbidOldStyle() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"20:30: \" + getCheckMessage(MSG_ERROR, \"int\", 29, 12),\n            \"21:30: \" + getCheckMessage(MSG_ERROR, \"int\", 29, 12),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationMethodCStyle.java\"), expected);\n    }\n\n    @Test\n    public void testZeroCaseLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationZeroCaseLevel.java\"), expected);\n    }\n\n    @Test\n    public void testAndroidStyle() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"42:4: \" + getCheckMessage(MSG_ERROR, \"extends\", 3, 8),\n            \"44:4: \" + getCheckMessage(MSG_ERROR, \"member def type\", 3, 4),\n            \"47:9: \" + getCheckMessage(MSG_ERROR, \"foo\", 8, 12),\n            \"50:9: \" + getCheckMessage(MSG_ERROR, \"int\", 8, 12),\n            \"53:14: \" + getCheckMessage(MSG_ERROR, \"true\", 13, 16),\n            \"56:17: \" + getCheckMessage(MSG_ERROR, \"+\", 16, 20),\n            \"57:9: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 12),\n            \"60:12: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 11, 12),\n            \"62:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 7, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationAndroidStyle.java\"), expected);\n    }\n\n    @Test\n    public void testMethodCallLineWrap() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"53:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 18, 20),\n            \"54:15: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 14, 16),\n            \"75:13: \" + getCheckMessage(MSG_ERROR, \"lambda arguments\", 12, 16),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationMethodCallLineWrap.java\"), expected);\n    }\n\n    @Test\n    public void testDifficultAnnotations() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"40:1: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 0, \"4, 23, 25\"),\n            \"41:1: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 0, \"4, 23, 25\"),\n            \"50:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 6, \"8, 27, 29\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationDifficultAnnotations.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationClosingParenthesisEndsInSameIndentationAsOpening() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d {\n            \"34:17: \" + getCheckMessage(MSG_ERROR, \")\", 16, 0),\n            \"36:17: \" + getCheckMessage(MSG_ERROR, \")\", 16, 0),\n            \"40:9: \" + getCheckMessage(MSG_ERROR, \")\", 8, 4),\n            \"42:9: \" + getCheckMessage(MSG_ERROR, \")\", 8, 4),\n            \"46:9: \" + getCheckMessage(MSG_ERROR, \")\", 8, 4),\n        };\n\n        verifyWarns(checkConfig,\n            getPath(\"InputIndentation\"\n                + \"AnnotationClosingParenthesisEndsInSameIndentationAsOpening.java\"),\n                expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava1.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava2.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava3.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava4.java\"), expected);\n    }\n\n    @Test\n    public void testCorrectIfAndParameters() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"65:11: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 10, \"12, 14\"),\n            \"72:13: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 12, \"14, 16\"),\n            \"94:13: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 12, \"14, 16\"),\n            \"101:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 14, \"16, 18\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCorrectIfAndParameter.java\"), expected);\n    }\n\n    @Test\n    public void testCorrectIfAndParameters1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"38:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 8, \"10, 12\"),\n            \"45:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 8, \"10, 12\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCorrectIfAndParameter1.java\"), expected);\n    }\n\n    @Test\n    public void testAnonymousClasses() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnonymousClasses.java\"), expected);\n    }\n\n    @Test\n    public void testArrays() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationArrays.java\"), expected);\n    }\n\n    @Test\n    public void testLabels() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLabels.java\"), expected);\n    }\n\n    @Test\n    public void testLabels1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLabels1.java\"), expected);\n    }\n\n    @Test\n    public void testClassesAndMethods() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationClassesMethods.java\"), expected);\n    }\n\n    @Test\n    public void testCtorCall() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"28:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"29:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 6),\n            \"30:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 6),\n            \"34:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"35:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 6),\n            \"39:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"40:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"41:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"45:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"46:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"50:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"51:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"52:5: \" + getCheckMessage(MSG_ERROR, \"x\", 4, 8),\n            \"56:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"57:5: \" + getCheckMessage(MSG_ERROR, \"method call lparen\", 4, 6),\n            \"62:5: \" + getCheckMessage(MSG_ERROR, \".\", 4, 10),\n            \"63:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"68:5: \" + getCheckMessage(MSG_ERROR, \"super\", 4, 10),\n            \"69:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"75:11: \" + getCheckMessage(MSG_ERROR_MULTI, \"lambda arguments\", 10, \"12, 14\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCtorCall.java\"), expected);\n    }\n\n    @Test\n    public void testCtorCall1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationCtorCall1.java\"), expected);\n    }\n\n    @Test\n    public void testMembers() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"22:6: \" + getCheckMessage(MSG_ERROR, \"\u003d\", 5, 6),\n            \"57:4: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 3, 2),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationMembers.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInit() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"6\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n\n            \"17:1: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\", 0,\n                \"4, 6, 34, 36\"),\n            \"22:14: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                    13, \"4, 6, 34, 36\"),\n            \"23:3: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 2, \"0, 4\"),\n            \"35:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\", 6,\n                \"8, 10, 31, 33\"),\n            \"36:3: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 2, \"4, 8\"),\n\n            \"52:6: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 5, \"6, 8, 10\"),\n            \"54:6: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 5, \"2, 6\"),\n        };\n        final String fileName \u003d getPath(\"InputIndentationAnnArrInit.java\");\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitTwo() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"0\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"0\");\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n\n            \"17:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"annotation array initialization\", 4, \"0, 33, 35\"),\n            \"30:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"annotation array initialization\", 8, \"4, 29, 31\"),\n            \"32:3: \" + getCheckMessage(MSG_ERROR,\n                \"annotation array initialization rcurly\", 2, 4),\n            \"47:7: \" + getCheckMessage(MSG_ERROR,\n                \"annotation array initialization lcurly\", 6, 2),\n            \"49:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"annotation array initialization\", 4, \"2, 6, 8\"),\n        };\n        final String fileName \u003d getPath(\"InputIndentationAnnArrInit2.java\");\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitWithEmoji() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"0\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"0\");\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"17:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 4, \"0, 41, 43\"),\n            \"30:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 8, \"4, 29, 31\"),\n            \"32:3: \" + getCheckMessage(MSG_ERROR,\n                    \"annotation array initialization rcurly\", 2, 4),\n            \"42:7: \" + getCheckMessage(MSG_ERROR,\n                    \"member def type\", 6, \"4\"),\n            \"47:7: \" + getCheckMessage(MSG_ERROR,\n                    \"annotation array initialization lcurly\", 6, \"2\"),\n            \"48:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 10, \"2, 6, 8\"),\n            \"49:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 12, \"2, 6, 8\"),\n            \"50:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 20, \"2, 6, 8\"),\n            \"52:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 4, \"2, 6, 8\"),\n        };\n        final String fileName \u003d getPath(\"InputIndentationAnnArrInitWithEmoji.java\");\n        verifyWarns(checkConfig, fileName, expected);\n\n    }\n\n    @Test\n    public void testOddAnnotations()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"3\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"9\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationOddLineWrappingAndArrayInit.java\");\n        final String[] expected \u003d {\n            \"25:17: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                    16, \"11, 17, 47, 54\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationOddStyles() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n\n        final String fileName \u003d getPath(\"InputIndentationAnnotationArrayInitOldStyle.java\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testZeroAnnotationArrayInit()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"0\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationZeroArrayInit.java\");\n\n        final String[] expected \u003d {\n            \"22:12: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                    11, \"8, 12, 35, 37\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitGoodCase()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationAnnotationArrayInitGood.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitGoodCaseTwo()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationAnnotationArrayInitGood.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidLabel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"24:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 10, \"8, 12\"),\n            \"33:3: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 2, \"4, 8\"),\n            \"36:19: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 18, \"8, 12\"),\n            \"37:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 18, 8),\n            \"39:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 6, \"8, 12\"),\n            \"41:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 6, \"8, 12\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidLabelIndent.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidLabelWithWhileLoop() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"18:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 9, \"4, 8\"),\n            \"19:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 9, \"8, 12\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidLabelWithWhileLoopIndent.java\"),\n            expected);\n    }\n\n    @Test\n    public void testValidLabel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationValidLabelIndent.java\"), expected);\n    }\n\n    @Test\n    public void testValidIfWithChecker() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidIfIndent.java\");\n        final String[] expected \u003d {\n            \"95:9: \" + getCheckMessage(MSG_ERROR, \"(\", 8, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidIfWithChecker1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidIfIndent1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidIfWithChecker2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidIfIndent2.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidDotWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidDotIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidMethodWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidMethodIndent.java\");\n        final String[] expected \u003d {\n            \"76:5: \" + getCheckMessage(MSG_ERROR, \"void\", 4, 8),\n            \"77:5: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidMethodWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidMethodIndent1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidMethodWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidMethodIndent1.java\");\n        final String[] expected \u003d {\n            \"23:7: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),\n            \"26:7: \" + getCheckMessage(MSG_ERROR, \"ctor def modifier\", 6, 4),\n            \"27:3: \" + getCheckMessage(MSG_ERROR, \"ctor def lcurly\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),\n            \"31:3: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),\n            \"32:7: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 6, 4),\n            \"69:6: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 5, 4),\n            \"70:6: \" + getCheckMessage(MSG_ERROR, \"final\", 5, 9),\n            \"71:6: \" + getCheckMessage(MSG_ERROR, \"void\", 5, 9),\n            \"72:5: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 9),\n            \"86:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"89:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"99:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidMethodWithChecker2()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidMethodIndent2.java\");\n        final String[] expected \u003d {\n            \"23:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 8),\n            \"26:4: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 3, 4),\n            \"27:4: \" + getCheckMessage(MSG_ERROR, \"final\", 3, 7),\n            \"28:4: \" + getCheckMessage(MSG_ERROR, \"void\", 3, 7),\n            \"29:6: \" + getCheckMessage(MSG_ERROR, \"method6\", 5, 7),\n            \"39:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 6, 8),\n            \"40:7: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),\n            \"41:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"42:7: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 6, 8),\n            \"45:11: \" + getCheckMessage(MSG_ERROR, \"Arrays\", 10, 12),\n            \"51:15: \" + getCheckMessage(MSG_ERROR, \"new\", 14, 16),\n            \"54:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"59:15: \" + getCheckMessage(MSG_ERROR, \"new\", 14, 16),\n            \"63:11: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),\n            \"67:11: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),\n            \"68:7: \" + getCheckMessage(MSG_ERROR, \")\", 6, 8),\n            \"72:7: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),\n            \"86:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),\n            \"91:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),\n            \"95:1: \" + getCheckMessage(MSG_ERROR, \"int\", 0, 8),\n            \"96:5: \" + getCheckMessage(MSG_ERROR, \"method9\", 4, 8),\n            \"106:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAlternativeGoogleStyleSwitchCaseAndEnums()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationSwitchCasesAndEnums.java\");\n        final String[] expected \u003d {\n            \"18:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 4),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"38:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 8),\n            \"54:5: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 4, 2),\n            \"55:3: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 2, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidSwitchWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidSwitchIndent.java\");\n        final String[] expected \u003d {\n            \"30:7: \" + getCheckMessage(MSG_ERROR, \"switch\", 6, 8),\n            \"32:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 12),\n            \"33:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"37:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"39:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 14, 12),\n            \"40:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 12),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 12),\n            \"44:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"45:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"53:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"54:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 18, 16),\n            \"55:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n            \"59:11: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),\n            \"62:15: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 14, 12),\n            \"66:15: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 14, 12),\n            \"69:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n            \"76:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 14, 16),\n            \"81:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 14, 16),\n            \"89:7: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 6, 8),\n            \"92:7: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 6, 8),\n            \"93:11: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 10, 8),\n            \"95:11: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 10, 8),\n            \"96:7: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 6, 8),\n            \"99:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"100:13: \" + getCheckMessage(MSG_ERROR, \"if\", 12, 16),\n            \"101:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 16, 20),\n            \"102:13: \" + getCheckMessage(MSG_ERROR, \"else\", 12, 16),\n            \"103:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 16, 20),\n            \"106:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 4, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIfElseWithNoCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationIfElseWithNoCurly.java\");\n        final String[] expected \u003d {\n            \"20:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"25:5: \" + getCheckMessage(MSG_ERROR, \"if\", 4, 8),\n            \"26:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"37:13: \" + getCheckMessage(MSG_ERROR, \"else\", 12, 8),\n            \"39:9: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 12),\n            \"43:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testWhileWithNoCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationWhileNoCurly.java\");\n        final String[] expected \u003d {\n            \"21:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 0, 12),\n            \"26:5: \" + getCheckMessage(MSG_ERROR, \"while\", 4, 8),\n            \"27:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 8, 12),\n            \"32:9: \" + getCheckMessage(MSG_ERROR, \"while\", 8, 12),\n            \"36:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 8, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testForWithNoCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationForWithoutCurly.java\");\n        final String[] expected \u003d {\n            \"21:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n            \"26:5: \" + getCheckMessage(MSG_ERROR, \"for\", 4, 8),\n            \"27:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 12),\n            \"32:9: \" + getCheckMessage(MSG_ERROR, \"for\", 8, 12),\n            \"33:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 16),\n            \"37:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 16),\n\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testDoWhileWithoutCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationDoWhile.java\");\n        final String[] expected \u003d {\n            \"23:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"do..while\", 8, 12),\n            \"30:5: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 4, 8),\n            \"33:13: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 12, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidSwitchWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidSwitchIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testNewKeyword() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationNew.java\"), expected);\n    }\n\n    @Test\n    public void testNewKeyword2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationNew.java\"), expected);\n    }\n\n    // we can not use verifyWarns() due to usage of multi line string syntax in input\n    @Test\n    public void testTextBlockLiteral() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"18:1: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 0, 8),\n            \"28:17: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 16, 12),\n            \"44:1: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 0, 12),\n            \"50:1: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 0, 12),\n            \"55:9: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 8, 12),\n            \"73:15: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 14, 12),\n        };\n        verify(checkConfig, getNonCompilablePath(\"InputIndentationTextBlock.java\"),\n            expected);\n    }\n\n    @Test\n    public void testValidNewKeywordWithForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationNew.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidNewKeywordWithForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"21:12: \" + getCheckMessage(MSG_ERROR, \"]\", 11, 12),\n            \"25:5: \" + getCheckMessage(MSG_ERROR, \"[\", 4, 12),\n            \"32:17: \" + getCheckMessage(MSG_ERROR, \"new\", 16, 24),\n            \"33:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"object def\", 20, \"28, 32, 36\"),\n            \"34:17: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 16, \"24, 28, 32\"),\n            \"37:36: \" + getCheckMessage(MSG_ERROR, \"+\", 35, 16),\n            \"41:35: \" + getCheckMessage(MSG_ERROR, \"]\", 34, 16),\n            \"45:36: \" + getCheckMessage(MSG_ERROR, \"42\", 35, 16),\n            \"49:36: \" + getCheckMessage(MSG_ERROR, \"+\", 35, 16),\n            \"50:36: \" + getCheckMessage(MSG_ERROR, \"+\", 35, 16),\n            \"55:21: \" + getCheckMessage(MSG_ERROR, \"1\", 20, 16),\n            \"59:13: \" + getCheckMessage(MSG_ERROR, \"fun2\", 12, 16),\n            \"78:11: \" + getCheckMessage(MSG_ERROR, \"Object\", 10, 12),\n            \"82:16: \" + getCheckMessage(MSG_ERROR, \"]\", 15, 12),\n        };\n        verifyWarns(checkConfig,\n            getPath(\"InputIndentationNewWithForceStrictCondition.java\"), expected);\n    }\n\n    @Test\n    public void testValidArrayInitDefaultIndentWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitDefaultIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidArrayInitWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"8\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidArrayInitTwoDimensional() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitIndentTwoDimensional.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitTwoDimensional() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d\n            getPath(\"InputIndentationInvalidArrayInitIndentTwoDimensional.java\");\n        final String[] expected \u003d {\n            \"18:5: \" + getCheckMessage(MSG_ERROR_MULTI,\n                \"array initialization lcurly\", 4, \"6, 8, 18, 20, 24\"),\n            \"23:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"array initialization\", 9, \"8, 10, 12, 20, 22, 24\"),\n            \"26:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"array initialization\", 6, \"8, 10, 12, 20, 22, 24\"),\n            \"28:5: \" + getCheckMessage(MSG_ERROR_MULTI,\n                \"array initialization lcurly\", 4, \"6, 8, 18, 20, 24\"),\n            \"30:5: \" + getCheckMessage(MSG_ERROR_MULTI,\n                \"array initialization rcurly\", 4, \"6, 8, 18, 20, 24\"),\n\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidArrayInit()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitIndentTwo.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testArrayInitWithEmoji() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationArrayInitIndentWithEmoji.java\");\n        final String[] expected \u003d {\n            \"19:6: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n               5, \"4, 6, 52, 54\"),\n            \"24:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n               8, \"4, 6, 35, 37\"),\n            \"25:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n               10, \"4, 6, 35, 37\"),\n            \"30:11: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\",\n               10, \"4, 6, 19, 21, 25\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testYieldKeywordWithForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"15:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 12, 16),\n            \"16:13: \" + getCheckMessage(MSG_ERROR, \"yield\", 12, 16),\n            \"44:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 12, 16),\n            \"45:13: \" + getCheckMessage(MSG_ERROR, \"yield\", 12, 16),\n            \"50:5: \" + getCheckMessage(MSG_ERROR, \"yield\", 4, 16),\n            \"71:15: \" + getCheckMessage(MSG_ERROR, \"yield\", 14, 16),\n            \"74:20: \" + getCheckMessage(MSG_ERROR, \"yield\", 19, 16),\n            \"77:9: \" + getCheckMessage(MSG_ERROR, \"yield\", 8, 16),\n        };\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationYieldForceStrict.java\"), expected);\n    }\n\n    @Test\n    public void testChainedMethodCalling() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationChainedMethodCalls.java\");\n        final String[] expected \u003d {\n            \"32:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"37:5: \" + getCheckMessage(MSG_ERROR, \".\", 4, 8),\n            \"38:5: \" + getCheckMessage(MSG_ERROR, \".\", 4, 8),\n            \"41:5: \" + getCheckMessage(MSG_ERROR, \"new\", 4, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithTrueStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent.java\");\n        final String[] expected \u003d {\n            \"21:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"22:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"24:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"29:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 8,\n                \"10, 34, 36\"),\n            \"30:5: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 4, \"6, 10\"),\n            \"33:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"34:8: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 7,\n                \"8, 31, 33\"),\n            \"35:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"40:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"44:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"4, 8\"),\n            \"48:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"52:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 20,\n                \"8, 31, 33\"),\n            \"53:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                4, \"8, 31, 33\"),\n            \"58:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 31, 33\"),\n            \"63:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"65:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"66:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 2, \"6, 10\"),\n            \"69:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 36, 38\"),\n            \"76:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                10, \"12, 24, 26\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithTrueStrictCondition1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent1.java\");\n        final String[] expected \u003d {\n            \"28:9: \" + getCheckMessage(MSG_ERROR, \"1\", 8, 12),\n            \"39:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 30, 32\"),\n            \"40:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 30, 32\"),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 31, 32\"),\n            \"44:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 31, 32\"),\n            \"45:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            \"48:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 6, \"8, 12\"),\n            \"49:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"8, 10, 12\"),\n            \"51:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            // following are tests for annotation array initialization\n            \"59:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"67:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"68:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"70:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 29, 31\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithFalseStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent.java\");\n        final String[] expected \u003d {\n            \"21:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"22:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"24:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"29:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 8,\n                \"10, 34, 36\"),\n            \"30:5: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 4, \"6, 10\"),\n            \"33:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"34:8: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 7,\n                \"8, 31, 33\"),\n            \"35:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"40:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"44:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"4, 8\"),\n            \"48:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"52:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 20,\n                \"8, 31, 33\"),\n            \"53:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                4, \"8, 31, 33\"),\n            \"58:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 31, 33\"),\n            \"63:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"65:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"66:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 2, \"6, 10\"),\n            \"69:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 36, 38\"),\n            \"76:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                10, \"12, 24, 26\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithFalseStrictCondition1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent1.java\");\n        final String[] expected \u003d {\n            \"28:9: \" + getCheckMessage(MSG_ERROR, \"1\", 8, 12),\n            \"39:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 30, 32\"),\n            \"40:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 30, 32\"),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 31, 32\"),\n            \"44:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 31, 32\"),\n            \"45:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            \"48:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 6, \"8, 12\"),\n            \"49:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"8, 10, 12\"),\n            \"51:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            // following are tests for annotation array initialization\n            \"59:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"67:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"68:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"70:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 29, 31\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    // Test Input without trailing comment and usage of \u0027verify\u0027 method is due to #16906\n    @Test\n    public void testInvalidArrayInitIndentNoCommentsTrueStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\n            \"InputIndentationInvalidArrayInitIndentWithoutTrailingComments.java\");\n        final String[] expected \u003d {\n            \"28:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"32:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"12, 16\"),\n            \"36:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"37:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"39:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"annotation array initialization\",\n                12, 16),\n        };\n        verify(checkConfig, fileName, expected);\n    }\n\n    // Test Input without trailing comment and usage of \u0027verify\u0027 method is due to #16906\n    @Test\n    public void testInvalidArrayInitIndentNoCommentsFalseStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\n            \"InputIndentationInvalidArrayInitIndentWithoutTrailingComments.java\");\n        final String[] expected \u003d {\n            \"28:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"32:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"12, 16\"),\n            \"36:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"37:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"39:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"annotation array initialization\",\n                12, 16),\n        };\n        verify(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidTryWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidTryIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidTryWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidTryIndent.java\");\n        final String[] expected \u003d {\n            \"25:10: \" + getCheckMessage(MSG_ERROR, \"try\", 9, 8),\n            \"26:8: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 7, 8),\n            \"28:8: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 7, 8),\n            \"30:5: \" + getCheckMessage(MSG_ERROR, \"try\", 4, 8),\n            \"31:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 8, 12),\n            \"32:5: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 4, 8),\n            \"33:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"finally\", 8, 12),\n            \"38:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 8, 12),\n            \"43:11: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 10, 8),\n            \"45:7: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 6, 8),\n            \"52:6: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 5, 8),\n            \"59:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 10, 12),\n            \"60:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 14, 12),\n            \"61:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 10, 12),\n            \"63:7: \" + getCheckMessage(MSG_ERROR, \"catch\", 6, 8),\n            \"70:11: \" + getCheckMessage(MSG_ERROR, \"try lcurly\", 10, 8),\n            \"72:11: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 10, 8),\n            \"74:7: \" + getCheckMessage(MSG_ERROR, \"catch lcurly\", 6, 8),\n            \"77:11: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 10, 8),\n            \"80:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 10, 12),\n            \"86:1: \" + getCheckMessage(MSG_ERROR, \"try\", 0, 8),\n            \"87:1: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 0, 8),\n            \"88:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 0, 12),\n            \"89:1: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 0, 8),\n            \"91:1: \" + getCheckMessage(MSG_ERROR, \"try\", 0, 8),\n            \"92:1: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 0, 8),\n            \"93:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 0, 12),\n            \"94:1: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 0, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidClassDefWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidClassDefIndent.java\");\n        final String[] expected \u003d {\n            \"18:3: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),\n            \"24:3: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),\n            \"27:3: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),\n            \"30:9: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 0),\n            \"34:3: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),\n            \"39:3: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),\n            \"40:3: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),\n            \"46:3: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),\n            \"54:3: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),\n            \"55:3: \" + getCheckMessage(MSG_ERROR, \"java\", 2, 4),\n            \"60:3: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),\n            \"61:3: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),\n            \"69:3: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),\n            \"73:3: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),\n            \"79:1: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidClassDefWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidClassDefIndent1.java\");\n        final String[] expected \u003d {\n            \"22:3: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),\n            \"27:9: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),\n            \"29:13: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),\n            \"31:9: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),\n            \"34:7: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),\n            \"40:11: \" + getCheckMessage(MSG_ERROR, \"int\", 10, 12),\n            \"44:7: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),\n            \"49:7: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 6, 4),\n            \"51:13: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),\n            \"56:13: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 8),\n            \"59:17: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 10, 8),\n            \"61:11: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 10, 8),\n            \"64:11: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),\n            \"69:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 10, 8),\n            \"70:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 8, \"10, 14\"),\n            \"74:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 8, \"10, 14\"),\n            \"77:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 6, \"8, 12\"),\n            \"81:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 6, \"8, 12\"),\n            \"85:11: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 10, 12),\n            \"87:11: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 10, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidBlockWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidBlockIndent.java\");\n        final String[] expected \u003d {\n            \"26:8: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 7, 8),\n            \"27:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"29:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"30:8: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 7, 8),\n            \"32:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"34:7: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"38:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"39:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),\n            \"41:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),\n            \"42:10: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 9, 8),\n            \"45:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"46:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"48:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"49:7: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),\n            \"52:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"55:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"59:11: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),\n            \"63:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n            \"68:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"70:11: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),\n            \"71:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"86:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidBlockWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidBlockIndent1.java\");\n        final String[] expected \u003d {\n            \"27:3: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),\n            \"32:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 7, 8),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),\n            \"37:3: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),\n            \"39:3: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),\n            \"41:7: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),\n            \"43:3: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),\n            \"45:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),\n            \"48:3: \" + getCheckMessage(MSG_ERROR, \"static initialization lcurly\", 2, 4),\n            \"49:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),\n            \"50:7: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),\n            \"55:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),\n            \"60:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 4, 8),\n            \"61:3: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),\n            \"66:7: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),\n            \"69:3: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 2, 4),\n            \"70:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),\n            \"73:3: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 2, 4),\n            \"75:7: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 4),\n            \"77:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),\n            \"79:3: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 2, 4),\n            \"82:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidIfWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidIfIndent.java\");\n        final String[] expected \u003d {\n            \"55:2: \" + getCheckMessage(MSG_ERROR, \"if\", 1, 8),\n            \"60:10: \" + getCheckMessage(MSG_ERROR, \"if\", 9, 8),\n            \"61:10: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 9, 8),\n            \"62:8: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 7, 8),\n            \"64:7: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),\n            \"65:6: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 5, 8),\n            \"66:6: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 5, 8),\n            \"70:11: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 10, 8),\n            \"71:8: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 7, 8),\n            \"74:10: \" + getCheckMessage(MSG_ERROR, \"if\", 9, 8),\n\n            \"75:8: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 7, 8),\n            \"77:10: \" + getCheckMessage(MSG_ERROR, \"else\", 9, 8),\n            \"79:10: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 9, 8),\n            \"82:11: \" + getCheckMessage(MSG_ERROR, \"if\", 10, 8),\n            \"83:8: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 7, 8),\n            \"84:10: \" + getCheckMessage(MSG_ERROR, \"else\", 9, 8),\n            \"85:8: \" + getCheckMessage(MSG_ERROR, \"else lcurly\", 7, 8),\n            \"86:10: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 9, 8),\n\n            \"90:10: \" + getCheckMessage(MSG_ERROR, \"if\", 9, 8),\n            \"91:10: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 9, 8),\n            \"92:10: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 9, 8),\n            \"93:8: \" + getCheckMessage(MSG_ERROR, \"else lcurly\", 7, 8),\n            \"94:11: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 10, 8),\n            \"97:7: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),\n            \"98:11: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 10, 8),\n            \"99:11: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 10, 8),\n            \"100:8: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 7, 8),\n            \"103:6: \" + getCheckMessage(MSG_ERROR, \"if\", 5, 8),\n            \"104:12: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 11, 8),\n            \"105:6: \" + getCheckMessage(MSG_ERROR, \"else\", 5, 8),\n            \"106:12: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 11, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidIfWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidIfIndent1.java\");\n        final String[] expected \u003d {\n            \"37:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n            \"42:11: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 10, 8),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"48:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n            \"49:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"51:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 10, 12),\n            \"52:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 8, 12),\n\n            \"59:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 16, 12),\n            \"60:10: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 9, 8),\n            \"63:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 16, 12),\n            \"69:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"73:41: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 40, 12),\n            \"80:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n\n            \"83:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 14, 12),\n            \"89:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"91:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 10, 12),\n            \"95:11: \" + getCheckMessage(MSG_ERROR, \"if\", 10, 8),\n            \"96:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n            \"97:11: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 10, 8),\n            \"98:11: \" + getCheckMessage(MSG_ERROR, \"else\", 10, 8),\n            \"99:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 14, 12),\n            \"100:11: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 10, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidIfWithChecker2()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidIfIndent2.java\");\n        final String[] expected \u003d {\n            \"26:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 9, 12),\n            \"27:12: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 11, 12),\n            \"31:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"34:8: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 7, 8),\n            \"41:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n\n            \"50:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"59:11: \" + getCheckMessage(MSG_ERROR, \"if\", 10, 12),\n            \"63:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 18, 20),\n            \"74:11: \" + getCheckMessage(MSG_ERROR, \"if rparen\", 10, 8),\n            \"79:7: \" + getCheckMessage(MSG_ERROR, \"if rparen\", 6, 8),\n            \"85:7: \" + getCheckMessage(MSG_ERROR, \"if lparen\", 6, 8),\n            \"87:7: \" + getCheckMessage(MSG_ERROR, \"if rparen\", 6, 8),\n            \"90:1: \" + getCheckMessage(MSG_ERROR, \"if\", 0, 8),\n            \"91:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"92:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"93:1: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 0, 8),\n            \"94:1: \" + getCheckMessage(MSG_ERROR, \"if\", 0, 8),\n            \"95:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"96:1: \" + getCheckMessage(MSG_ERROR, \"else\", 0, 8),\n            \"97:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 0, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidWhileIndent.java\");\n        final String[] expected \u003d {\n            \"25:10: \" + getCheckMessage(MSG_ERROR, \"while\", 9, 8),\n            \"26:8: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 7, 8),\n            \"28:8: \" + getCheckMessage(MSG_ERROR, \"while\", 7, 8),\n            \"29:10: \" + getCheckMessage(MSG_ERROR, \"while lcurly\", 9, 8),\n            \"30:10: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 9, 8),\n\n            \"32:10: \" + getCheckMessage(MSG_ERROR, \"while\", 9, 8),\n            \"33:7: \" + getCheckMessage(MSG_ERROR, \"while lcurly\", 6, 8),\n            \"34:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 14, 12),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 6, 8),\n\n            \"37:11: \" + getCheckMessage(MSG_ERROR, \"while\", 10, 8),\n            \"39:11: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 10, 8),\n            \"41:11: \" + getCheckMessage(MSG_ERROR, \"while\", 10, 8),\n            \"44:11: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 10, 8),\n\n            \"46:7: \" + getCheckMessage(MSG_ERROR, \"while\", 6, 8),\n            \"47:11: \" + getCheckMessage(MSG_ERROR, \"while lcurly\", 10, 8),\n            \"50:7: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 6, 8),\n            \"53:15: \" + getCheckMessage(MSG_ERROR, \"if\", 14, 12),\n            \"54:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 18, 16),\n            \"55:15: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 14, 12),\n            \"56:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 14, 12),\n            \"57:11: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 10, 8),\n\n            \"60:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 10, 12),\n            \"66:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 10, 12),\n            \"71:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 10, 12),\n            \"78:6: \" + getCheckMessage(MSG_ERROR, \"while rparen\", 5, 8),\n            \"85:11: \" + getCheckMessage(MSG_ERROR, \"while rparen\", 10, 8),\n            \"92:11: \" + getCheckMessage(MSG_ERROR, \"while rparen\", 10, 8),\n            \"99:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 8, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidInvalidAnonymousClass() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidAnonymousClassIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidForWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidForIndent.java\");\n        final String[] expected \u003d {\n            \"26:7: \" + getCheckMessage(MSG_ERROR, \"for\", 6, 8),\n            \"27:11: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 10, 8),\n            \"29:10: \" + getCheckMessage(MSG_ERROR, \"for\", 9, 8),\n            \"30:7: \" + getCheckMessage(MSG_ERROR, \"for lcurly\", 6, 8),\n            \"31:7: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 6, 8),\n            \"35:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n\n            \"36:11: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 10, 8),\n            \"39:11: \" + getCheckMessage(MSG_ERROR, \"for lcurly\", 10, 8),\n            \"40:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"48:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"54:8: \" + getCheckMessage(MSG_ERROR, \"for\", 7, 8),\n\n            \"55:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"64:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 7, 12),\n\n            \"69:7: \" + getCheckMessage(MSG_ERROR, \"for\", 6, 8),\n            \"70:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"71:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 14, 16),\n            \"72:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"81:13: \" + getCheckMessage(MSG_ERROR, \"for rparen\", 12, 8),\n            \"86:3: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),\n            \"87:5: \" + getCheckMessage(MSG_ERROR, \"for\", 4, 8),\n            \"88:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 12),\n            \"89:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 6, 12),\n            \"90:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 8, 16),\n            \"92:1: \" + getCheckMessage(MSG_ERROR, \"for\", 0, 8),\n            \"93:1: \" + getCheckMessage(MSG_ERROR, \"for lparen\", 0, 8),\n            \"94:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n            \"95:1: \" + getCheckMessage(MSG_ERROR, \";\", 0, 4),\n            \"96:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n            \"97:1: \" + getCheckMessage(MSG_ERROR, \";\", 0, 4),\n            \"98:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidForWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidForIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidDoWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidDoWhileIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidDoWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidDoWhileIndent.java\");\n        final String[] expected \u003d {\n            \"7:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"8:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"9:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"10:1: \" + getCheckMessage(MSG_ERROR, \"do..while rcurly\", 0, 8),\n            \"11:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"12:1: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 0, 8),\n            \"13:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"14:1: \" + getCheckMessage(MSG_ERROR, \"do..while lcurly\", 0, 8),\n            \"15:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"16:1: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 0, 8),\n            \"17:1: \" + getCheckMessage(MSG_ERROR, \"do..while lparen\", 0, 8),\n            \"18:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"19:1: \" + getCheckMessage(MSG_ERROR, \"do..while lparen\", 0, 8),\n            \"20:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"21:1: \" + getCheckMessage(MSG_ERROR, \"do..while lparen\", 0, 8),\n            \"22:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"do..while\", 0, 8),\n            \"23:1: \" + getCheckMessage(MSG_ERROR, \"do..while rparen\", 0, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidBlockWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidBlockIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidBlockWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidBlockIndent1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidWhileIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidClassDefWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidClassDefIndent.java\");\n        final String[] expected \u003d {\n            \"38:9: \" + getCheckMessage(MSG_ERROR, \"int\", 8, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidClassDefWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidClassDefIndent1.java\");\n        final String[] expected \u003d {\n            \"43:1: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidInterfaceDefWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidInterfaceDefIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidCommaWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidCommaIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTabs() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"29:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 9, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationUseTabs.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"2\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"29:6: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 5, 4),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationUseTwoSpaces.java\"), expected);\n    }\n\n    @Test\n    public void testThrowsIndentationLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidThrowsIndent.java\"), expected);\n    }\n\n    @Test\n    public void testThrowsIndentationLevel2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"1\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"3\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"5\");\n        final String[] expected \u003d {\n            \"7:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"10:1: \" + getCheckMessage(MSG_ERROR, \"NullPointerException\", 0, 6),\n            \"13:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"16:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"18:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"19:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"22:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"23:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"24:1: \" + getCheckMessage(MSG_ERROR, \"NullPointerException\", 0, 6),\n            \"27:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"28:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"31:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"37:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidThrowsIndent2.java\"), expected);\n    }\n\n    @Test\n    public void testCaseLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"27:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCaseLevel.java\"), expected);\n    }\n\n    @Test\n    public void testBraceAdjustment() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"24:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 8, 10),\n            \"25:9: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 10),\n            \"26:11: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 10, 12),\n            \"27:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"if\", 12, \"14, 16\"),\n            \"28:9: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 8, 12),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationBraceAdjustment.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidAssignWithChecker() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"22:11: \" + getCheckMessage(MSG_ERROR, \"getLineNo\", 10, 12),\n            \"24:11: \" + getCheckMessage(MSG_ERROR, \"getLine\", 10, 12),\n            \"28:10: \" + getCheckMessage(MSG_ERROR, \"\u003d\", 9, 12),\n            \"29:11: \" + getCheckMessage(MSG_ERROR, \"1\", 10, 12),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidAssignIndent.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidImportIndent() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"basicOffset\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"4:3: \" + getCheckMessage(MSG_ERROR, \".\", 2, 4),\n            \"5:2: \" + getCheckMessage(MSG_ERROR, \"import\", 1, 0),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidImportIndent.java\"), expected);\n    }\n\n    @Test\n    public void testValidAssignWithChecker() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationValidAssignIndent.java\"), expected);\n    }\n\n    @Test\n    public void test15Extensions() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentation15Extensions.java\"), expected);\n    }\n\n    @Test\n    public void testTryResources() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationValidTryResourcesIndent.java\"),\n               expected);\n    }\n\n    @Test\n    public void testSwitchCustom() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationSwitchCustom.java\"),\n               expected);\n    }\n\n    @Test\n    public void testSynchronizedStatement() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"27:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"synchronized\", 0, 12),\n            \"30:13: \" + getCheckMessage(MSG_ERROR, \"synchronized lparen\", 12, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationSynchronizedStatement.java\"), expected);\n    }\n\n    @Test\n    public void testSynchronizedMethod() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationSynchronizedMethod.java\"), expected);\n    }\n\n    @Test\n    public void testAnonymousClassInMethod() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        final String[] expected \u003d {\n            \"19:9: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 8, 2),\n            \"20:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 16, 4),\n            \"21:25: \" + getCheckMessage(MSG_ERROR_MULTI, \"method def modifier\", 24, \"18, 20, 22\"),\n            \"23:33: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"method def\", 32, \"20, 22, 24\"),\n            \"24:25: \" + getCheckMessage(MSG_ERROR_MULTI, \"method def rcurly\", 24, \"18, 20, 22\"),\n            \"26:9: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 8, 2),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnonymousClassInMethod.java\"), expected);\n    }\n\n    @Test\n    public void testAnonymousClassInMethodWithCurlyOnNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        final String[] expected \u003d {\n            \"38:19: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 18, \"16, 20, 24\"),\n            \"40:15: \" + getCheckMessage(MSG_ERROR, \"new\", 14, 16),\n            \"46:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 14, \"16, 20, 24\"),\n            \"58:19: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 18, \"16, 20, 24\"),\n            \"64:19: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 18, \"16, 20, 24\"),\n            \"67:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 14, \"16, 20, 24\"),\n            \"73:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 14, \"16, 20, 24\"),\n        };\n        verifyWarns(checkConfig,\n            getPath(\"InputIndentationAnonymousClassInMethodCurlyOnNewLine.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationDefinition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnnotationDefinition.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"1:2: \" + getCheckMessage(MSG_ERROR, \"package def\", 1, 0),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationPackageDeclaration.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"2:2: \" + getCheckMessage(MSG_ERROR, \"package def\", 1, 0),\n        };\n        verifyWarns(checkConfig,\n            getPath(\"package-info.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationPackageDeclaration3.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"2:1: \" + getCheckMessage(MSG_ERROR, \"com\", 0, 4),\n            \"3:1: \" + getCheckMessage(MSG_ERROR, \"checks\", 0, 4),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationPackageDeclaration4.java\"), expected);\n    }\n\n    @Test\n    public void testLambda() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"37:6: \" + getCheckMessage(MSG_ERROR_MULTI, \"block lcurly\", 5, \"4, 8\"),\n            \"38:6: \" + getCheckMessage(MSG_ERROR_MULTI, \"block rcurly\", 5, \"4, 8\"),\n            \"42:12: \" + getCheckMessage(MSG_ERROR, \"lambda\", 11, 12),\n            \"43:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"55:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 7, 6),\n            \"56:6: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 5, 4),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda.java\"), expected);\n    }\n\n    @Test\n    public void testLambda1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"68:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 9, 10),\n            \"69:12: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 11, 10),\n            \"74:8: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 7, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda1.java\"), expected);\n    }\n\n    @Test\n    public void testLambda2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n    }\n\n    @Test\n    public void testLambda3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d {\n            \"15:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n            \"29:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n            \"30:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 12, 16),\n            \"31:9: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 8, 12),\n            \"65:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n            \"87:13: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 12, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);\n    }\n\n    @Test\n    public void testLambda4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda4.java\"), expected);\n    }\n\n    @Test\n    public void testLambda5() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"3\");\n        checkConfig.addProperty(\"basicOffset\", \"3\");\n        checkConfig.addProperty(\"caseIndent\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"6\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda5.java\"), expected);\n    }\n\n    @Test\n    public void testLambdaFalseForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"0\");\n        final String[] expected \u003d {\n            \"34:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"35:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 12),\n            \"36:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"47:5: \" + getCheckMessage(MSG_ERROR_MULTI, \"block rcurly\", 4, \"8, 16\"),\n            \"73:5: \" + getCheckMessage(MSG_ERROR, \"-\u003e\", 4, 8),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda6.java\"), expected);\n    }\n\n    @Test\n    public void testLambdaTrueForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"23:17: \" + getCheckMessage(MSG_ERROR, \"(\", 16, 12),\n            \"24:17: \" + getCheckMessage(MSG_ERROR, \"-\u003e\", 16, 12),\n            \"26:27: \" + getCheckMessage(MSG_ERROR, \"\\\"SECOND_ARG\\\"\", 26, 12),\n            \"27:26: \" + getCheckMessage(MSG_ERROR, \"(\", 25, 12),\n            \"30:17: \" + getCheckMessage(MSG_ERROR, \"(\", 16, 12),\n            \"31:21: \" + getCheckMessage(MSG_ERROR, \"if\", 20, 16),\n            \"32:25: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 24, 20),\n            \"33:21: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 20, 16),\n            \"34:25: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 24, 20),\n            \"35:21: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 20, 16),\n            \"36:17: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 16, 12),\n            \"39:17: \" + getCheckMessage(MSG_ERROR, \"(\", 16, 12),\n            \"40:17: \" + getCheckMessage(MSG_ERROR, \"-\u003e\", 16, 12),\n            \"41:21: \" + getCheckMessage(MSG_ERROR, \"if\", 20, 16),\n            \"44:1: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 0, 12),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda7.java\"), expected);\n    }\n\n    @Test\n    public void testLambdaOddConditions() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"3\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"7\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda8.java\"), expected);\n    }\n\n    @Test\n    public void testSeparatedStatements() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationSeparatedStatements.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testSeparatedLineWithJustSpaces() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationSeparatedStatementWithSpaces.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTwoStatementsPerLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTwoStatementsPerLine.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMethodChaining() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationChainedMethods.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMultipleAnnotationsWithWrappedLines() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d\n            getPath(\"InputIndentationCorrectMultipleAnnotationsWithWrappedLines.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMultipleAnnotationsWithWrappedLines1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d\n            getPath(\"InputIndentationCorrectMultipleAnnotationsWithWrappedLines1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMethodPrecedeByAnnotationsWithParameterOnSeparateLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        final String fileName \u003d\n            getPath(\"InputIndentationMethodPrecededByAnnotationWithParameterOnSeparateLine.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationIncorrect() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d\n            getPath(\"InputIndentationAnnotationIncorrect.java\");\n        final String[] expected \u003d {\n            \"11:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"14:9: \" + getCheckMessage(MSG_ERROR, \"(\", 8, 12),\n            \"19:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInputAnnotationScopeIndentationCheck() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d getPath(\"InputIndentationAnnotationScopeIndentationCheck.java\");\n        final String[] expected \u003d {\n            \"9:9: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 8, \"0, 4\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInputAnnotationDefIndentationCheck() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d getPath(\"InputIndentationCustomAnnotation.java\");\n        final String[] expected \u003d {\n            \"14:6: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 5, 0),\n            \"15:6: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 5, 0),\n            \"16:6: \" + getCheckMessage(MSG_ERROR, \"@\", 5, 0),\n            \"17:1: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 0, 4),\n            \"18:6: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 5, 0),\n            \"20:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 0),\n            \"22:1: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 0, 4),\n            \"23:6: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 5, 0),\n            \"25:6: \" + getCheckMessage(MSG_ERROR, \"@\", 5, 0),\n            \"26:6: \" + getCheckMessage(MSG_ERROR, \"AnnotationWithLineWrap\", 5, 0),\n            \"30:6: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 5, 0),\n            \"31:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 0),\n            \"34:6: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 5, 4),\n            \"35:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 4),\n            \"36:1: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 0, 4),\n            \"37:1: \" + getCheckMessage(MSG_ERROR, \"@\", 0, 4),\n            \"38:9: \" + getCheckMessage(MSG_ERROR, \"AnnotationInnerLineWrap\", 8, 4),\n            \"41:8: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 7, 8),\n            \"58:5: \" + getCheckMessage(MSG_ERROR, \"AnnotationInnerLineWrap2\", 4, 0),\n            \"59:4: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 3, 4),\n            \"60:8: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 7, 4),\n            \"61:5: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 4, 0),\n            \"72:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 4),\n            \"87:29: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 28, \"20, 24\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInputAnnotationDefIndentationCheck1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d getPath(\"InputIndentationCustomAnnotation1.java\");\n        final String[] expected \u003d {\n            \"36:6: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 5, 4),\n            \"47:2: \" + getCheckMessage(MSG_ERROR, \"interface\", 1, 0),\n            \"53:12: \" + getCheckMessage(MSG_ERROR, \"@\", 11, 0),\n            \"56:17: \" + getCheckMessage(MSG_ERROR, \"@\", 16, 0),\n            \"63:13: \" + getCheckMessage(MSG_ERROR, \"@\", 12, 4),\n            \"67:23: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 16, 0),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesStrict() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryWithResourcesStrict.java\");\n        final String[] expected \u003d {\n            \"26:1: \" + getCheckMessage(MSG_ERROR, \"try resource\", 0, 12),\n            \"28:14: \" + getCheckMessage(MSG_ERROR_MULTI, \"try rparen\", 13, \"8, 12\"),\n            \"33:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 16),\n            \"39:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 12),\n            \"59:21: \" + getCheckMessage(MSG_ERROR, \"try resource\", 20, 16),\n            \"79:14: \" + getCheckMessage(MSG_ERROR, \".\", 13, 12),\n            \"85:12: \" + getCheckMessage(MSG_ERROR, \".\", 11, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesStrict1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryWithResourcesStrict1.java\");\n        final String[] expected \u003d {\n            \"31:20: \" + getCheckMessage(MSG_ERROR, \"writ\", 19, 12),\n            \"38:20: \" + getCheckMessage(MSG_ERROR, \"writ\", 19, 16),\n            \"45:22: \" + getCheckMessage(MSG_ERROR, \"writ\", 21, 16),\n            \"60:18: \" + getCheckMessage(MSG_ERROR, \"zipFileName\", 17, 16),\n            \"67:16: \" + getCheckMessage(MSG_ERROR, \"zipFileName\", 15, 16),\n            \"77:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"82:16: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 15, 12),\n            \"88:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"89:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 9, 12),\n            \"93:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"94:12: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 11, 16),\n            \"95:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 13, 12),\n            \"97:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"98:8: \" + getCheckMessage(MSG_ERROR_MULTI, \"try rparen\", 7, \"8, 12\"),\n            \"102:10: \" + getCheckMessage(MSG_ERROR, \"try\", 9, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesNotStrict() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryResourcesNotStrict.java\");\n        final String[] expected \u003d {\n            \"26:1: \" + getCheckMessage(MSG_ERROR, \"try resource\", 0, 12),\n            \"32:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 16),\n            \"38:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesNotStrict1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryResourcesNotStrict1.java\");\n        final String[] expected \u003d {\n            \"44:16: \" + getCheckMessage(MSG_ERROR, \"zipFileName\", 15, 16),\n            \"54:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"59:16: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 15, 12),\n            \"65:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"66:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 9, 12),\n            \"70:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"71:12: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 11, 16),\n            \"72:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 13, 12),\n            \"74:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"75:8: \" + getCheckMessage(MSG_ERROR_MULTI, \"try rparen\", 7, \"8, 12\"),\n            \"88:9: \" + getCheckMessage(MSG_ERROR, \".\", 8, 12),\n            \"96:12: \" + getCheckMessage(MSG_ERROR, \"new\", 11, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    /**\n     * Verifies that the arguments of {@link IndentationCheck#MSG_ERROR},\n     * {@link IndentationCheck#MSG_CHILD_ERROR}, {@link IndentationCheck#MSG_CHILD_ERROR_MULTI},\n     * {@link IndentationCheck#MSG_CHILD_ERROR_MULTI} are in appropriate order.\n     *\n     * \u003cp\u003eIn other tests, the argument 0 and text before it are chopped off and only the rest of\n     * messages are verified. Therefore, the argument 0 is required to be the first argument in\n     * the messages above. If we update the messages in the future, it is required to keep the\n     * arguments in appropriate order to ensure other tests will work.\u003c/p\u003e\n     *\n     * @see IndentComment#getExpectedMessagePostfix(String)\n     */\n    @Test\n    public void testArgumentOrderOfErrorMessages() {\n        final Object[] arguments \u003d {\"##0##\", \"##1##\", \"##2##\"};\n        final String[] messages \u003d {\n            getCheckMessage(MSG_ERROR, arguments),\n            getCheckMessage(MSG_CHILD_ERROR, arguments),\n            getCheckMessage(MSG_ERROR_MULTI, arguments),\n            getCheckMessage(MSG_CHILD_ERROR_MULTI, arguments),\n        };\n        final boolean isInOrder \u003d Arrays.stream(messages).allMatch(msg -\u003e {\n            final int indexOfArgumentZero \u003d msg.indexOf((String) arguments[0]);\n            return Arrays.stream(arguments)\n                    .map(String.class::cast)\n                    .mapToInt(msg::indexOf)\n                    .allMatch(index -\u003e index \u003e\u003d indexOfArgumentZero);\n        });\n        assertWithMessage(\n                    \"the argument 0 of error messages (indentation.error, indentation.child.error,\"\n                        + \" indentation.error.multi, indentation.child.error.multi)\"\n                        + \" is required to be the first argument of them\")\n                .that(isInOrder)\n                .isTrue();\n    }\n\n    @Test\n    public void testEmptyArray() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationEmptyArray.java\"), expected);\n    }\n\n    @Test\n    public void testNewHandler() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"10:1: \" + getCheckMessage(MSG_ERROR, \"Object\", 0, 12),\n            \"12:1: \" + getCheckMessage(MSG_ERROR, \"(\", 0, 12),\n            \"15:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"new\", 0, 8),\n            \"17:1: \" + getCheckMessage(MSG_ERROR, \"new lparen\", 0, 8),\n            \"25:1: \" + getCheckMessage(MSG_ERROR, \"\u003d\", 0, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationNewHandler.java\"), expected);\n    }\n\n    @Test\n    public void testTryHandler() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationTryBlockWithResources.java\"), expected);\n    }\n\n    @Test\n    public void testTryHandler2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String[] expected \u003d {\n            \"25:17: \" + getCheckMessage(MSG_ERROR, \"new\", 16, 20),\n            \"27:13: \" + getCheckMessage(MSG_ERROR, \"new\", 12, 20),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationTryBlock.java\"), expected);\n    }\n\n    @Test\n    public void testChainedMethodWithBracketOnNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"2\");\n        final String[] expected \u003d {\n            \"44:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 8),\n            \"45:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 8, 10),\n            \"47:7: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),\n            \"61:6: \" + getCheckMessage(MSG_ERROR, \"foo\", 5, 8),\n            \"82:5: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 4, 6),\n            \"84:3: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 2, 4),\n        };\n        final String fileName \u003d \"InputIndentationChainedMethodWithBracketOnNewLine.java\";\n        verifyWarns(checkConfig, getPath(fileName), expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpression() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"17:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 12),\n            \"18:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 16),\n            \"21:25: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 24, 12),\n            \"22:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 16),\n            \"27:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 20),\n            \"29:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 0, 16),\n            \"30:1: \" + getCheckMessage(MSG_ERROR, \"yield\", 0, 16),\n            \"34:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 4, 20),\n            \"44:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 0, 16),\n            \"46:21: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 20, 12),\n            \"47:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 0, 16),\n            \"51:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 20),\n            \"56:33: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 32, 20),\n        };\n\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationCheckSwitchExpression.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationYieldStatement() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"23:13: \" + getCheckMessage(MSG_ERROR, \"yield\", 12, 16),\n            \"28:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"yield\", 8, 16),\n            \"40:5: \" + getCheckMessage(MSG_ERROR, \"yield\", 4, 16),\n            \"41:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"yield\", 8, 16),\n            \"71:1: \" + getCheckMessage(MSG_ERROR, \"yield\", 0, 16),\n            \"74:37: \" + getCheckMessage(MSG_ERROR, \"yield\", 36, 16),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationYieldStatement.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionCorrect() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationCheckSwitchExpressionCorrect.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionDeclaration() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d {\n            \"33:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"34:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"41:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"42:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"49:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"50:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"57:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"58:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n        };\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationCheckSwitchExpressionDeclaration.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionDeclarationLeftCurlyNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"34:5: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 4, 8),\n            \"42:5: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 4, 8),\n            \"50:13: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 12, 8),\n            \"58:13: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 12, 8),\n        };\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\n                    \"InputIndentationCheckSwitchExpressionDeclarationLCurlyNewLine.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationRecords() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationRecords.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationRecordsAndCompactCtors() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"13:1: \" + getCheckMessage(MSG_ERROR, \"(\", 0, 8),\n            \"25:1: \" + getCheckMessage(MSG_ERROR, \"String\", 0, 12),\n            \"38:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"compact ctor def\", 0, 12),\n            \"48:8: \" + getCheckMessage(MSG_ERROR, \"record def ident\", 0, 4),\n            \"53:1: \" + getCheckMessage(MSG_ERROR, \"compact ctor def rcurly\", 0, 8),\n            \"61:1: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 0, 8),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationRecordsAndCompactCtors.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"30:13: \" + getCheckMessage(MSG_ERROR, \"lambda\", 12, 16),\n            \"32:13: \" + getCheckMessage(MSG_ERROR, \"lambda\", 12, 16),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationCheckSwitchExpressionNewLine.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationMethodParenthesisOnNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"13:9: \" + getCheckMessage(MSG_ERROR, \"method def rparen\", 8, 4),\n            \"18:9: \" + getCheckMessage(MSG_ERROR, \"method def rparen\", 8, 4),\n        };\n\n        verifyWarns(checkConfig,\n                getPath(\"InputIndentationCheckMethodParenOnNewLine.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationMethodParenthesisOnNewLine1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"11:10: \" + getCheckMessage(MSG_ERROR, \"2\", 9, 12),\n            \"17:8: \" + getCheckMessage(MSG_ERROR, \"int\", 7, 8),\n            \"18:9: \" + getCheckMessage(MSG_ERROR, \"method def rparen\", 8, 4),\n        };\n\n        verifyWarns(checkConfig,\n                getPath(\"InputIndentationCheckMethodParenOnNewLine1.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLineWrappedRecordDeclaration() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n\n        final String[] expected \u003d {\n            \"33:1: \" + getCheckMessage(MSG_ERROR, \")\", 0, 4),\n            \"55:11: \" + getCheckMessage(MSG_ERROR, \"interface def ident\", 0, 4),\n            \"56:1: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 0, 8),\n            \"57:1: \" + getCheckMessage(MSG_ERROR, \"void\", 0, 4),\n            \"58:1: \" + getCheckMessage(MSG_ERROR, \"method\", 0, 4),\n            \"59:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 4),\n            \"60:1: \" + getCheckMessage(MSG_ERROR, \"IOException\", 0, 4),\n            \"61:1: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 0, 8),\n            \"62:1: \" + getCheckMessage(MSG_ERROR, \"interface def rcurly\", 0, 4),\n            \"75:8: \" + getCheckMessage(MSG_ERROR, \"record def ident\", 0, 4),\n            \"76:1: \" + getCheckMessage(MSG_ERROR, \"record def rparen\", 0, 4),\n            \"77:1: \" + getCheckMessage(MSG_ERROR, \"implements\", 0, 4),\n            \"78:1: \" + getCheckMessage(MSG_ERROR, \"SimpleInterface2\", 0, 4),\n            \"79:8: \" + getCheckMessage(MSG_ERROR, \"record def ident\", 0, 8),\n            \"80:1: \" + getCheckMessage(MSG_ERROR, \"(\", 0, 4),\n            \"81:1: \" + getCheckMessage(MSG_ERROR, \"record def rparen\", 0, 8),\n            \"82:1: \" + getCheckMessage(MSG_ERROR, \"record def lcurly\", 0, 8),\n            \"83:1: \" + getCheckMessage(MSG_ERROR, \"record def rcurly\", 0, 8),\n            \"84:1: \" + getCheckMessage(MSG_ERROR, \"record def rcurly\", 0, 4),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationLineWrappedRecordDeclaration.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationAnnotationFieldDefinition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n\n        final String[] expected \u003d {\n            \"17:5: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 4, 8),\n            \"18:13: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 12, 8),\n            \"25:5: \" + getCheckMessage(MSG_ERROR, \"member def type\", 4, 8),\n            \"26:5: \" + getCheckMessage(MSG_ERROR, \"member def type\", 4, 8),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnnotationFieldDefinition.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString1.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString2.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString3.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString4.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString5() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString5.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString6() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString6.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString7() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString7.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString8() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString8.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString9() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString9.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString10() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString10.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString11() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString11.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLineBreakVariableDeclaration()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String fileName \u003d getPath(\"InputIndentationLineBreakVariableDeclaration.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionOnStartOfTheLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n\n        final String[] expected \u003d {\n            \"40:7: \" + getCheckMessage(MSG_ERROR, \"switch\", 6, 8),\n            \"41:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 10),\n            \"42:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 10),\n            \"43:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 10),\n            \"44:7: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 6, 8),\n            \"49:11: \" + getCheckMessage(MSG_ERROR, \"switch\", 10, 8),\n            \"50:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 10),\n            \"51:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 10),\n            \"52:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 10),\n        };\n\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationSwitchOnStartOfLine.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationPatternMatchingForSwitch()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n\n        final String fileName \u003d getNonCompilablePath(\n                \"InputIndentationPatternMatchingForSwitch.java\");\n        final String[] expected \u003d {\n            \"21:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"54:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"69:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"70:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"75:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 4, 16),\n            \"76:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 4, 16),\n            \"87:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 16),\n            \"88:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 16),\n            \"89:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 16),\n            \"90:1: \" + getCheckMessage(MSG_ERROR, \"lambda\", 0, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIndentationRecordPattern()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n\n        final String fileName \u003d getNonCompilablePath(\n                \"InputIndentationRecordPattern.java\");\n        final String[] expected \u003d {\n            \"19:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"24:9: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 8, 12),\n            \"29:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"34:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"37:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"39:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"40:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"41:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"42:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"56:17: \" + getCheckMessage(MSG_ERROR, \"Rectangle\", 16, 12),\n            \"57:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"58:25: \" + getCheckMessage(MSG_ERROR, \"boolean\", 24, 12),\n            \"59:17: \" + getCheckMessage(MSG_ERROR, \"int\", 16, 12),\n            \"60:25: \" + getCheckMessage(MSG_ERROR, \"_\", 24, 12),\n            \"61:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"62:17: \" + getCheckMessage(MSG_ERROR, \")\", 16, 8),\n            \"67:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"66:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"68:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"69:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"70:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"71:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"72:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"81:13: \" + getCheckMessage(MSG_ERROR, \")\", 12, 8),\n            \"89:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 16),\n            \"90:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIndentationCodeBlocks1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"17:5: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 4, 2),\n            \"18:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 4),\n            \"19:5: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 4, 2),\n            \"30:5: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 4, 2),\n            \"31:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 4),\n            \"32:5: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 4, 2),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCodeBlocks1.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationCodeBlocks2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"45:13: \" + getCheckMessage(MSG_ERROR, \"for lcurly\", 12, 14),\n            \"47:13: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 12, 14),\n        };\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationCodeBlocks2.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationSealedClasses()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n\n        final String fileName \u003d getNonCompilablePath(\n                \"InputIndentationSealedClasses.java\");\n        final String[] expected \u003d {\n            \"14:1: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 0, 4),\n            \"15:2: \" + getCheckMessage(MSG_ERROR, \"class\", 1, 4),\n            \"16:6: \" + getCheckMessage(MSG_ERROR, \"permits\", 5, 4),\n            \"19:5: \" + getCheckMessage(MSG_ERROR, \"class\", 4, 8),\n            \"20:5: \" + getCheckMessage(MSG_ERROR, \"permits\", 4, 8),\n            \"28:1: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 0, 4),\n            \"29:9: \" + getCheckMessage(MSG_ERROR, \"extends\", 8, 4),\n            \"32:5: \" + getCheckMessage(MSG_ERROR, \"extends\", 4, 8),\n            \"38:5: \" + getCheckMessage(MSG_ERROR, \"class\", 4, 8),\n            \"39:1: \" + getCheckMessage(MSG_ERROR, \"permits\", 0, 8),\n            \"40:13: \" + getCheckMessage(MSG_ERROR, \"C\", 12, 8),\n            \"48:5: \" + getCheckMessage(MSG_ERROR, \"class\", 4, 8),\n            \"49:5: \" + getCheckMessage(MSG_ERROR, \"C\", 4, 8),\n            \"55:1: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 0, 4),\n            \"56:9: \" + getCheckMessage(MSG_ERROR, \"class\", 8, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    private static final class IndentAudit implements AuditListener {\n\n        private final IndentComment[] comments;\n        private int position;\n\n        private IndentAudit(IndentComment... comments) {\n            this.comments \u003d Arrays.copyOf(comments, comments.length);\n        }\n\n        @Override\n        public void auditStarted(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void auditFinished(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void fileStarted(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void fileFinished(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void addError(AuditEvent event) {\n            final int line \u003d event.getLine();\n            final String message \u003d event.getMessage();\n\n            assertWithMessage(\n                    \"found a warning when none was expected for #%s at line %s with message %s\",\n                    position, line, message)\n                .that(position)\n                .isLessThan(comments.length);\n\n            final IndentComment comment \u003d comments[position];\n            position++;\n\n            final String possibleExceptedMessages \u003d Arrays.stream(comment.getExpectedMessages())\n                    .reduce(\"\", (cur, next) -\u003e cur + \"\\\"\" + next + \"\\\", \");\n            final String assertMessage \u003d String.format(\n                    Locale.ROOT,\n                    \"input expected warning #%d at line %d to report one of the following: %s\"\n                            + \"but got instead: %d: %s\",\n                    position, comment.getLineNumber(), possibleExceptedMessages, line, message);\n            assertWithMessage(assertMessage)\n                    .that(line \u003d\u003d comment.getLineNumber() \u0026\u0026 Arrays\n                            .stream(comment.getExpectedMessages()).anyMatch(message::endsWith))\n                    .isTrue();\n        }\n\n        @Override\n        public void addException(AuditEvent event, Throwable throwable) {\n            // No code needed\n        }\n\n    }\n\n    private static final class IndentComment {\n\n        /** Used to locate the index of argument zero of error messages. */\n        private static final String FAKE_ARGUMENT_ZERO \u003d \"##0##\";\n        private final int lineNumber;\n        private final int indent;\n        /** Used for when violations report nodes not first on the line. */\n        private final int indentOffset;\n        private final boolean expectedNonStrict;\n        private final String expectedWarning;\n        private final boolean warning;\n\n        private IndentComment(Matcher match, int lineNumber) {\n            this.lineNumber \u003d lineNumber;\n            indent \u003d Integer.parseInt(match.group(1));\n            if (match.group(2) \u003d\u003d null) {\n                indentOffset \u003d 0;\n            }\n            else {\n                indentOffset \u003d Integer.parseInt(match.group(2));\n            }\n            expectedNonStrict \u003d match.group(3) !\u003d null;\n            expectedWarning \u003d match.group(4).replace(\",\", \", \");\n            warning \u003d match.group(5) !\u003d null;\n        }\n\n        public String[] getExpectedMessages() {\n            final String[] expectedMessages;\n            if (expectedWarning.contains(\",\")) {\n                expectedMessages \u003d new String[] {\n                    getExpectedMessagePostfix(MSG_ERROR_MULTI),\n                    getExpectedMessagePostfix(MSG_CHILD_ERROR_MULTI),\n                };\n            }\n            else {\n                expectedMessages \u003d new String[] {\n                    getExpectedMessagePostfix(MSG_ERROR),\n                    getExpectedMessagePostfix(MSG_CHILD_ERROR),\n                };\n            }\n            return expectedMessages;\n        }\n\n        private String getExpectedMessagePostfix(final String messageKey) {\n            final String msg \u003d getCheckMessage(IndentationCheck.class, messageKey,\n                    FAKE_ARGUMENT_ZERO, indent + indentOffset, expectedWarning);\n            final int indexOfMsgPostfix \u003d msg.indexOf(FAKE_ARGUMENT_ZERO)\n                    + FAKE_ARGUMENT_ZERO.length();\n            return msg.substring(indexOfMsgPostfix);\n        }\n\n        public int getLineNumber() {\n            return lineNumber;\n        }\n\n        public int getIndent() {\n            return indent;\n        }\n\n        public int getIndentOffset() {\n            return indentOffset;\n        }\n\n        public boolean isExpectedNonStrict() {\n            return expectedNonStrict;\n        }\n\n        public String getExpectedWarning() {\n            return expectedWarning;\n        }\n\n        public boolean isWarning() {\n            return warning;\n        }\n\n    }\n\n}\n","filePathAfter":"src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java","sourceCodeAfterForWhole":"///////////////////////////////////////////////////////////////////////////////////////////////\n// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n// Copyright (C) 2001-2025 the original author or authors.\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n///////////////////////////////////////////////////////////////////////////////////////////////\n\npackage com.puppycrawl.tools.checkstyle.checks.indentation;\n\nimport static com.google.common.truth.Truth.assertWithMessage;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_CHILD_ERROR;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_CHILD_ERROR_MULTI;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_ERROR;\nimport static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_ERROR_MULTI;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;\nimport com.puppycrawl.tools.checkstyle.Checker;\nimport com.puppycrawl.tools.checkstyle.DefaultConfiguration;\nimport com.puppycrawl.tools.checkstyle.api.AuditEvent;\nimport com.puppycrawl.tools.checkstyle.api.AuditListener;\nimport com.puppycrawl.tools.checkstyle.api.Configuration;\nimport com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n\n/**\n * Unit test for IndentationCheck.\n */\npublic class IndentationCheckTest extends AbstractModuleTestSupport {\n\n    private static final Pattern LINE_WITH_COMMENT_REGEX \u003d Pattern.compile(\n        \".*?//(?:below )?indent:(\\\\d+)(?:\"\n                + \" ioffset:(\\\\d+))? exp:(\u003e\u003d)?(\\\\d+(?:,\\\\d+)*?)( warn)?$\");\n\n    private static final IndentComment[] EMPTY_INDENT_COMMENT_ARRAY \u003d new IndentComment[0];\n\n    private static IndentComment[] getLinesWithWarnAndCheckComments(String aFileName,\n            final int tabWidth)\n            throws IOException {\n        final List\u003cIndentComment\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(Path.of(aFileName),\n                StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            String line \u003d br.readLine();\n            IndentComment pendingBelowComment \u003d null;\n\n            while (line !\u003d null) {\n                final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                if (pendingBelowComment !\u003d null) {\n                    final int actualIndent \u003d getLineStart(line, tabWidth);\n\n                    processPendingBelowComment(pendingBelowComment, actualIndent,\n                            lineNumber, result);\n\n                    pendingBelowComment \u003d null;\n                }\n                else if (match.matches()) {\n                    final boolean isBelow \u003d line.contains(\"//below indent:\");\n                    final IndentComment warn \u003d new IndentComment(match, lineNumber);\n\n                    if (isBelow) {\n                        pendingBelowComment \u003d warn;\n                    }\n                    else {\n                        final int actualIndent \u003d getLineStart(line, tabWidth);\n                        processInlineComment(warn, actualIndent, lineNumber, aFileName, result);\n                    }\n                }\n                else if (pendingBelowComment \u003d\u003d null \u0026\u0026 !line.isEmpty()) {\n                    throw new IllegalStateException(String.format(Locale.ROOT,\n                            \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                    + \"malformed. Error on line: %2$d\",\n                            aFileName,\n                            lineNumber));\n                }\n\n                line \u003d br.readLine();\n                lineNumber++;\n            }\n        }\n\n        return result.toArray(EMPTY_INDENT_COMMENT_ARRAY);\n    }\n\n    private static void processPendingBelowComment(IndentComment pendingBelowComment,\n            int actualIndent, int lineNumber, List\u003cIndentComment\u003e result) {\n        if (actualIndent !\u003d pendingBelowComment.getIndent()) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"Incorrect indentation in \u0027below\u0027 comment. \"\n                            + \"Line %1$d (from line %2$d): comment:%3$d, actual:%4$d.\",\n                    lineNumber,\n                    pendingBelowComment.getLineNumber(),\n                    pendingBelowComment.getIndent(),\n                    actualIndent));\n        }\n\n        if (!isCommentConsistent(pendingBelowComment)) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"Inconsistent \u0027below\u0027 comment on line %1$d\",\n                    pendingBelowComment.getLineNumber()));\n        }\n\n        if (pendingBelowComment.isWarning()) {\n            result.add(new IndentComment(pendingBelowComment, lineNumber));\n        }\n    }\n\n    private static void processInlineComment(IndentComment warn, int actualIndent,\n        int lineNumber, String fileName, List\u003cIndentComment\u003e result) {\n\n        if (actualIndent !\u003d warn.getIndent()) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n                            + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                    fileName,\n                    lineNumber,\n                    warn.getIndent(),\n                    actualIndent));\n        }\n\n        if (!isCommentConsistent(warn)) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                    fileName,\n                    lineNumber));\n        }\n\n        if (warn.isWarning()) {\n            result.add(warn);\n        }\n    }\n\n    private static boolean isCommentConsistent(IndentComment comment) {\n        final String[] levels \u003d comment.getExpectedWarning().split(\", \");\n        final int indent \u003d comment.getIndent() + comment.getIndentOffset();\n        final boolean result;\n        if (levels.length \u003e 1) {\n            // multi\n            final boolean containsActualLevel \u003d\n                            Arrays.asList(levels).contains(String.valueOf(indent));\n\n            result \u003d containsActualLevel !\u003d comment.isWarning();\n        }\n        else {\n            final int expectedWarning \u003d Integer.parseInt(comment.getExpectedWarning());\n\n            final boolean test;\n            if (comment.isExpectedNonStrict()) {\n                // non-strict\n                test \u003d indent \u003e\u003d expectedWarning;\n            }\n            else {\n                // single\n                test \u003d expectedWarning \u003d\u003d indent;\n            }\n            result \u003d test !\u003d comment.isWarning();\n\n        }\n        return result;\n    }\n\n    private static int getLineStart(String line, final int tabWidth) {\n        int lineStart \u003d 0;\n        for (int index \u003d 0; index \u003c line.length(); ++index) {\n            if (!Character.isWhitespace(line.charAt(index))) {\n                lineStart \u003d CommonUtil.lengthExpandedTabs(line, index, tabWidth);\n                break;\n            }\n        }\n        return lineStart;\n    }\n\n    private void verifyWarns(Configuration config, String filePath,\n                    String... expected)\n                    throws Exception {\n        final int tabWidth \u003d Integer.parseInt(config.getProperty(\"tabWidth\"));\n        final IndentComment[] linesWithWarn \u003d\n                        getLinesWithWarnAndCheckComments(filePath, tabWidth);\n        verify(config, filePath, expected, linesWithWarn);\n        assertWithMessage(\"Expected warning count in UT does not match warn comment count \"\n                + \"in input file\")\n            .that(expected.length)\n            .isEqualTo(linesWithWarn.length);\n    }\n\n    private void verify(Configuration config, String filePath, String[] expected,\n            final IndentComment... linesWithWarn) throws Exception {\n        final Checker checker \u003d createChecker(config);\n        checker.addListener(new IndentAudit(linesWithWarn));\n        verify(checker, filePath, expected);\n    }\n\n    @Override\n    protected String getPackageLocation() {\n        return \"com/puppycrawl/tools/checkstyle/checks/indentation/indentation\";\n    }\n\n    @Test\n    public void testGetRequiredTokens() {\n        final IndentationCheck checkObj \u003d new IndentationCheck();\n        final int[] requiredTokens \u003d checkObj.getRequiredTokens();\n        final HandlerFactory handlerFactory \u003d new HandlerFactory();\n        final int[] expected \u003d handlerFactory.getHandledTypes();\n        Arrays.sort(expected);\n        Arrays.sort(requiredTokens);\n        assertWithMessage(\"Default required tokens are invalid\")\n            .that(requiredTokens)\n            .isEqualTo(expected);\n    }\n\n    @Test\n    public void testGetAcceptableTokens() {\n        final IndentationCheck checkObj \u003d new IndentationCheck();\n        final int[] acceptableTokens \u003d checkObj.getAcceptableTokens();\n        final HandlerFactory handlerFactory \u003d new HandlerFactory();\n        final int[] expected \u003d handlerFactory.getHandledTypes();\n        Arrays.sort(expected);\n        Arrays.sort(acceptableTokens);\n        assertWithMessage(\"Default acceptable tokens are invalid\")\n            .that(acceptableTokens)\n            .isEqualTo(expected);\n    }\n\n    @Test\n    public void testThrowsIndentProperty() {\n        final IndentationCheck indentationCheck \u003d new IndentationCheck();\n\n        indentationCheck.setThrowsIndent(1);\n\n        assertWithMessage(\"Invalid throws indent\")\n            .that(indentationCheck.getThrowsIndent())\n            .isEqualTo(1);\n    }\n\n    @Test\n    public void testStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"10:29: \" + getCheckMessage(MSG_ERROR_MULTI, \"method def rcurly\", 28, \"16, 20, 24\"),\n            \"13:9: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 8, 4),\n            \"14:5: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 4, 0),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationStrictCondition.java\"), expected);\n    }\n\n    @Test\n    public void forbidOldStyle() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"20:30: \" + getCheckMessage(MSG_ERROR, \"int\", 29, 12),\n            \"21:30: \" + getCheckMessage(MSG_ERROR, \"int\", 29, 12),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationMethodCStyle.java\"), expected);\n    }\n\n    @Test\n    public void testZeroCaseLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationZeroCaseLevel.java\"), expected);\n    }\n\n    @Test\n    public void testAndroidStyle() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"42:4: \" + getCheckMessage(MSG_ERROR, \"extends\", 3, 8),\n            \"44:4: \" + getCheckMessage(MSG_ERROR, \"member def type\", 3, 4),\n            \"47:9: \" + getCheckMessage(MSG_ERROR, \"foo\", 8, 12),\n            \"50:9: \" + getCheckMessage(MSG_ERROR, \"int\", 8, 12),\n            \"53:14: \" + getCheckMessage(MSG_ERROR, \"true\", 13, 16),\n            \"56:17: \" + getCheckMessage(MSG_ERROR, \"+\", 16, 20),\n            \"57:9: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 12),\n            \"60:12: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 11, 12),\n            \"62:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 7, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationAndroidStyle.java\"), expected);\n    }\n\n    @Test\n    public void testMethodCallLineWrap() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"53:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 18, 20),\n            \"54:15: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 14, 16),\n            \"75:13: \" + getCheckMessage(MSG_ERROR, \"lambda arguments\", 12, 16),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationMethodCallLineWrap.java\"), expected);\n    }\n\n    @Test\n    public void testDifficultAnnotations() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"40:1: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 0, \"4, 23, 25\"),\n            \"41:1: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 0, \"4, 23, 25\"),\n            \"50:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 6, \"8, 27, 29\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationDifficultAnnotations.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationClosingParenthesisEndsInSameIndentationAsOpening() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d {\n            \"34:17: \" + getCheckMessage(MSG_ERROR, \")\", 16, 0),\n            \"36:17: \" + getCheckMessage(MSG_ERROR, \")\", 16, 0),\n            \"40:9: \" + getCheckMessage(MSG_ERROR, \")\", 8, 4),\n            \"42:9: \" + getCheckMessage(MSG_ERROR, \")\", 8, 4),\n            \"46:9: \" + getCheckMessage(MSG_ERROR, \")\", 8, 4),\n        };\n\n        verifyWarns(checkConfig,\n            getPath(\"InputIndentation\"\n                + \"AnnotationClosingParenthesisEndsInSameIndentationAsOpening.java\"),\n                expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava1.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava2.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava3.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationsFromGuava4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationFromGuava4.java\"), expected);\n    }\n\n    @Test\n    public void testCorrectIfAndParameters() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"65:11: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 10, \"12, 14\"),\n            \"72:13: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 12, \"14, 16\"),\n            \"94:13: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 12, \"14, 16\"),\n            \"101:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 14, \"16, 18\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCorrectIfAndParameter.java\"), expected);\n    }\n\n    @Test\n    public void testCorrectIfAndParameters1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"38:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 8, \"10, 12\"),\n            \"45:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 8, \"10, 12\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCorrectIfAndParameter1.java\"), expected);\n    }\n\n    @Test\n    public void testAnonymousClasses() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnonymousClasses.java\"), expected);\n    }\n\n    @Test\n    public void testArrays() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationArrays.java\"), expected);\n    }\n\n    @Test\n    public void testLabels() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLabels.java\"), expected);\n    }\n\n    @Test\n    public void testLabels1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLabels1.java\"), expected);\n    }\n\n    @Test\n    public void testClassesAndMethods() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationClassesMethods.java\"), expected);\n    }\n\n    @Test\n    public void testCtorCall() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"28:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"29:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 6),\n            \"30:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 6),\n            \"34:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"35:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 6),\n            \"39:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"40:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"41:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"45:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"46:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"50:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"51:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"52:5: \" + getCheckMessage(MSG_ERROR, \"x\", 4, 8),\n            \"56:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 6),\n            \"57:5: \" + getCheckMessage(MSG_ERROR, \"method call lparen\", 4, 6),\n            \"62:5: \" + getCheckMessage(MSG_ERROR, \".\", 4, 10),\n            \"63:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"68:5: \" + getCheckMessage(MSG_ERROR, \"super\", 4, 10),\n            \"69:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"75:11: \" + getCheckMessage(MSG_ERROR_MULTI, \"lambda arguments\", 10, \"12, 14\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCtorCall.java\"), expected);\n    }\n\n    @Test\n    public void testCtorCall1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationCtorCall1.java\"), expected);\n    }\n\n    @Test\n    public void testMembers() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"22:6: \" + getCheckMessage(MSG_ERROR, \"\u003d\", 5, 6),\n            \"57:4: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 3, 2),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationMembers.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInit() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"6\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n\n            \"17:1: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\", 0,\n                \"4, 6, 34, 36\"),\n            \"22:14: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                    13, \"4, 6, 34, 36\"),\n            \"23:3: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 2, \"0, 4\"),\n            \"35:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\", 6,\n                \"8, 10, 31, 33\"),\n            \"36:3: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 2, \"4, 8\"),\n\n            \"52:6: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 5, \"6, 8, 10\"),\n            \"54:6: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 5, \"2, 6\"),\n        };\n        final String fileName \u003d getPath(\"InputIndentationAnnArrInit.java\");\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitTwo() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"0\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"0\");\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n\n            \"17:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"annotation array initialization\", 4, \"0, 33, 35\"),\n            \"30:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"annotation array initialization\", 8, \"4, 29, 31\"),\n            \"32:3: \" + getCheckMessage(MSG_ERROR,\n                \"annotation array initialization rcurly\", 2, 4),\n            \"47:7: \" + getCheckMessage(MSG_ERROR,\n                \"annotation array initialization lcurly\", 6, 2),\n            \"49:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"annotation array initialization\", 4, \"2, 6, 8\"),\n        };\n        final String fileName \u003d getPath(\"InputIndentationAnnArrInit2.java\");\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitWithEmoji() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"0\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"0\");\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"17:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 4, \"0, 41, 43\"),\n            \"30:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 8, \"4, 29, 31\"),\n            \"32:3: \" + getCheckMessage(MSG_ERROR,\n                    \"annotation array initialization rcurly\", 2, 4),\n            \"42:7: \" + getCheckMessage(MSG_ERROR,\n                    \"member def type\", 6, \"4\"),\n            \"47:7: \" + getCheckMessage(MSG_ERROR,\n                    \"annotation array initialization lcurly\", 6, \"2\"),\n            \"48:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 10, \"2, 6, 8\"),\n            \"49:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 12, \"2, 6, 8\"),\n            \"50:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 20, \"2, 6, 8\"),\n            \"52:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                    \"annotation array initialization\", 4, \"2, 6, 8\"),\n        };\n        final String fileName \u003d getPath(\"InputIndentationAnnArrInitWithEmoji.java\");\n        verifyWarns(checkConfig, fileName, expected);\n\n    }\n\n    @Test\n    public void testOddAnnotations()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"3\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"9\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationOddLineWrappingAndArrayInit.java\");\n        final String[] expected \u003d {\n            \"25:17: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                    16, \"11, 17, 47, 54\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationOddStyles() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n\n        final String fileName \u003d getPath(\"InputIndentationAnnotationArrayInitOldStyle.java\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testZeroAnnotationArrayInit()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"0\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationZeroArrayInit.java\");\n\n        final String[] expected \u003d {\n            \"22:12: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                    11, \"8, 12, 35, 37\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitGoodCase()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationAnnotationArrayInitGood.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationArrayInitGoodCaseTwo()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationAnnotationArrayInitGood.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidLabel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"24:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 10, \"8, 12\"),\n            \"33:3: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 2, \"4, 8\"),\n            \"36:19: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 18, \"8, 12\"),\n            \"37:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 18, 8),\n            \"39:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 6, \"8, 12\"),\n            \"41:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 6, \"8, 12\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidLabelIndent.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidLabelWithWhileLoop() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"18:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 9, \"4, 8\"),\n            \"19:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"label\", 9, \"8, 12\"),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidLabelWithWhileLoopIndent.java\"),\n            expected);\n    }\n\n    @Test\n    public void testValidLabel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationValidLabelIndent.java\"), expected);\n    }\n\n    @Test\n    public void testValidIfWithChecker() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidIfIndent.java\");\n        final String[] expected \u003d {\n            \"95:9: \" + getCheckMessage(MSG_ERROR, \"(\", 8, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidIfWithChecker1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidIfIndent1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidIfWithChecker2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidIfIndent2.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidDotWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidDotIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidMethodWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidMethodIndent.java\");\n        final String[] expected \u003d {\n            \"76:5: \" + getCheckMessage(MSG_ERROR, \"void\", 4, 8),\n            \"77:5: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidMethodWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidMethodIndent1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidMethodWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidMethodIndent1.java\");\n        final String[] expected \u003d {\n            \"23:7: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),\n            \"26:7: \" + getCheckMessage(MSG_ERROR, \"ctor def modifier\", 6, 4),\n            \"27:3: \" + getCheckMessage(MSG_ERROR, \"ctor def lcurly\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),\n            \"31:3: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),\n            \"32:7: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 6, 4),\n            \"69:6: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 5, 4),\n            \"70:6: \" + getCheckMessage(MSG_ERROR, \"final\", 5, 9),\n            \"71:6: \" + getCheckMessage(MSG_ERROR, \"void\", 5, 9),\n            \"72:5: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 9),\n            \"86:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"89:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"99:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidMethodWithChecker2()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidMethodIndent2.java\");\n        final String[] expected \u003d {\n            \"23:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 8),\n            \"26:4: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 3, 4),\n            \"27:4: \" + getCheckMessage(MSG_ERROR, \"final\", 3, 7),\n            \"28:4: \" + getCheckMessage(MSG_ERROR, \"void\", 3, 7),\n            \"29:6: \" + getCheckMessage(MSG_ERROR, \"method6\", 5, 7),\n            \"39:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 6, 8),\n            \"40:7: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),\n            \"41:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"42:7: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 6, 8),\n            \"45:11: \" + getCheckMessage(MSG_ERROR, \"Arrays\", 10, 12),\n            \"51:15: \" + getCheckMessage(MSG_ERROR, \"new\", 14, 16),\n            \"54:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"59:15: \" + getCheckMessage(MSG_ERROR, \"new\", 14, 16),\n            \"63:11: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),\n            \"67:11: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),\n            \"68:7: \" + getCheckMessage(MSG_ERROR, \")\", 6, 8),\n            \"72:7: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),\n            \"86:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),\n            \"91:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),\n            \"95:1: \" + getCheckMessage(MSG_ERROR, \"int\", 0, 8),\n            \"96:5: \" + getCheckMessage(MSG_ERROR, \"method9\", 4, 8),\n            \"106:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAlternativeGoogleStyleSwitchCaseAndEnums()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationSwitchCasesAndEnums.java\");\n        final String[] expected \u003d {\n            \"18:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 4),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"38:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 8),\n            \"54:5: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 4, 2),\n            \"55:3: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 2, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidSwitchWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidSwitchIndent.java\");\n        final String[] expected \u003d {\n            \"30:7: \" + getCheckMessage(MSG_ERROR, \"switch\", 6, 8),\n            \"32:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 12),\n            \"33:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"37:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"39:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 14, 12),\n            \"40:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 12),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 12),\n            \"44:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"45:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"53:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"54:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 18, 16),\n            \"55:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n            \"59:11: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),\n            \"62:15: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 14, 12),\n            \"66:15: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 14, 12),\n            \"69:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n            \"76:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 14, 16),\n            \"81:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 14, 16),\n            \"89:7: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 6, 8),\n            \"92:7: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 6, 8),\n            \"93:11: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 10, 8),\n            \"95:11: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 10, 8),\n            \"96:7: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 6, 8),\n            \"99:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"100:13: \" + getCheckMessage(MSG_ERROR, \"if\", 12, 16),\n            \"101:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 16, 20),\n            \"102:13: \" + getCheckMessage(MSG_ERROR, \"else\", 12, 16),\n            \"103:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 16, 20),\n            \"106:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 4, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIfElseWithNoCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationIfElseWithNoCurly.java\");\n        final String[] expected \u003d {\n            \"20:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"25:5: \" + getCheckMessage(MSG_ERROR, \"if\", 4, 8),\n            \"26:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"37:13: \" + getCheckMessage(MSG_ERROR, \"else\", 12, 8),\n            \"39:9: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 12),\n            \"43:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testWhileWithNoCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationWhileNoCurly.java\");\n        final String[] expected \u003d {\n            \"21:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 0, 12),\n            \"26:5: \" + getCheckMessage(MSG_ERROR, \"while\", 4, 8),\n            \"27:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 8, 12),\n            \"32:9: \" + getCheckMessage(MSG_ERROR, \"while\", 8, 12),\n            \"36:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 8, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testForWithNoCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationForWithoutCurly.java\");\n        final String[] expected \u003d {\n            \"21:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n            \"26:5: \" + getCheckMessage(MSG_ERROR, \"for\", 4, 8),\n            \"27:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 12),\n            \"32:9: \" + getCheckMessage(MSG_ERROR, \"for\", 8, 12),\n            \"33:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 16),\n            \"37:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 16),\n\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testDoWhileWithoutCurly()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationDoWhile.java\");\n        final String[] expected \u003d {\n            \"23:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"do..while\", 8, 12),\n            \"30:5: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 4, 8),\n            \"33:13: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 12, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidSwitchWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidSwitchIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testNewKeyword() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationNew.java\"), expected);\n    }\n\n    @Test\n    public void testNewKeyword2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationNew.java\"), expected);\n    }\n\n    // we can not use verifyWarns() due to usage of multi line string syntax in input\n    @Test\n    public void testTextBlockLiteral() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"18:1: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 0, 8),\n            \"29:17: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 16, 12),\n            \"46:1: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 0, 12),\n            \"52:1: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 0, 12),\n            \"59:9: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 8, 12),\n            \"78:15: \" + getCheckMessage(MSG_ERROR, \"\\\"\\\"\\\"\", 14, 12),\n        };\n        verifyWarns(checkConfig, getNonCompilablePath(\"InputIndentationTextBlock.java\"),\n            expected);\n    }\n\n    @Test\n    public void testValidNewKeywordWithForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationNew.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidNewKeywordWithForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"21:12: \" + getCheckMessage(MSG_ERROR, \"]\", 11, 12),\n            \"25:5: \" + getCheckMessage(MSG_ERROR, \"[\", 4, 12),\n            \"32:17: \" + getCheckMessage(MSG_ERROR, \"new\", 16, 24),\n            \"33:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"object def\", 20, \"28, 32, 36\"),\n            \"34:17: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 16, \"24, 28, 32\"),\n            \"37:36: \" + getCheckMessage(MSG_ERROR, \"+\", 35, 16),\n            \"41:35: \" + getCheckMessage(MSG_ERROR, \"]\", 34, 16),\n            \"45:36: \" + getCheckMessage(MSG_ERROR, \"42\", 35, 16),\n            \"49:36: \" + getCheckMessage(MSG_ERROR, \"+\", 35, 16),\n            \"50:36: \" + getCheckMessage(MSG_ERROR, \"+\", 35, 16),\n            \"55:21: \" + getCheckMessage(MSG_ERROR, \"1\", 20, 16),\n            \"59:13: \" + getCheckMessage(MSG_ERROR, \"fun2\", 12, 16),\n            \"78:11: \" + getCheckMessage(MSG_ERROR, \"Object\", 10, 12),\n            \"82:16: \" + getCheckMessage(MSG_ERROR, \"]\", 15, 12),\n        };\n        verifyWarns(checkConfig,\n            getPath(\"InputIndentationNewWithForceStrictCondition.java\"), expected);\n    }\n\n    @Test\n    public void testValidArrayInitDefaultIndentWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitDefaultIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidArrayInitWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"8\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidArrayInitTwoDimensional() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitIndentTwoDimensional.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitTwoDimensional() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d\n            getPath(\"InputIndentationInvalidArrayInitIndentTwoDimensional.java\");\n        final String[] expected \u003d {\n            \"18:5: \" + getCheckMessage(MSG_ERROR_MULTI,\n                \"array initialization lcurly\", 4, \"6, 8, 18, 20, 24\"),\n            \"23:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"array initialization\", 9, \"8, 10, 12, 20, 22, 24\"),\n            \"26:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI,\n                \"array initialization\", 6, \"8, 10, 12, 20, 22, 24\"),\n            \"28:5: \" + getCheckMessage(MSG_ERROR_MULTI,\n                \"array initialization lcurly\", 4, \"6, 8, 18, 20, 24\"),\n            \"30:5: \" + getCheckMessage(MSG_ERROR_MULTI,\n                \"array initialization rcurly\", 4, \"6, 8, 18, 20, 24\"),\n\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidArrayInit()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidArrayInitIndentTwo.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testArrayInitWithEmoji() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationArrayInitIndentWithEmoji.java\");\n        final String[] expected \u003d {\n            \"19:6: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n               5, \"4, 6, 52, 54\"),\n            \"24:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n               8, \"4, 6, 35, 37\"),\n            \"25:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n               10, \"4, 6, 35, 37\"),\n            \"30:11: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\",\n               10, \"4, 6, 19, 21, 25\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testYieldKeywordWithForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"15:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 12, 16),\n            \"16:13: \" + getCheckMessage(MSG_ERROR, \"yield\", 12, 16),\n            \"44:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 12, 16),\n            \"45:13: \" + getCheckMessage(MSG_ERROR, \"yield\", 12, 16),\n            \"50:5: \" + getCheckMessage(MSG_ERROR, \"yield\", 4, 16),\n            \"71:15: \" + getCheckMessage(MSG_ERROR, \"yield\", 14, 16),\n            \"74:20: \" + getCheckMessage(MSG_ERROR, \"yield\", 19, 16),\n            \"77:9: \" + getCheckMessage(MSG_ERROR, \"yield\", 8, 16),\n        };\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationYieldForceStrict.java\"), expected);\n    }\n\n    @Test\n    public void testChainedMethodCalling() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationChainedMethodCalls.java\");\n        final String[] expected \u003d {\n            \"32:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),\n            \"37:5: \" + getCheckMessage(MSG_ERROR, \".\", 4, 8),\n            \"38:5: \" + getCheckMessage(MSG_ERROR, \".\", 4, 8),\n            \"41:5: \" + getCheckMessage(MSG_ERROR, \"new\", 4, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithTrueStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent.java\");\n        final String[] expected \u003d {\n            \"21:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"22:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"24:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"29:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 8,\n                \"10, 34, 36\"),\n            \"30:5: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 4, \"6, 10\"),\n            \"33:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"34:8: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 7,\n                \"8, 31, 33\"),\n            \"35:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"40:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"44:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"4, 8\"),\n            \"48:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"52:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 20,\n                \"8, 31, 33\"),\n            \"53:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                4, \"8, 31, 33\"),\n            \"58:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 31, 33\"),\n            \"63:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"65:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"66:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 2, \"6, 10\"),\n            \"69:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 36, 38\"),\n            \"76:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                10, \"12, 24, 26\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithTrueStrictCondition1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent1.java\");\n        final String[] expected \u003d {\n            \"28:9: \" + getCheckMessage(MSG_ERROR, \"1\", 8, 12),\n            \"39:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 30, 32\"),\n            \"40:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 30, 32\"),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 31, 32\"),\n            \"44:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 31, 32\"),\n            \"45:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            \"48:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 6, \"8, 12\"),\n            \"49:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"8, 10, 12\"),\n            \"51:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            // following are tests for annotation array initialization\n            \"59:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"67:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"68:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"70:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 29, 31\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithFalseStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent.java\");\n        final String[] expected \u003d {\n            \"21:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"22:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"24:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"29:9: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 8,\n                \"10, 34, 36\"),\n            \"30:5: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 4, \"6, 10\"),\n            \"33:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"34:8: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 7,\n                \"8, 31, 33\"),\n            \"35:10: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 9,\n                \"8, 31, 33\"),\n            \"40:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"44:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"4, 8\"),\n            \"48:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 2, \"4, 8\"),\n            \"52:21: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 20,\n                \"8, 31, 33\"),\n            \"53:5: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                4, \"8, 31, 33\"),\n            \"58:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 31, 33\"),\n            \"63:3: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),\n            \"65:7: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),\n            \"66:3: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 2, \"6, 10\"),\n            \"69:7: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                6, \"8, 36, 38\"),\n            \"76:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\",\n                10, \"12, 24, 26\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidArrayInitWithFalseStrictCondition1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidArrayInitIndent1.java\");\n        final String[] expected \u003d {\n            \"28:9: \" + getCheckMessage(MSG_ERROR, \"1\", 8, 12),\n            \"39:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 30, 32\"),\n            \"40:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 30, 32\"),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 10,\n                \"12, 31, 32\"),\n            \"44:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"12, 31, 32\"),\n            \"45:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            \"48:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization lcurly\", 6, \"8, 12\"),\n            \"49:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 14,\n                \"8, 10, 12\"),\n            \"51:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),\n            // following are tests for annotation array initialization\n            \"59:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"67:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"68:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"70:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 29, 31\"),\n        };\n\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    // Test Input without trailing comment and usage of \u0027verify\u0027 method is due to #16906\n    @Test\n    public void testInvalidArrayInitIndentNoCommentsTrueStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\n            \"InputIndentationInvalidArrayInitIndentWithoutTrailingComments.java\");\n        final String[] expected \u003d {\n            \"29:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"35:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"12, 16\"),\n            \"39:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"40:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"43:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"annotation array initialization\",\n                12, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    // Test Input without trailing comment and usage of \u0027verify\u0027 method is due to #16906\n    @Test\n    public void testInvalidArrayInitIndentNoCommentsFalseStrictCondition()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\n            \"InputIndentationInvalidArrayInitIndentWithoutTrailingComments.java\");\n        final String[] expected \u003d {\n            \"29:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                12, \"16, 46, 48\"),\n            \"35:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"12, 16\"),\n            \"39:15: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"annotation array initialization\",\n                14, \"16, 28, 30\"),\n            \"40:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"annotation array initialization rcurly\",\n                8, \"12, 16\"),\n            \"43:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"annotation array initialization\",\n                12, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidTryWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidTryIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidTryWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidTryIndent.java\");\n        final String[] expected \u003d {\n            \"25:10: \" + getCheckMessage(MSG_ERROR, \"try\", 9, 8),\n            \"26:8: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 7, 8),\n            \"28:8: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 7, 8),\n            \"30:5: \" + getCheckMessage(MSG_ERROR, \"try\", 4, 8),\n            \"31:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 8, 12),\n            \"32:5: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 4, 8),\n            \"33:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"finally\", 8, 12),\n            \"38:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 8, 12),\n            \"43:11: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 10, 8),\n            \"45:7: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 6, 8),\n            \"52:6: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 5, 8),\n            \"59:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 10, 12),\n            \"60:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 14, 12),\n            \"61:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 10, 12),\n            \"63:7: \" + getCheckMessage(MSG_ERROR, \"catch\", 6, 8),\n            \"70:11: \" + getCheckMessage(MSG_ERROR, \"try lcurly\", 10, 8),\n            \"72:11: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 10, 8),\n            \"74:7: \" + getCheckMessage(MSG_ERROR, \"catch lcurly\", 6, 8),\n            \"77:11: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 10, 8),\n            \"80:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 10, 12),\n            \"86:1: \" + getCheckMessage(MSG_ERROR, \"try\", 0, 8),\n            \"87:1: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 0, 8),\n            \"88:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 0, 12),\n            \"89:1: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 0, 8),\n            \"91:1: \" + getCheckMessage(MSG_ERROR, \"try\", 0, 8),\n            \"92:1: \" + getCheckMessage(MSG_ERROR, \"try rcurly\", 0, 8),\n            \"93:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"catch\", 0, 12),\n            \"94:1: \" + getCheckMessage(MSG_ERROR, \"catch rcurly\", 0, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidClassDefWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidClassDefIndent.java\");\n        final String[] expected \u003d {\n            \"18:3: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),\n            \"24:3: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),\n            \"27:3: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),\n            \"30:9: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 0),\n            \"34:3: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),\n            \"39:3: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),\n            \"40:3: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),\n            \"46:3: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),\n            \"54:3: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),\n            \"55:3: \" + getCheckMessage(MSG_ERROR, \"java\", 2, 4),\n            \"60:3: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),\n            \"61:3: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),\n            \"69:3: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),\n            \"73:3: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),\n            \"79:1: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidClassDefWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidClassDefIndent1.java\");\n        final String[] expected \u003d {\n            \"22:3: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),\n            \"27:9: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),\n            \"29:13: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),\n            \"31:9: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),\n            \"34:7: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),\n            \"40:11: \" + getCheckMessage(MSG_ERROR, \"int\", 10, 12),\n            \"44:7: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),\n            \"49:7: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 6, 4),\n            \"51:13: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),\n            \"56:13: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 8),\n            \"59:17: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 10, 8),\n            \"61:11: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 10, 8),\n            \"64:11: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),\n            \"69:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 10, 8),\n            \"70:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 8, \"10, 14\"),\n            \"74:9: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 8, \"10, 14\"),\n            \"77:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 6, \"8, 12\"),\n            \"81:7: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 6, \"8, 12\"),\n            \"85:11: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 10, 12),\n            \"87:11: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 10, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidBlockWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidBlockIndent.java\");\n        final String[] expected \u003d {\n            \"26:8: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 7, 8),\n            \"27:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"29:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"30:8: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 7, 8),\n            \"32:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"34:7: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"38:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"39:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),\n            \"41:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),\n            \"42:10: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 9, 8),\n            \"45:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"46:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"48:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"49:7: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),\n            \"52:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),\n            \"55:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"59:11: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),\n            \"63:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n            \"68:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),\n            \"70:11: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),\n            \"71:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),\n            \"86:11: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidBlockWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidBlockIndent1.java\");\n        final String[] expected \u003d {\n            \"27:3: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),\n            \"28:7: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),\n            \"32:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 7, 8),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),\n            \"37:3: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),\n            \"39:3: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),\n            \"41:7: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),\n            \"43:3: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),\n            \"45:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),\n            \"48:3: \" + getCheckMessage(MSG_ERROR, \"static initialization lcurly\", 2, 4),\n            \"49:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),\n            \"50:7: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),\n            \"55:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),\n            \"60:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 4, 8),\n            \"61:3: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),\n            \"66:7: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),\n            \"69:3: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 2, 4),\n            \"70:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),\n            \"73:3: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 2, 4),\n            \"75:7: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 4),\n            \"77:7: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),\n            \"79:3: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 2, 4),\n            \"82:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidIfWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidIfIndent.java\");\n        final String[] expected \u003d {\n            \"55:2: \" + getCheckMessage(MSG_ERROR, \"if\", 1, 8),\n            \"60:10: \" + getCheckMessage(MSG_ERROR, \"if\", 9, 8),\n            \"61:10: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 9, 8),\n            \"62:8: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 7, 8),\n            \"64:7: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),\n            \"65:6: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 5, 8),\n            \"66:6: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 5, 8),\n            \"70:11: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 10, 8),\n            \"71:8: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 7, 8),\n            \"74:10: \" + getCheckMessage(MSG_ERROR, \"if\", 9, 8),\n\n            \"75:8: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 7, 8),\n            \"77:10: \" + getCheckMessage(MSG_ERROR, \"else\", 9, 8),\n            \"79:10: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 9, 8),\n            \"82:11: \" + getCheckMessage(MSG_ERROR, \"if\", 10, 8),\n            \"83:8: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 7, 8),\n            \"84:10: \" + getCheckMessage(MSG_ERROR, \"else\", 9, 8),\n            \"85:8: \" + getCheckMessage(MSG_ERROR, \"else lcurly\", 7, 8),\n            \"86:10: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 9, 8),\n\n            \"90:10: \" + getCheckMessage(MSG_ERROR, \"if\", 9, 8),\n            \"91:10: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 9, 8),\n            \"92:10: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 9, 8),\n            \"93:8: \" + getCheckMessage(MSG_ERROR, \"else lcurly\", 7, 8),\n            \"94:11: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 10, 8),\n            \"97:7: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),\n            \"98:11: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 10, 8),\n            \"99:11: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 10, 8),\n            \"100:8: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 7, 8),\n            \"103:6: \" + getCheckMessage(MSG_ERROR, \"if\", 5, 8),\n            \"104:12: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 11, 8),\n            \"105:6: \" + getCheckMessage(MSG_ERROR, \"else\", 5, 8),\n            \"106:12: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 11, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidIfWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidIfIndent1.java\");\n        final String[] expected \u003d {\n            \"37:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n            \"42:11: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 10, 8),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"48:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n            \"49:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),\n            \"51:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 10, 12),\n            \"52:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 8, 12),\n\n            \"59:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 16, 12),\n            \"60:10: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 9, 8),\n            \"63:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 16, 12),\n            \"69:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"73:41: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 40, 12),\n            \"80:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n\n            \"83:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 14, 12),\n            \"89:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"91:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 10, 12),\n            \"95:11: \" + getCheckMessage(MSG_ERROR, \"if\", 10, 8),\n            \"96:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 14, 12),\n            \"97:11: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 10, 8),\n            \"98:11: \" + getCheckMessage(MSG_ERROR, \"else\", 10, 8),\n            \"99:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 14, 12),\n            \"100:11: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 10, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidIfWithChecker2()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidIfIndent2.java\");\n        final String[] expected \u003d {\n            \"26:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 9, 12),\n            \"27:12: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 11, 12),\n            \"31:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"34:8: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 7, 8),\n            \"41:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"43:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n\n            \"50:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),\n            \"59:11: \" + getCheckMessage(MSG_ERROR, \"if\", 10, 12),\n            \"63:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 18, 20),\n            \"74:11: \" + getCheckMessage(MSG_ERROR, \"if rparen\", 10, 8),\n            \"79:7: \" + getCheckMessage(MSG_ERROR, \"if rparen\", 6, 8),\n            \"85:7: \" + getCheckMessage(MSG_ERROR, \"if lparen\", 6, 8),\n            \"87:7: \" + getCheckMessage(MSG_ERROR, \"if rparen\", 6, 8),\n            \"90:1: \" + getCheckMessage(MSG_ERROR, \"if\", 0, 8),\n            \"91:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"92:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"93:1: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 0, 8),\n            \"94:1: \" + getCheckMessage(MSG_ERROR, \"if\", 0, 8),\n            \"95:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"96:1: \" + getCheckMessage(MSG_ERROR, \"else\", 0, 8),\n            \"97:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 0, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidWhileIndent.java\");\n        final String[] expected \u003d {\n            \"25:10: \" + getCheckMessage(MSG_ERROR, \"while\", 9, 8),\n            \"26:8: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 7, 8),\n            \"28:8: \" + getCheckMessage(MSG_ERROR, \"while\", 7, 8),\n            \"29:10: \" + getCheckMessage(MSG_ERROR, \"while lcurly\", 9, 8),\n            \"30:10: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 9, 8),\n\n            \"32:10: \" + getCheckMessage(MSG_ERROR, \"while\", 9, 8),\n            \"33:7: \" + getCheckMessage(MSG_ERROR, \"while lcurly\", 6, 8),\n            \"34:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 14, 12),\n            \"35:7: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 6, 8),\n\n            \"37:11: \" + getCheckMessage(MSG_ERROR, \"while\", 10, 8),\n            \"39:11: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 10, 8),\n            \"41:11: \" + getCheckMessage(MSG_ERROR, \"while\", 10, 8),\n            \"44:11: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 10, 8),\n\n            \"46:7: \" + getCheckMessage(MSG_ERROR, \"while\", 6, 8),\n            \"47:11: \" + getCheckMessage(MSG_ERROR, \"while lcurly\", 10, 8),\n            \"50:7: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 6, 8),\n            \"53:15: \" + getCheckMessage(MSG_ERROR, \"if\", 14, 12),\n            \"54:19: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 18, 16),\n            \"55:15: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 14, 12),\n            \"56:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 14, 12),\n            \"57:11: \" + getCheckMessage(MSG_ERROR, \"while rcurly\", 10, 8),\n\n            \"60:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 10, 12),\n            \"66:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 10, 12),\n            \"71:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 10, 12),\n            \"78:6: \" + getCheckMessage(MSG_ERROR, \"while rparen\", 5, 8),\n            \"85:11: \" + getCheckMessage(MSG_ERROR, \"while rparen\", 10, 8),\n            \"92:11: \" + getCheckMessage(MSG_ERROR, \"while rparen\", 10, 8),\n            \"99:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"while\", 8, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidInvalidAnonymousClass() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidAnonymousClassIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidForWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidForIndent.java\");\n        final String[] expected \u003d {\n            \"26:7: \" + getCheckMessage(MSG_ERROR, \"for\", 6, 8),\n            \"27:11: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 10, 8),\n            \"29:10: \" + getCheckMessage(MSG_ERROR, \"for\", 9, 8),\n            \"30:7: \" + getCheckMessage(MSG_ERROR, \"for lcurly\", 6, 8),\n            \"31:7: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 6, 8),\n            \"35:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n\n            \"36:11: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 10, 8),\n            \"39:11: \" + getCheckMessage(MSG_ERROR, \"for lcurly\", 10, 8),\n            \"40:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"48:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"54:8: \" + getCheckMessage(MSG_ERROR, \"for\", 7, 8),\n\n            \"55:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"64:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 7, 12),\n\n            \"69:7: \" + getCheckMessage(MSG_ERROR, \"for\", 6, 8),\n            \"70:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"71:15: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 14, 16),\n            \"72:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 10, 12),\n            \"81:13: \" + getCheckMessage(MSG_ERROR, \"for rparen\", 12, 8),\n            \"86:3: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),\n            \"87:5: \" + getCheckMessage(MSG_ERROR, \"for\", 4, 8),\n            \"88:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 8, 12),\n            \"89:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 6, 12),\n            \"90:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 8, 16),\n            \"92:1: \" + getCheckMessage(MSG_ERROR, \"for\", 0, 8),\n            \"93:1: \" + getCheckMessage(MSG_ERROR, \"for lparen\", 0, 8),\n            \"94:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n            \"95:1: \" + getCheckMessage(MSG_ERROR, \";\", 0, 4),\n            \"96:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n            \"97:1: \" + getCheckMessage(MSG_ERROR, \";\", 0, 4),\n            \"98:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"for\", 0, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidForWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidForIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidDoWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidDoWhileIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInvalidDoWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationInvalidDoWhileIndent.java\");\n        final String[] expected \u003d {\n            \"7:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"8:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"9:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"10:1: \" + getCheckMessage(MSG_ERROR, \"do..while rcurly\", 0, 8),\n            \"11:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"12:1: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 0, 8),\n            \"13:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"14:1: \" + getCheckMessage(MSG_ERROR, \"do..while lcurly\", 0, 8),\n            \"15:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"16:1: \" + getCheckMessage(MSG_ERROR, \"do..while while\", 0, 8),\n            \"17:1: \" + getCheckMessage(MSG_ERROR, \"do..while lparen\", 0, 8),\n            \"18:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"19:1: \" + getCheckMessage(MSG_ERROR, \"do..while lparen\", 0, 8),\n            \"20:1: \" + getCheckMessage(MSG_ERROR, \"do..while\", 0, 8),\n            \"21:1: \" + getCheckMessage(MSG_ERROR, \"do..while lparen\", 0, 8),\n            \"22:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"do..while\", 0, 8),\n            \"23:1: \" + getCheckMessage(MSG_ERROR, \"do..while rparen\", 0, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidBlockWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidBlockIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidBlockWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidBlockIndent1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidWhileWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidWhileIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidClassDefWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidClassDefIndent.java\");\n        final String[] expected \u003d {\n            \"38:9: \" + getCheckMessage(MSG_ERROR, \"int\", 8, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidClassDefWithChecker1()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidClassDefIndent1.java\");\n        final String[] expected \u003d {\n            \"43:1: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidInterfaceDefWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidInterfaceDefIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testValidCommaWithChecker()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationValidCommaIndent.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTabs() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"29:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 9, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationUseTabs.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"2\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"29:6: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 5, 4),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationUseTwoSpaces.java\"), expected);\n    }\n\n    @Test\n    public void testThrowsIndentationLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidThrowsIndent.java\"), expected);\n    }\n\n    @Test\n    public void testThrowsIndentationLevel2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"basicOffset\", \"1\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"3\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"5\");\n        final String[] expected \u003d {\n            \"7:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"10:1: \" + getCheckMessage(MSG_ERROR, \"NullPointerException\", 0, 6),\n            \"13:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"16:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"18:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"19:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"22:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"23:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"24:1: \" + getCheckMessage(MSG_ERROR, \"NullPointerException\", 0, 6),\n            \"27:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"28:1: \" + getCheckMessage(MSG_ERROR, \"Exception\", 0, 6),\n            \"31:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n            \"37:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 6),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidThrowsIndent2.java\"), expected);\n    }\n\n    @Test\n    public void testCaseLevel() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"27:11: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 10, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCaseLevel.java\"), expected);\n    }\n\n    @Test\n    public void testBraceAdjustment() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"24:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 8, 10),\n            \"25:9: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 10),\n            \"26:11: \" + getCheckMessage(MSG_ERROR, \"if lcurly\", 10, 12),\n            \"27:13: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"if\", 12, \"14, 16\"),\n            \"28:9: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 8, 12),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationBraceAdjustment.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidAssignWithChecker() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d {\n            \"22:11: \" + getCheckMessage(MSG_ERROR, \"getLineNo\", 10, 12),\n            \"24:11: \" + getCheckMessage(MSG_ERROR, \"getLine\", 10, 12),\n            \"28:10: \" + getCheckMessage(MSG_ERROR, \"\u003d\", 9, 12),\n            \"29:11: \" + getCheckMessage(MSG_ERROR, \"1\", 10, 12),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidAssignIndent.java\"), expected);\n    }\n\n    @Test\n    public void testInvalidImportIndent() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"basicOffset\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"4:3: \" + getCheckMessage(MSG_ERROR, \".\", 2, 4),\n            \"5:2: \" + getCheckMessage(MSG_ERROR, \"import\", 1, 0),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationInvalidImportIndent.java\"), expected);\n    }\n\n    @Test\n    public void testValidAssignWithChecker() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationValidAssignIndent.java\"), expected);\n    }\n\n    @Test\n    public void test15Extensions() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentation15Extensions.java\"), expected);\n    }\n\n    @Test\n    public void testTryResources() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationValidTryResourcesIndent.java\"),\n               expected);\n    }\n\n    @Test\n    public void testSwitchCustom() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationSwitchCustom.java\"),\n               expected);\n    }\n\n    @Test\n    public void testSynchronizedStatement() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d {\n            \"27:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"synchronized\", 0, 12),\n            \"30:13: \" + getCheckMessage(MSG_ERROR, \"synchronized lparen\", 12, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationSynchronizedStatement.java\"), expected);\n    }\n\n    @Test\n    public void testSynchronizedMethod() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationSynchronizedMethod.java\"), expected);\n    }\n\n    @Test\n    public void testAnonymousClassInMethod() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"8\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        final String[] expected \u003d {\n            \"19:9: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 8, 2),\n            \"20:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 16, 4),\n            \"21:25: \" + getCheckMessage(MSG_ERROR_MULTI, \"method def modifier\", 24, \"18, 20, 22\"),\n            \"23:33: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"method def\", 32, \"20, 22, 24\"),\n            \"24:25: \" + getCheckMessage(MSG_ERROR_MULTI, \"method def rcurly\", 24, \"18, 20, 22\"),\n            \"26:9: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 8, 2),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnonymousClassInMethod.java\"), expected);\n    }\n\n    @Test\n    public void testAnonymousClassInMethodWithCurlyOnNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        final String[] expected \u003d {\n            \"38:19: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 18, \"16, 20, 24\"),\n            \"40:15: \" + getCheckMessage(MSG_ERROR, \"new\", 14, 16),\n            \"46:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 14, \"16, 20, 24\"),\n            \"58:19: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 18, \"16, 20, 24\"),\n            \"64:19: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 18, \"16, 20, 24\"),\n            \"67:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 14, \"16, 20, 24\"),\n            \"73:15: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 14, \"16, 20, 24\"),\n        };\n        verifyWarns(checkConfig,\n            getPath(\"InputIndentationAnonymousClassInMethodCurlyOnNewLine.java\"), expected);\n    }\n\n    @Test\n    public void testAnnotationDefinition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnnotationDefinition.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"1:2: \" + getCheckMessage(MSG_ERROR, \"package def\", 1, 0),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationPackageDeclaration.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"2:2: \" + getCheckMessage(MSG_ERROR, \"package def\", 1, 0),\n        };\n        verifyWarns(checkConfig,\n            getPath(\"package-info.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationPackageDeclaration3.java\"), expected);\n    }\n\n    @Test\n    public void testPackageDeclaration4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"2:1: \" + getCheckMessage(MSG_ERROR, \"com\", 0, 4),\n            \"3:1: \" + getCheckMessage(MSG_ERROR, \"checks\", 0, 4),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationPackageDeclaration4.java\"), expected);\n    }\n\n    @Test\n    public void testLambda() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"37:6: \" + getCheckMessage(MSG_ERROR_MULTI, \"block lcurly\", 5, \"4, 8\"),\n            \"38:6: \" + getCheckMessage(MSG_ERROR_MULTI, \"block rcurly\", 5, \"4, 8\"),\n            \"42:12: \" + getCheckMessage(MSG_ERROR, \"lambda\", 11, 12),\n            \"43:10: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),\n            \"55:8: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 7, 6),\n            \"56:6: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 5, 4),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda.java\"), expected);\n    }\n\n    @Test\n    public void testLambda1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"68:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 9, 10),\n            \"69:12: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 11, 10),\n            \"74:8: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 7, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda1.java\"), expected);\n    }\n\n    @Test\n    public void testLambda2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda2.java\"), expected);\n    }\n\n    @Test\n    public void testLambda3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d {\n            \"15:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n            \"29:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n            \"30:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 12, 16),\n            \"31:9: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 8, 12),\n            \"65:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),\n            \"87:13: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 12, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda3.java\"), expected);\n    }\n\n    @Test\n    public void testLambda4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda4.java\"), expected);\n    }\n\n    @Test\n    public void testLambda5() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"3\");\n        checkConfig.addProperty(\"basicOffset\", \"3\");\n        checkConfig.addProperty(\"caseIndent\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"6\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda5.java\"), expected);\n    }\n\n    @Test\n    public void testLambdaFalseForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"0\");\n        final String[] expected \u003d {\n            \"34:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"35:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 12),\n            \"36:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"47:5: \" + getCheckMessage(MSG_ERROR_MULTI, \"block rcurly\", 4, \"8, 16\"),\n            \"73:5: \" + getCheckMessage(MSG_ERROR, \"-\u003e\", 4, 8),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda6.java\"), expected);\n    }\n\n    @Test\n    public void testLambdaTrueForceStrictCondition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"23:17: \" + getCheckMessage(MSG_ERROR, \"(\", 16, 12),\n            \"24:17: \" + getCheckMessage(MSG_ERROR, \"-\u003e\", 16, 12),\n            \"26:27: \" + getCheckMessage(MSG_ERROR, \"\\\"SECOND_ARG\\\"\", 26, 12),\n            \"27:26: \" + getCheckMessage(MSG_ERROR, \"(\", 25, 12),\n            \"30:17: \" + getCheckMessage(MSG_ERROR, \"(\", 16, 12),\n            \"31:21: \" + getCheckMessage(MSG_ERROR, \"if\", 20, 16),\n            \"32:25: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 24, 20),\n            \"33:21: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 20, 16),\n            \"34:25: \" + getCheckMessage(MSG_CHILD_ERROR, \"else\", 24, 20),\n            \"35:21: \" + getCheckMessage(MSG_ERROR, \"else rcurly\", 20, 16),\n            \"36:17: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 16, 12),\n            \"39:17: \" + getCheckMessage(MSG_ERROR, \"(\", 16, 12),\n            \"40:17: \" + getCheckMessage(MSG_ERROR, \"-\u003e\", 16, 12),\n            \"41:21: \" + getCheckMessage(MSG_ERROR, \"if\", 20, 16),\n            \"44:1: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 0, 12),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda7.java\"), expected);\n    }\n\n    @Test\n    public void testLambdaOddConditions() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"3\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"7\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLambda8.java\"), expected);\n    }\n\n    @Test\n    public void testSeparatedStatements() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationSeparatedStatements.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testSeparatedLineWithJustSpaces() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationSeparatedStatementWithSpaces.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTwoStatementsPerLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTwoStatementsPerLine.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMethodChaining() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationChainedMethods.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMultipleAnnotationsWithWrappedLines() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d\n            getPath(\"InputIndentationCorrectMultipleAnnotationsWithWrappedLines.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMultipleAnnotationsWithWrappedLines1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d\n            getPath(\"InputIndentationCorrectMultipleAnnotationsWithWrappedLines1.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testMethodPrecedeByAnnotationsWithParameterOnSeparateLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        final String fileName \u003d\n            getPath(\"InputIndentationMethodPrecededByAnnotationWithParameterOnSeparateLine.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testAnnotationIncorrect() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d\n            getPath(\"InputIndentationAnnotationIncorrect.java\");\n        final String[] expected \u003d {\n            \"11:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n            \"14:9: \" + getCheckMessage(MSG_ERROR, \"(\", 8, 12),\n            \"19:5: \" + getCheckMessage(MSG_ERROR, \"(\", 4, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInputAnnotationScopeIndentationCheck() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d getPath(\"InputIndentationAnnotationScopeIndentationCheck.java\");\n        final String[] expected \u003d {\n            \"9:9: \" + getCheckMessage(MSG_ERROR_MULTI,\n                    \"annotation array initialization rcurly\", 8, \"0, 4\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInputAnnotationDefIndentationCheck() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d getPath(\"InputIndentationCustomAnnotation.java\");\n        final String[] expected \u003d {\n            \"14:6: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 5, 0),\n            \"15:6: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 5, 0),\n            \"16:6: \" + getCheckMessage(MSG_ERROR, \"@\", 5, 0),\n            \"17:1: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 0, 4),\n            \"18:6: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 5, 0),\n            \"20:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 0),\n            \"22:1: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 0, 4),\n            \"23:6: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 5, 0),\n            \"25:6: \" + getCheckMessage(MSG_ERROR, \"@\", 5, 0),\n            \"26:6: \" + getCheckMessage(MSG_ERROR, \"AnnotationWithLineWrap\", 5, 0),\n            \"30:6: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 5, 0),\n            \"31:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 0),\n            \"34:6: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 5, 4),\n            \"35:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 4),\n            \"36:1: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 0, 4),\n            \"37:1: \" + getCheckMessage(MSG_ERROR, \"@\", 0, 4),\n            \"38:9: \" + getCheckMessage(MSG_ERROR, \"AnnotationInnerLineWrap\", 8, 4),\n            \"41:8: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 7, 8),\n            \"58:5: \" + getCheckMessage(MSG_ERROR, \"AnnotationInnerLineWrap2\", 4, 0),\n            \"59:4: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 3, 4),\n            \"60:8: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 7, 4),\n            \"61:5: \" + getCheckMessage(MSG_ERROR, \"annotation def rcurly\", 4, 0),\n            \"72:4: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 3, 4),\n            \"87:29: \" + getCheckMessage(MSG_ERROR_MULTI, \"new\", 28, \"20, 24\"),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testInputAnnotationDefIndentationCheck1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String fileName \u003d getPath(\"InputIndentationCustomAnnotation1.java\");\n        final String[] expected \u003d {\n            \"36:6: \" + getCheckMessage(MSG_ERROR, \"annotation def modifier\", 5, 4),\n            \"47:2: \" + getCheckMessage(MSG_ERROR, \"interface\", 1, 0),\n            \"53:12: \" + getCheckMessage(MSG_ERROR, \"@\", 11, 0),\n            \"56:17: \" + getCheckMessage(MSG_ERROR, \"@\", 16, 0),\n            \"63:13: \" + getCheckMessage(MSG_ERROR, \"@\", 12, 4),\n            \"67:23: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 16, 0),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesStrict() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryWithResourcesStrict.java\");\n        final String[] expected \u003d {\n            \"26:1: \" + getCheckMessage(MSG_ERROR, \"try resource\", 0, 12),\n            \"28:14: \" + getCheckMessage(MSG_ERROR_MULTI, \"try rparen\", 13, \"8, 12\"),\n            \"33:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 16),\n            \"39:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 12),\n            \"59:21: \" + getCheckMessage(MSG_ERROR, \"try resource\", 20, 16),\n            \"79:14: \" + getCheckMessage(MSG_ERROR, \".\", 13, 12),\n            \"85:12: \" + getCheckMessage(MSG_ERROR, \".\", 11, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesStrict1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryWithResourcesStrict1.java\");\n        final String[] expected \u003d {\n            \"31:20: \" + getCheckMessage(MSG_ERROR, \"writ\", 19, 12),\n            \"38:20: \" + getCheckMessage(MSG_ERROR, \"writ\", 19, 16),\n            \"45:22: \" + getCheckMessage(MSG_ERROR, \"writ\", 21, 16),\n            \"60:18: \" + getCheckMessage(MSG_ERROR, \"zipFileName\", 17, 16),\n            \"67:16: \" + getCheckMessage(MSG_ERROR, \"zipFileName\", 15, 16),\n            \"77:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"82:16: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 15, 12),\n            \"88:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"89:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 9, 12),\n            \"93:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"94:12: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 11, 16),\n            \"95:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 13, 12),\n            \"97:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"98:8: \" + getCheckMessage(MSG_ERROR_MULTI, \"try rparen\", 7, \"8, 12\"),\n            \"102:10: \" + getCheckMessage(MSG_ERROR, \"try\", 9, 8),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesNotStrict() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryResourcesNotStrict.java\");\n        final String[] expected \u003d {\n            \"26:1: \" + getCheckMessage(MSG_ERROR, \"try resource\", 0, 12),\n            \"32:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 16),\n            \"38:1: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 0, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testTryResourcesNotStrict1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String fileName \u003d getPath(\"InputIndentationTryResourcesNotStrict1.java\");\n        final String[] expected \u003d {\n            \"44:16: \" + getCheckMessage(MSG_ERROR, \"zipFileName\", 15, 16),\n            \"54:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"59:16: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 15, 12),\n            \"65:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"66:10: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 9, 12),\n            \"70:12: \" + getCheckMessage(MSG_ERROR, \"try resource\", 11, 12),\n            \"71:12: \" + getCheckMessage(MSG_ERROR, \"newBufferedWriter\", 11, 16),\n            \"72:14: \" + getCheckMessage(MSG_CHILD_ERROR, \"try\", 13, 12),\n            \"74:8: \" + getCheckMessage(MSG_ERROR, \"try\", 7, 8),\n            \"75:8: \" + getCheckMessage(MSG_ERROR_MULTI, \"try rparen\", 7, \"8, 12\"),\n            \"88:9: \" + getCheckMessage(MSG_ERROR, \".\", 8, 12),\n            \"96:12: \" + getCheckMessage(MSG_ERROR, \"new\", 11, 12),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    /**\n     * Verifies that the arguments of {@link IndentationCheck#MSG_ERROR},\n     * {@link IndentationCheck#MSG_CHILD_ERROR}, {@link IndentationCheck#MSG_CHILD_ERROR_MULTI},\n     * {@link IndentationCheck#MSG_CHILD_ERROR_MULTI} are in appropriate order.\n     *\n     * \u003cp\u003eIn other tests, the argument 0 and text before it are chopped off and only the rest of\n     * messages are verified. Therefore, the argument 0 is required to be the first argument in\n     * the messages above. If we update the messages in the future, it is required to keep the\n     * arguments in appropriate order to ensure other tests will work.\u003c/p\u003e\n     *\n     * @see IndentComment#getExpectedMessagePostfix(String)\n     */\n    @Test\n    public void testArgumentOrderOfErrorMessages() {\n        final Object[] arguments \u003d {\"##0##\", \"##1##\", \"##2##\"};\n        final String[] messages \u003d {\n            getCheckMessage(MSG_ERROR, arguments),\n            getCheckMessage(MSG_CHILD_ERROR, arguments),\n            getCheckMessage(MSG_ERROR_MULTI, arguments),\n            getCheckMessage(MSG_CHILD_ERROR_MULTI, arguments),\n        };\n        final boolean isInOrder \u003d Arrays.stream(messages).allMatch(msg -\u003e {\n            final int indexOfArgumentZero \u003d msg.indexOf((String) arguments[0]);\n            return Arrays.stream(arguments)\n                    .map(String.class::cast)\n                    .mapToInt(msg::indexOf)\n                    .allMatch(index -\u003e index \u003e\u003d indexOfArgumentZero);\n        });\n        assertWithMessage(\n                    \"the argument 0 of error messages (indentation.error, indentation.child.error,\"\n                        + \" indentation.error.multi, indentation.child.error.multi)\"\n                        + \" is required to be the first argument of them\")\n                .that(isInOrder)\n                .isTrue();\n    }\n\n    @Test\n    public void testEmptyArray() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationEmptyArray.java\"), expected);\n    }\n\n    @Test\n    public void testNewHandler() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"10:1: \" + getCheckMessage(MSG_ERROR, \"Object\", 0, 12),\n            \"12:1: \" + getCheckMessage(MSG_ERROR, \"(\", 0, 12),\n            \"15:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"new\", 0, 8),\n            \"17:1: \" + getCheckMessage(MSG_ERROR, \"new lparen\", 0, 8),\n            \"25:1: \" + getCheckMessage(MSG_ERROR, \"\u003d\", 0, 8),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationNewHandler.java\"), expected);\n    }\n\n    @Test\n    public void testTryHandler() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, getPath(\"InputIndentationTryBlockWithResources.java\"), expected);\n    }\n\n    @Test\n    public void testTryHandler2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        final String[] expected \u003d {\n            \"25:17: \" + getCheckMessage(MSG_ERROR, \"new\", 16, 20),\n            \"27:13: \" + getCheckMessage(MSG_ERROR, \"new\", 12, 20),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationTryBlock.java\"), expected);\n    }\n\n    @Test\n    public void testChainedMethodWithBracketOnNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n\n        checkConfig.addProperty(\"arrayInitIndent\", \"2\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"tabWidth\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"2\");\n        final String[] expected \u003d {\n            \"44:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 8),\n            \"45:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 8, 10),\n            \"47:7: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),\n            \"61:6: \" + getCheckMessage(MSG_ERROR, \"foo\", 5, 8),\n            \"82:5: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 4, 6),\n            \"84:3: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 2, 4),\n        };\n        final String fileName \u003d \"InputIndentationChainedMethodWithBracketOnNewLine.java\";\n        verifyWarns(checkConfig, getPath(fileName), expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpression() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"17:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 12),\n            \"18:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 16),\n            \"21:25: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 24, 12),\n            \"22:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 16),\n            \"27:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 20),\n            \"29:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 0, 16),\n            \"30:1: \" + getCheckMessage(MSG_ERROR, \"yield\", 0, 16),\n            \"34:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 4, 20),\n            \"44:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 0, 16),\n            \"46:21: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 20, 12),\n            \"47:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 0, 16),\n            \"51:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 8, 20),\n            \"56:33: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 32, 20),\n        };\n\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationCheckSwitchExpression.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationYieldStatement() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"23:13: \" + getCheckMessage(MSG_ERROR, \"yield\", 12, 16),\n            \"28:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"yield\", 8, 16),\n            \"40:5: \" + getCheckMessage(MSG_ERROR, \"yield\", 4, 16),\n            \"41:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"yield\", 8, 16),\n            \"71:1: \" + getCheckMessage(MSG_ERROR, \"yield\", 0, 16),\n            \"74:37: \" + getCheckMessage(MSG_ERROR, \"yield\", 36, 16),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationYieldStatement.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionCorrect() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationCheckSwitchExpressionCorrect.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionDeclaration() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"8\");\n        final String[] expected \u003d {\n            \"33:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"34:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"41:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"42:17: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 16, 12),\n            \"49:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"50:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"57:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n            \"58:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 12),\n        };\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationCheckSwitchExpressionDeclaration.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionDeclarationLeftCurlyNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"34:5: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 4, 8),\n            \"42:5: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 4, 8),\n            \"50:13: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 12, 8),\n            \"58:13: \" + getCheckMessage(MSG_ERROR, \"switch lcurly\", 12, 8),\n        };\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\n                    \"InputIndentationCheckSwitchExpressionDeclarationLCurlyNewLine.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationRecords() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"false\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationRecords.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationRecordsAndCompactCtors() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"13:1: \" + getCheckMessage(MSG_ERROR, \"(\", 0, 8),\n            \"25:1: \" + getCheckMessage(MSG_ERROR, \"String\", 0, 12),\n            \"38:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"compact ctor def\", 0, 12),\n            \"48:8: \" + getCheckMessage(MSG_ERROR, \"record def ident\", 0, 4),\n            \"53:1: \" + getCheckMessage(MSG_ERROR, \"compact ctor def rcurly\", 0, 8),\n            \"61:1: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 0, 8),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationRecordsAndCompactCtors.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"30:13: \" + getCheckMessage(MSG_ERROR, \"lambda\", 12, 16),\n            \"32:13: \" + getCheckMessage(MSG_ERROR, \"lambda\", 12, 16),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationCheckSwitchExpressionNewLine.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationMethodParenthesisOnNewLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"13:9: \" + getCheckMessage(MSG_ERROR, \"method def rparen\", 8, 4),\n            \"18:9: \" + getCheckMessage(MSG_ERROR, \"method def rparen\", 8, 4),\n        };\n\n        verifyWarns(checkConfig,\n                getPath(\"InputIndentationCheckMethodParenOnNewLine.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationMethodParenthesisOnNewLine1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        final String[] expected \u003d {\n            \"11:10: \" + getCheckMessage(MSG_ERROR, \"2\", 9, 12),\n            \"17:8: \" + getCheckMessage(MSG_ERROR, \"int\", 7, 8),\n            \"18:9: \" + getCheckMessage(MSG_ERROR, \"method def rparen\", 8, 4),\n        };\n\n        verifyWarns(checkConfig,\n                getPath(\"InputIndentationCheckMethodParenOnNewLine1.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLineWrappedRecordDeclaration() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"arrayInitIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n\n        final String[] expected \u003d {\n            \"33:1: \" + getCheckMessage(MSG_ERROR, \")\", 0, 4),\n            \"55:11: \" + getCheckMessage(MSG_ERROR, \"interface def ident\", 0, 4),\n            \"56:1: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 0, 8),\n            \"57:1: \" + getCheckMessage(MSG_ERROR, \"void\", 0, 4),\n            \"58:1: \" + getCheckMessage(MSG_ERROR, \"method\", 0, 4),\n            \"59:1: \" + getCheckMessage(MSG_ERROR, \"throws\", 0, 4),\n            \"60:1: \" + getCheckMessage(MSG_ERROR, \"IOException\", 0, 4),\n            \"61:1: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 0, 8),\n            \"62:1: \" + getCheckMessage(MSG_ERROR, \"interface def rcurly\", 0, 4),\n            \"75:8: \" + getCheckMessage(MSG_ERROR, \"record def ident\", 0, 4),\n            \"76:1: \" + getCheckMessage(MSG_ERROR, \"record def rparen\", 0, 4),\n            \"77:1: \" + getCheckMessage(MSG_ERROR, \"implements\", 0, 4),\n            \"78:1: \" + getCheckMessage(MSG_ERROR, \"SimpleInterface2\", 0, 4),\n            \"79:8: \" + getCheckMessage(MSG_ERROR, \"record def ident\", 0, 8),\n            \"80:1: \" + getCheckMessage(MSG_ERROR, \"(\", 0, 4),\n            \"81:1: \" + getCheckMessage(MSG_ERROR, \"record def rparen\", 0, 8),\n            \"82:1: \" + getCheckMessage(MSG_ERROR, \"record def lcurly\", 0, 8),\n            \"83:1: \" + getCheckMessage(MSG_ERROR, \"record def rcurly\", 0, 8),\n            \"84:1: \" + getCheckMessage(MSG_ERROR, \"record def rcurly\", 0, 4),\n        };\n\n        verifyWarns(checkConfig,\n            getNonCompilablePath(\"InputIndentationLineWrappedRecordDeclaration.java\"),\n            expected);\n    }\n\n    @Test\n    public void testIndentationAnnotationFieldDefinition() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n\n        final String[] expected \u003d {\n            \"17:5: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 4, 8),\n            \"18:13: \" + getCheckMessage(MSG_ERROR, \"annotation field def modifier\", 12, 8),\n            \"25:5: \" + getCheckMessage(MSG_ERROR, \"member def type\", 4, 8),\n            \"26:5: \" + getCheckMessage(MSG_ERROR, \"member def type\", 4, 8),\n        };\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationAnnotationFieldDefinition.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString1.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString2.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString3() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString3.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString4() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString4.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString5() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString5.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString6() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString6.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString7() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString7.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString8() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString8.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString9() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString9.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString10() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString10.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLongConcatenatedString11() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n\n        verifyWarns(checkConfig, getPath(\"InputIndentationLongConcatenatedString11.java\"),\n                expected);\n    }\n\n    @Test\n    public void testIndentationLineBreakVariableDeclaration()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n\n        final String fileName \u003d getPath(\"InputIndentationLineBreakVariableDeclaration.java\");\n        final String[] expected \u003d CommonUtil.EMPTY_STRING_ARRAY;\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIndentationSwitchExpressionOnStartOfTheLine() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n\n        final String[] expected \u003d {\n            \"40:7: \" + getCheckMessage(MSG_ERROR, \"switch\", 6, 8),\n            \"41:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 10),\n            \"42:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 10),\n            \"43:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 10),\n            \"44:7: \" + getCheckMessage(MSG_ERROR, \"switch rcurly\", 6, 8),\n            \"49:11: \" + getCheckMessage(MSG_ERROR, \"switch\", 10, 8),\n            \"50:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 10),\n            \"51:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 10),\n            \"52:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 10),\n        };\n\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationSwitchOnStartOfLine.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationPatternMatchingForSwitch()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n\n        final String fileName \u003d getNonCompilablePath(\n                \"InputIndentationPatternMatchingForSwitch.java\");\n        final String[] expected \u003d {\n            \"21:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"54:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"69:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"70:13: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 12, 16),\n            \"75:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 4, 16),\n            \"76:5: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 4, 16),\n            \"87:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 16),\n            \"88:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 16),\n            \"89:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 0, 16),\n            \"90:1: \" + getCheckMessage(MSG_ERROR, \"lambda\", 0, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIndentationRecordPattern()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n\n        final String fileName \u003d getNonCompilablePath(\n                \"InputIndentationRecordPattern.java\");\n        final String[] expected \u003d {\n            \"19:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"24:9: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 8, 12),\n            \"29:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"34:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"37:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"39:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"40:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"41:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"42:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"56:17: \" + getCheckMessage(MSG_ERROR, \"Rectangle\", 16, 12),\n            \"57:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"58:25: \" + getCheckMessage(MSG_ERROR, \"boolean\", 24, 12),\n            \"59:17: \" + getCheckMessage(MSG_ERROR, \"int\", 16, 12),\n            \"60:25: \" + getCheckMessage(MSG_ERROR, \"_\", 24, 12),\n            \"61:17: \" + getCheckMessage(MSG_ERROR, \"ColoredPoint\", 16, 12),\n            \"62:17: \" + getCheckMessage(MSG_ERROR, \")\", 16, 8),\n            \"67:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"66:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"68:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"69:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"70:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"71:1: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 0, 12),\n            \"72:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 8, 12),\n            \"81:13: \" + getCheckMessage(MSG_ERROR, \")\", 12, 8),\n            \"89:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 16),\n            \"90:9: \" + getCheckMessage(MSG_CHILD_ERROR, \"case\", 8, 16),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    @Test\n    public void testIndentationCodeBlocks1() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"17:5: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 4, 2),\n            \"18:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 4),\n            \"19:5: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 4, 2),\n            \"30:5: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 4, 2),\n            \"31:7: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 4),\n            \"32:5: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 4, 2),\n        };\n        verifyWarns(checkConfig, getPath(\"InputIndentationCodeBlocks1.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationCodeBlocks2() throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"2\");\n        checkConfig.addProperty(\"braceAdjustment\", \"2\");\n        checkConfig.addProperty(\"throwsIndent\", \"4\");\n        checkConfig.addProperty(\"caseIndent\", \"2\");\n        checkConfig.addProperty(\"lineWrappingIndentation\", \"4\");\n        final String[] expected \u003d {\n            \"45:13: \" + getCheckMessage(MSG_ERROR, \"for lcurly\", 12, 14),\n            \"47:13: \" + getCheckMessage(MSG_ERROR, \"for rcurly\", 12, 14),\n        };\n        verifyWarns(checkConfig,\n                getNonCompilablePath(\"InputIndentationCodeBlocks2.java\"), expected);\n    }\n\n    @Test\n    public void testIndentationSealedClasses()\n            throws Exception {\n        final DefaultConfiguration checkConfig \u003d createModuleConfig(IndentationCheck.class);\n        checkConfig.addProperty(\"forceStrictCondition\", \"true\");\n        checkConfig.addProperty(\"tabWidth\", \"4\");\n        checkConfig.addProperty(\"basicOffset\", \"4\");\n        checkConfig.addProperty(\"braceAdjustment\", \"0\");\n        checkConfig.addProperty(\"caseIndent\", \"4\");\n        checkConfig.addProperty(\"throwsIndent\", \"8\");\n\n        final String fileName \u003d getNonCompilablePath(\n                \"InputIndentationSealedClasses.java\");\n        final String[] expected \u003d {\n            \"14:1: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 0, 4),\n            \"15:2: \" + getCheckMessage(MSG_ERROR, \"class\", 1, 4),\n            \"16:6: \" + getCheckMessage(MSG_ERROR, \"permits\", 5, 4),\n            \"19:5: \" + getCheckMessage(MSG_ERROR, \"class\", 4, 8),\n            \"20:5: \" + getCheckMessage(MSG_ERROR, \"permits\", 4, 8),\n            \"28:1: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 0, 4),\n            \"29:9: \" + getCheckMessage(MSG_ERROR, \"extends\", 8, 4),\n            \"32:5: \" + getCheckMessage(MSG_ERROR, \"extends\", 4, 8),\n            \"38:5: \" + getCheckMessage(MSG_ERROR, \"class\", 4, 8),\n            \"39:1: \" + getCheckMessage(MSG_ERROR, \"permits\", 0, 8),\n            \"40:13: \" + getCheckMessage(MSG_ERROR, \"C\", 12, 8),\n            \"48:5: \" + getCheckMessage(MSG_ERROR, \"class\", 4, 8),\n            \"49:5: \" + getCheckMessage(MSG_ERROR, \"C\", 4, 8),\n            \"55:1: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 0, 4),\n            \"56:9: \" + getCheckMessage(MSG_ERROR, \"class\", 8, 4),\n        };\n        verifyWarns(checkConfig, fileName, expected);\n    }\n\n    private static final class IndentAudit implements AuditListener {\n\n        private final IndentComment[] comments;\n        private int position;\n\n        private IndentAudit(IndentComment... comments) {\n            this.comments \u003d Arrays.copyOf(comments, comments.length);\n        }\n\n        @Override\n        public void auditStarted(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void auditFinished(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void fileStarted(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void fileFinished(AuditEvent event) {\n            // No code needed\n        }\n\n        @Override\n        public void addError(AuditEvent event) {\n            final int line \u003d event.getLine();\n            final String message \u003d event.getMessage();\n\n            assertWithMessage(\n                    \"found a warning when none was expected for #%s at line %s with message %s\",\n                    position, line, message)\n                .that(position)\n                .isLessThan(comments.length);\n\n            final IndentComment comment \u003d comments[position];\n            position++;\n\n            final String possibleExceptedMessages \u003d Arrays.stream(comment.getExpectedMessages())\n                    .reduce(\"\", (cur, next) -\u003e cur + \"\\\"\" + next + \"\\\", \");\n            final String assertMessage \u003d String.format(\n                    Locale.ROOT,\n                    \"input expected warning #%d at line %d to report one of the following: %s\"\n                            + \"but got instead: %d: %s\",\n                    position, comment.getLineNumber(), possibleExceptedMessages, line, message);\n            assertWithMessage(assertMessage)\n                    .that(line \u003d\u003d comment.getLineNumber() \u0026\u0026 Arrays\n                            .stream(comment.getExpectedMessages()).anyMatch(message::endsWith))\n                    .isTrue();\n        }\n\n        @Override\n        public void addException(AuditEvent event, Throwable throwable) {\n            // No code needed\n        }\n\n    }\n\n    private static final class IndentComment {\n\n        /** Used to locate the index of argument zero of error messages. */\n        private static final String FAKE_ARGUMENT_ZERO \u003d \"##0##\";\n        private final int lineNumber;\n        private final int indent;\n        /** Used for when violations report nodes not first on the line. */\n        private final int indentOffset;\n        private final boolean expectedNonStrict;\n        private final String expectedWarning;\n        private final boolean warning;\n\n        private IndentComment(IndentComment original, int newLineNumber) {\n            lineNumber \u003d newLineNumber;\n            indent \u003d original.indent;\n            indentOffset \u003d original.indentOffset;\n            expectedNonStrict \u003d original.expectedNonStrict;\n            expectedWarning \u003d original.expectedWarning;\n            warning \u003d original.warning;\n        }\n\n        private IndentComment(Matcher match, int lineNumber) {\n            this.lineNumber \u003d lineNumber;\n            indent \u003d Integer.parseInt(match.group(1));\n            if (match.group(2) \u003d\u003d null) {\n                indentOffset \u003d 0;\n            }\n            else {\n                indentOffset \u003d Integer.parseInt(match.group(2));\n            }\n            expectedNonStrict \u003d match.group(3) !\u003d null;\n            expectedWarning \u003d match.group(4).replace(\",\", \", \");\n            warning \u003d match.group(5) !\u003d null;\n        }\n\n        public String[] getExpectedMessages() {\n            final String[] expectedMessages;\n            if (expectedWarning.contains(\",\")) {\n                expectedMessages \u003d new String[] {\n                    getExpectedMessagePostfix(MSG_ERROR_MULTI),\n                    getExpectedMessagePostfix(MSG_CHILD_ERROR_MULTI),\n                };\n            }\n            else {\n                expectedMessages \u003d new String[] {\n                    getExpectedMessagePostfix(MSG_ERROR),\n                    getExpectedMessagePostfix(MSG_CHILD_ERROR),\n                };\n            }\n            return expectedMessages;\n        }\n\n        private String getExpectedMessagePostfix(final String messageKey) {\n            final String msg \u003d getCheckMessage(IndentationCheck.class, messageKey,\n                    FAKE_ARGUMENT_ZERO, indent + indentOffset, expectedWarning);\n            final int indexOfMsgPostfix \u003d msg.indexOf(FAKE_ARGUMENT_ZERO)\n                    + FAKE_ARGUMENT_ZERO.length();\n            return msg.substring(indexOfMsgPostfix);\n        }\n\n        public int getLineNumber() {\n            return lineNumber;\n        }\n\n        public int getIndent() {\n            return indent;\n        }\n\n        public int getIndentOffset() {\n            return indentOffset;\n        }\n\n        public boolean isExpectedNonStrict() {\n            return expectedNonStrict;\n        }\n\n        public String getExpectedWarning() {\n            return expectedWarning;\n        }\n\n        public boolean isWarning() {\n            return warning;\n        }\n\n    }\n\n}\n","diffSourceCodeSet":["private static void processInlineComment(IndentComment warn, int actualIndent,\n        int lineNumber, String fileName, List\u003cIndentComment\u003e result) {\n\n        if (actualIndent !\u003d warn.getIndent()) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n                            + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                    fileName,\n                    lineNumber,\n                    warn.getIndent(),\n                    actualIndent));\n        }\n\n        if (!isCommentConsistent(warn)) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                    fileName,\n                    lineNumber));\n        }\n\n        if (warn.isWarning()) {\n            result.add(warn);\n        }\n    }"],"invokedMethodSet":["methodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest#getLineStart\n methodBody: private static int getLineStart(String line, final int tabWidth) {\nint lineStart\u003d0;\nfor(int index\u003d0; index \u003c line.length(); ++index){if(!Character.isWhitespace(line.charAt(index))){lineStart\u003dCommonUtil.lengthExpandedTabs(line,index,tabWidth);\nbreak;\n}}return lineStart;\n}","methodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.IndentComment#getIndent\n methodBody: public int getIndent() {\nreturn indent;\n}","methodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.IndentComment#isWarning\n methodBody: public boolean isWarning() {\nreturn warning;\n}","methodSignature: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest#isCommentConsistent\n methodBody: private static boolean isCommentConsistent(IndentComment comment) {\nfinal String[] levels\u003dcomment.getExpectedWarning().split(\", \");\nfinal int indent\u003dcomment.getIndent() + comment.getIndentOffset();\nfinal boolean result;\nif(levels.length \u003e 1){final boolean containsActualLevel\u003dArrays.asList(levels).contains(String.valueOf(indent));\nresult\u003dcontainsActualLevel !\u003d comment.isWarning();\n}{final int expectedWarning\u003dInteger.parseInt(comment.getExpectedWarning());\nfinal boolean test;\nif(comment.isExpectedNonStrict()){test\u003dindent \u003e\u003d expectedWarning;\n}{test\u003dexpectedWarning \u003d\u003d indent;\n}result\u003dtest !\u003d comment.isWarning();\n}return result;\n}"],"sourceCodeAfterRefactoring":"private static IndentComment[] getLinesWithWarnAndCheckComments(String aFileName,\n            final int tabWidth)\n            throws IOException {\n        final List\u003cIndentComment\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(Path.of(aFileName),\n                StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            String line \u003d br.readLine();\n            IndentComment pendingBelowComment \u003d null;\n\n            while (line !\u003d null) {\n                final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n                if (pendingBelowComment !\u003d null) {\n                    final int actualIndent \u003d getLineStart(line, tabWidth);\n\n                    processPendingBelowComment(pendingBelowComment, actualIndent,\n                            lineNumber, result);\n\n                    pendingBelowComment \u003d null;\n                }\n                else if (match.matches()) {\n                    final boolean isBelow \u003d line.contains(\"//below indent:\");\n                    final IndentComment warn \u003d new IndentComment(match, lineNumber);\n\n                    if (isBelow) {\n                        pendingBelowComment \u003d warn;\n                    }\n                    else {\n                        final int actualIndent \u003d getLineStart(line, tabWidth);\n                        processInlineComment(warn, actualIndent, lineNumber, aFileName, result);\n                    }\n                }\n                else if (pendingBelowComment \u003d\u003d null \u0026\u0026 !line.isEmpty()) {\n                    throw new IllegalStateException(String.format(Locale.ROOT,\n                            \"File \\\"%1$s\\\" has no indentation comment or its format \"\n                                    + \"malformed. Error on line: %2$d\",\n                            aFileName,\n                            lineNumber));\n                }\n\n                line \u003d br.readLine();\n                lineNumber++;\n            }\n        }\n\n        return result.toArray(EMPTY_INDENT_COMMENT_ARRAY);\n    }\nprivate static void processInlineComment(IndentComment warn, int actualIndent,\n        int lineNumber, String fileName, List\u003cIndentComment\u003e result) {\n\n        if (actualIndent !\u003d warn.getIndent()) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n                            + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n                    fileName,\n                    lineNumber,\n                    warn.getIndent(),\n                    actualIndent));\n        }\n\n        if (!isCommentConsistent(warn)) {\n            throw new IllegalStateException(String.format(Locale.ROOT,\n                    \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n                    fileName,\n                    lineNumber));\n        }\n\n        if (warn.isWarning()) {\n            result.add(warn);\n        }\n    }","diffSourceCode":"    61:     private static IndentComment[] getLinesWithWarnAndCheckComments(String aFileName,\n    62:             final int tabWidth)\n-   63:                     throws IOException {\n+   63:             throws IOException {\n    64:         final List\u003cIndentComment\u003e result \u003d new ArrayList\u003c\u003e();\n    65:         try (BufferedReader br \u003d Files.newBufferedReader(Path.of(aFileName),\n    66:                 StandardCharsets.UTF_8)) {\n    67:             int lineNumber \u003d 1;\n-   68:             for (String line \u003d br.readLine(); line !\u003d null; line \u003d br.readLine()) {\n-   69:                 final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n-   70:                 if (match.matches()) {\n-   71:                     final IndentComment warn \u003d new IndentComment(match, lineNumber);\n-   72:                     final int actualIndent \u003d getLineStart(line, tabWidth);\n-   73: \n-   74:                     if (actualIndent !\u003d warn.getIndent()) {\n-   75:                         throw new IllegalStateException(String.format(Locale.ROOT,\n-   76:                                         \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n-   77:                                                         + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n-   78:                                         aFileName,\n-   79:                                         lineNumber,\n-   80:                                         warn.getIndent(),\n-   81:                                         actualIndent));\n-   82:                     }\n-   83: \n-   84:                     if (!isCommentConsistent(warn)) {\n-   85:                         throw new IllegalStateException(String.format(Locale.ROOT,\n-   86:                                         \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n-   87:                                         aFileName,\n-   88:                                         lineNumber));\n-   89:                     }\n-   90: \n-   91:                     if (warn.isWarning()) {\n-   92:                         result.add(warn);\n-   93:                     }\n-   94:                 }\n-   95:                 else if (!line.isEmpty()) {\n-   96:                     throw new IllegalStateException(String.format(Locale.ROOT,\n-   97:                                     \"File \\\"%1$s\\\" has no indentation comment or its format \"\n-   98:                                                     + \"malformed. Error on line: %2$d\",\n-   99:                                     aFileName,\n-  100:                                     lineNumber));\n-  101:                 }\n+   68:             String line \u003d br.readLine();\n+   69:             IndentComment pendingBelowComment \u003d null;\n+   70: \n+   71:             while (line !\u003d null) {\n+   72:                 final Matcher match \u003d LINE_WITH_COMMENT_REGEX.matcher(line);\n+   73:                 if (pendingBelowComment !\u003d null) {\n+   74:                     final int actualIndent \u003d getLineStart(line, tabWidth);\n+   75: \n+   76:                     processPendingBelowComment(pendingBelowComment, actualIndent,\n+   77:                             lineNumber, result);\n+   78: \n+   79:                     pendingBelowComment \u003d null;\n+   80:                 }\n+   81:                 else if (match.matches()) {\n+   82:                     final boolean isBelow \u003d line.contains(\"//below indent:\");\n+   83:                     final IndentComment warn \u003d new IndentComment(match, lineNumber);\n+   84: \n+   85:                     if (isBelow) {\n+   86:                         pendingBelowComment \u003d warn;\n+   87:                     }\n+   88:                     else {\n+   89:                         final int actualIndent \u003d getLineStart(line, tabWidth);\n+   90:                         processInlineComment(warn, actualIndent, lineNumber, aFileName, result);\n+   91:                     }\n+   92:                 }\n+   93:                 else if (pendingBelowComment \u003d\u003d null \u0026\u0026 !line.isEmpty()) {\n+   94:                     throw new IllegalStateException(String.format(Locale.ROOT,\n+   95:                             \"File \\\"%1$s\\\" has no indentation comment or its format \"\n+   96:                                     + \"malformed. Error on line: %2$d\",\n+   97:                             aFileName,\n+   98:                             lineNumber));\n+   99:                 }\n+  100: \n+  101:                 line \u003d br.readLine();\n   102:                 lineNumber++;\n   103:             }\n   104:         }\n-  105:         return result.toArray(EMPTY_INDENT_COMMENT_ARRAY);\n-  106:     }\n-  107: \n-  132: \n-  133:         }\n-  134:         return result;\n-  135:     }\n-  136: \n-  137:     private static int getLineStart(String line, final int tabWidth) {\n-  138:         int lineStart \u003d 0;\n-  139:         for (int index \u003d 0; index \u003c line.length(); ++index) {\n-  140:             if (!Character.isWhitespace(line.charAt(index))) {\n-  141:                 lineStart \u003d CommonUtil.lengthExpandedTabs(line, index, tabWidth);\n-  142:                 break;\n-  143:             }\n-  144:         }\n-  145:         return lineStart;\n-  146:     }\n-  147: \n-  148:     private void verifyWarns(Configuration config, String filePath,\n-  149:                     String... expected)\n-  150:                     throws Exception {\n-  151:         final int tabWidth \u003d Integer.parseInt(config.getProperty(\"tabWidth\"));\n-  152:         final IndentComment[] linesWithWarn \u003d\n-  153:                         getLinesWithWarnAndCheckComments(filePath, tabWidth);\n-  154:         verify(config, filePath, expected, linesWithWarn);\n-  155:         assertWithMessage(\"Expected warning count in UT does not match warn comment count \"\n+  105: \n+  106:         return result.toArray(EMPTY_INDENT_COMMENT_ARRAY);\n+  107:     }\n+  132:     private static void processInlineComment(IndentComment warn, int actualIndent,\n+  133:         int lineNumber, String fileName, List\u003cIndentComment\u003e result) {\n+  134: \n+  135:         if (actualIndent !\u003d warn.getIndent()) {\n+  136:             throw new IllegalStateException(String.format(Locale.ROOT,\n+  137:                     \"File \\\"%1$s\\\" has incorrect indentation in comment. \"\n+  138:                             + \"Line %2$d: comment:%3$d, actual:%4$d.\",\n+  139:                     fileName,\n+  140:                     lineNumber,\n+  141:                     warn.getIndent(),\n+  142:                     actualIndent));\n+  143:         }\n+  144: \n+  145:         if (!isCommentConsistent(warn)) {\n+  146:             throw new IllegalStateException(String.format(Locale.ROOT,\n+  147:                     \"File \\\"%1$s\\\" has inconsistent comment on line %2$d\",\n+  148:                     fileName,\n+  149:                     lineNumber));\n+  150:         }\n+  151: \n+  152:         if (warn.isWarning()) {\n+  153:             result.add(warn);\n+  154:         }\n+  155:     }\n","uniqueId":"ecf60db4e34d24ecb634441534037f7427d913c0_61_106_132_155_61_107"}]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"1adb88ede6a7d1ef16b58e9ce8cd0f25382733bf","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"f55ca9316fb38731aa46b561fe42d6eaebd53d9f","refactoringAnalyses":[{"type":"Move Method","description":"Move Method\tpublic foo1() : void from class com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2 to public foo1() : void from class com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example6","diffLocations":[{"filePath":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java","startLine":15,"endLine":23,"startColumn":0,"endColumn":0},{"filePath":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java","startLine":15,"endLine":25,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"public void foo1() {\n    int num;        // ok, distance \u003d 4\n    final double PI;   // ok, final variables not checked\n    System.out.println(\"Statement 1\");\n    System.out.println(\"Statement 2\");\n    System.out.println(\"Statement 3\");\n    num \u003d 1;\n    PI \u003d 3.14;\n  }","filePathBefore":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java","isPureRefactoring":true,"commitId":"f55ca9316fb38731aa46b561fe42d6eaebd53d9f","packageNameBefore":"com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance","classNameBefore":"com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2","methodNameBefore":"com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2#foo1","classSignatureBefore":"public class Example2 ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2#foo1"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2"],"classSignatureBeforeSet":["public class Example2 "],"purityCheckResultList":[{"isPure":true,"purityComment":"Identical statements","description":"There is no replacement! - all mapped","mappingState":1}],"sourceCodeBeforeForWhole":"/*xml\n\u003cmodule name\u003d\"Checker\"\u003e\n  \u003cmodule name\u003d\"TreeWalker\"\u003e\n    \u003cmodule name\u003d\"VariableDeclarationUsageDistance\"\u003e\n      \u003cproperty name\u003d\"allowedDistance\" value\u003d\"4\"/\u003e\n    \u003c/module\u003e\n  \u003c/module\u003e\n\u003c/module\u003e\n*/\npackage com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\n\n// xdoc section -- start\npublic class Example2 {\n\n  public void foo1() {\n    int num;        // ok, distance \u003d 4\n    final double PI;   // ok, final variables not checked\n    System.out.println(\"Statement 1\");\n    System.out.println(\"Statement 2\");\n    System.out.println(\"Statement 3\");\n    num \u003d 1;\n    PI \u003d 3.14;\n  }\n\n  public void foo2() {\n    int a;          // ok, used in different scope\n    int b;          // ok, used in different scope\n    int count \u003d 0;  // ok, used in different scope\n\n    {\n      System.out.println(\"Inside inner scope\");\n      a \u003d 1;\n      b \u003d 2;\n      count++;\n    }\n  }\n}\n// xdoc section -- end\n","filePathAfter":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java","sourceCodeAfterForWhole":"/*xml\n\u003cmodule name\u003d\"Checker\"\u003e\n  \u003cmodule name\u003d\"TreeWalker\"\u003e\n    \u003cmodule name\u003d\"VariableDeclarationUsageDistance\"\u003e\n      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e\n    \u003c/module\u003e\n  \u003c/module\u003e\n\u003c/module\u003e\n*/\npackage com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\n\n// xdoc section -- start\npublic class Example6 {\n\n  public void foo1() {\n    // violation below, \u0027variable \u0027num\u0027 declaration and its first usage is 4.\u0027\n    int num;\n    // violation below, \u0027variable \u0027PI\u0027 declaration and its first usage is 5.\u0027\n    final double PI;\n    System.out.println(\"Statement 1\");\n    System.out.println(\"Statement 2\");\n    System.out.println(\"Statement 3\");\n    num \u003d 1;\n    PI \u003d 3.14;\n  }\n\n  public void foo2() {\n    int a;          // OK, used in different scope\n    int b;          // OK, used in different scope\n    int count \u003d 0;  // OK, used in different scope\n\n    {\n      System.out.println(\"Inside inner scope\");\n      a \u003d 1;\n      b \u003d 2;\n      count++;\n    }\n  }\n}\n// xdoc section -- end\n","diffSourceCodeSet":[],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"public void foo1() {\n    // violation below, \u0027variable \u0027num\u0027 declaration and its first usage is 4.\u0027\n    int num;\n    // violation below, \u0027variable \u0027PI\u0027 declaration and its first usage is 5.\u0027\n    final double PI;\n    System.out.println(\"Statement 1\");\n    System.out.println(\"Statement 2\");\n    System.out.println(\"Statement 3\");\n    num \u003d 1;\n    PI \u003d 3.14;\n  }","diffSourceCode":"    15:   public void foo1() {\n-   16:     int num;        // ok, distance \u003d 4\n-   17:     final double PI;   // ok, final variables not checked\n-   18:     System.out.println(\"Statement 1\");\n-   19:     System.out.println(\"Statement 2\");\n-   20:     System.out.println(\"Statement 3\");\n-   21:     num \u003d 1;\n-   22:     PI \u003d 3.14;\n-   23:   }\n-   24: \n-   25:   public void foo2() {\n+   16:     // violation below, \u0027variable \u0027num\u0027 declaration and its first usage is 4.\u0027\n+   17:     int num;\n+   18:     // violation below, \u0027variable \u0027PI\u0027 declaration and its first usage is 5.\u0027\n+   19:     final double PI;\n+   20:     System.out.println(\"Statement 1\");\n+   21:     System.out.println(\"Statement 2\");\n+   22:     System.out.println(\"Statement 3\");\n+   23:     num \u003d 1;\n+   24:     PI \u003d 3.14;\n+   25:   }\n","uniqueId":"f55ca9316fb38731aa46b561fe42d6eaebd53d9f_15_23__15_25"},{"type":"Move Method","description":"Move Method\tpublic foo2() : void from class com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2 to public foo2() : void from class com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example6","diffLocations":[{"filePath":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java","startLine":25,"endLine":36,"startColumn":0,"endColumn":0},{"filePath":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java","startLine":27,"endLine":38,"startColumn":0,"endColumn":0}],"sourceCodeBeforeRefactoring":"public void foo2() {\n    int a;          // ok, used in different scope\n    int b;          // ok, used in different scope\n    int count \u003d 0;  // ok, used in different scope\n\n    {\n      System.out.println(\"Inside inner scope\");\n      a \u003d 1;\n      b \u003d 2;\n      count++;\n    }\n  }","filePathBefore":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java","isPureRefactoring":true,"commitId":"f55ca9316fb38731aa46b561fe42d6eaebd53d9f","packageNameBefore":"com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance","classNameBefore":"com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2","methodNameBefore":"com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2#foo2","classSignatureBefore":"public class Example2 ","methodNameBeforeSet":["com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2#foo2"],"classNameBeforeSet":["com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance.Example2"],"classSignatureBeforeSet":["public class Example2 "],"purityCheckResultList":[{"isPure":true,"purityComment":"Identical statements","description":"There is no replacement! - all mapped","mappingState":1}],"sourceCodeBeforeForWhole":"/*xml\n\u003cmodule name\u003d\"Checker\"\u003e\n  \u003cmodule name\u003d\"TreeWalker\"\u003e\n    \u003cmodule name\u003d\"VariableDeclarationUsageDistance\"\u003e\n      \u003cproperty name\u003d\"allowedDistance\" value\u003d\"4\"/\u003e\n    \u003c/module\u003e\n  \u003c/module\u003e\n\u003c/module\u003e\n*/\npackage com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\n\n// xdoc section -- start\npublic class Example2 {\n\n  public void foo1() {\n    int num;        // ok, distance \u003d 4\n    final double PI;   // ok, final variables not checked\n    System.out.println(\"Statement 1\");\n    System.out.println(\"Statement 2\");\n    System.out.println(\"Statement 3\");\n    num \u003d 1;\n    PI \u003d 3.14;\n  }\n\n  public void foo2() {\n    int a;          // ok, used in different scope\n    int b;          // ok, used in different scope\n    int count \u003d 0;  // ok, used in different scope\n\n    {\n      System.out.println(\"Inside inner scope\");\n      a \u003d 1;\n      b \u003d 2;\n      count++;\n    }\n  }\n}\n// xdoc section -- end\n","filePathAfter":"src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java","sourceCodeAfterForWhole":"/*xml\n\u003cmodule name\u003d\"Checker\"\u003e\n  \u003cmodule name\u003d\"TreeWalker\"\u003e\n    \u003cmodule name\u003d\"VariableDeclarationUsageDistance\"\u003e\n      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e\n    \u003c/module\u003e\n  \u003c/module\u003e\n\u003c/module\u003e\n*/\npackage com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\n\n// xdoc section -- start\npublic class Example6 {\n\n  public void foo1() {\n    // violation below, \u0027variable \u0027num\u0027 declaration and its first usage is 4.\u0027\n    int num;\n    // violation below, \u0027variable \u0027PI\u0027 declaration and its first usage is 5.\u0027\n    final double PI;\n    System.out.println(\"Statement 1\");\n    System.out.println(\"Statement 2\");\n    System.out.println(\"Statement 3\");\n    num \u003d 1;\n    PI \u003d 3.14;\n  }\n\n  public void foo2() {\n    int a;          // OK, used in different scope\n    int b;          // OK, used in different scope\n    int count \u003d 0;  // OK, used in different scope\n\n    {\n      System.out.println(\"Inside inner scope\");\n      a \u003d 1;\n      b \u003d 2;\n      count++;\n    }\n  }\n}\n// xdoc section -- end\n","diffSourceCodeSet":[],"invokedMethodSet":[],"sourceCodeAfterRefactoring":"public void foo2() {\n    int a;          // OK, used in different scope\n    int b;          // OK, used in different scope\n    int count \u003d 0;  // OK, used in different scope\n\n    {\n      System.out.println(\"Inside inner scope\");\n      a \u003d 1;\n      b \u003d 2;\n      count++;\n    }\n  }","diffSourceCode":"-   25:   public void foo2() {\n-   26:     int a;          // ok, used in different scope\n-   27:     int b;          // ok, used in different scope\n-   28:     int count \u003d 0;  // ok, used in different scope\n-   29: \n-   30:     {\n-   31:       System.out.println(\"Inside inner scope\");\n-   32:       a \u003d 1;\n-   33:       b \u003d 2;\n-   34:       count++;\n-   35:     }\n-   36:   }\n-   37: }\n-   38: // xdoc section -- end\n+   25:   }\n+   26: \n+   27:   public void foo2() {\n+   28:     int a;          // OK, used in different scope\n+   29:     int b;          // OK, used in different scope\n+   30:     int count \u003d 0;  // OK, used in different scope\n+   31: \n+   32:     {\n+   33:       System.out.println(\"Inside inner scope\");\n+   34:       a \u003d 1;\n+   35:       b \u003d 2;\n+   36:       count++;\n+   37:     }\n+   38:   }\n","uniqueId":"f55ca9316fb38731aa46b561fe42d6eaebd53d9f_25_36__27_38"}]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"eb5f77a3ac9ea0840e86c7e325f4f6d45e3ca69f","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"c3fa4d43560a84ea716044b1f69c3d35c84f00d3","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"27671da2483e46a09d12333aae46ea39945b3bbe","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a01aa0d148ba25dfc80ad825aa3792f47561017e","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"01d07ba73486f2b527160cb3537b1712383eae40","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"d21303ab069db12a69d124441151bf91b0320b57","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"ac2b0b9007bdc5550048da57030c1b39b739fc58","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a3c421f2deb3dc936f509b2ad807bed05ad90e35","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"6d5688381012cf6680ea4bac762081fcc9d515cf","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"9be1927de556a79dc797edbf650e89daa6924dcf","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"be4cf504b919257408487e3f6956f69b473137bd","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"efa05942e340ff64d817d3a80af23d57fe35fc2a","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"8408f57a625de7a15197a11a6fbe91f1b287d5bd","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"497d26a5919f67e1ad0a214a21edd4ba3d342fa6","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"0142d6de792d0c83f17f678d7a540a9f00091340","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"d91c3e040b5b720605df97283f74aedb8e1f36dc","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"edbfc66ebec525c024ea967c82a72c38fe2b7fa2","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"ef6ba57b9787325a136b538cf2aa89f8ce9d4989","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"5060c00986aa52ae71408def07708baf80d8a37e","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"87b562c8b05572d2ea0c01bf9b591b93ba71a897","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"02b1e1e844a77d2bf5d0f9b034a6208912ba0903","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"a0584d1067b751f7dd6cfb02537741aba1319443","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"8ebdde4b5f91c441ec087a58144aba5f52f38ddb","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"0609217f19eca72b5f24cabac8bfaa4f6c8dbaff","refactoringAnalyses":[]},{"url":"https://github.com/checkstyle/checkstyle.git","commitId":"b007d563c4f9da44040452a8a9de2b76bc64875e","refactoringAnalyses":[]}]}